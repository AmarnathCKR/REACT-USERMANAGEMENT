{"ast":null,"code":"import BitRateAction from \"./transcode/BitRateAction.js\";\nimport AudioCodecAction from \"./transcode/AudioCodecAction.js\";\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction.js\";\nimport FPSAction from \"./transcode/FPSAction.js\";\nimport FPSRangeAction from \"./transcode/FPSRangeAction.js\";\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction.js\";\nimport StreamingProfileAction from \"./transcode/StreamingProfile.js\";\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction.js\";\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction.js\";\n/**\n * @description Defines how to transcode a video to another format\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Transcoding video to other formats}\n * @memberOf Actions\n * @namespace Transcode\n * @example\n * // See examples under each method\n */\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio sample frequency.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio frequency control}\n * @param {AudioFrequencyType|string|number} freq The audio frequency.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {FREQ11025} from '@cloudinary/url-gen/qualifiers/audioFrequency'\n * import {audioFrequency} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode(audioFrequency(FREQ11025()))\n * @return {Actions.Transcode.AudioFrequencyAction}\n *\n */\nfunction audioFrequency(freq) {\n  return new AudioFrequencyAction(freq);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio codec or removes the audio channel.\n * @param {AudioCodecType | string} codec The audio codec or \"none\".\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {aac} from '@cloudinary/url-gen/qualifiers/audioCodec'\n * import {audioCodec} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( audioCodec( aac() ) );\n * @return {Actions.Transcode.AudioCodecAction}\n */\nfunction audioCodec(codec) {\n  return new AudioCodecAction(codec);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video bitrate.\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\n *\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {bitRate} from '@cloudinary/url-gen/actions/transcode'\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( bitRate(500).constant() );\n * @return {Actions.Transcode.BitRateAction}\n */\nfunction bitRate(bitRate) {\n  return new BitRateAction(bitRate);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @param {number} from frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fps} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fps(15) );\n * @return {Actions.Transcode.FPSAction}\n */\nfunction fps(from) {\n  return new FPSAction(from);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\n * delivered with an expected FPS level (helps with sync to audio).\n * @param {number} from frame rate\n * @param {number} to frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fpsRange} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fpsRange( 20, 25 ) );\n * @return {Actions.Transcode.FPSRangeAction}\n */\nfunction fpsRange(from, to) {\n  return new FPSRangeAction(from, to);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the keyframe interval of the delivered video.\n * @param {number | string} interval The keyframe interval in seconds.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {keyframeInterval} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( keyframeInterval( 0.5 ) );\n * @return {Actions.Transcode.KeyframeIntervalsAction}\n */\nfunction keyframeInterval(interval) {\n  return new KeyframeIntervalsAction(interval);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\n * profiles or to create new custom profiles.\n * @param {string} profile The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fullHd} from \"@cloudinary/url-gen/qualifiers/streamingProfile\";\n * import {streamingProfile} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( streamingProfile( fullHd() ) );\n * @return {Actions.Transcode.StreamingProfileAction}\n */\nfunction streamingProfile(profile) {\n  return new StreamingProfileAction(profile);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Converts a video to animated image.\n * @param {string | AnimatedFormatType} animatedFormat The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {gif} from '@cloudinary/url-gen/qualifiers/animatedFormat'\n * import {toAnimated} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( toAnimated( gif() ) );\n * @return {Actions.Transcode.ToAnimatedAction}\n */\nfunction toAnimated() {\n  let animatedFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return new ToAnimatedAction(animatedFormat);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video codec.\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {vp9} from '@cloudinary/url-gen/qualifiers/videoCodec'\n * import {videoCodec} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( videoCodec( vp9() ) );\n * @return {Actions.Transcode.VideoCodecAction}\n */\nfunction videoCodec(videoCodecType) {\n  return new VideoCodecAction(videoCodecType);\n}\nconst Transcode = {\n  bitRate,\n  audioCodec,\n  audioFrequency,\n  fps,\n  fpsRange,\n  keyframeInterval,\n  streamingProfile,\n  toAnimated,\n  videoCodec\n};\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };","map":{"version":3,"names":["BitRateAction","AudioCodecAction","AudioFrequencyAction","FPSAction","FPSRangeAction","KeyframeIntervalsAction","StreamingProfileAction","ToAnimatedAction","VideoCodecAction","audioFrequency","freq","audioCodec","codec","bitRate","fps","from","fpsRange","to","keyframeInterval","interval","streamingProfile","profile","toAnimated","animatedFormat","videoCodec","videoCodecType","Transcode"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/transcode.js"],"sourcesContent":["import BitRateAction from \"./transcode/BitRateAction.js\";\nimport AudioCodecAction from \"./transcode/AudioCodecAction.js\";\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction.js\";\nimport FPSAction from \"./transcode/FPSAction.js\";\nimport FPSRangeAction from \"./transcode/FPSRangeAction.js\";\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction.js\";\nimport StreamingProfileAction from \"./transcode/StreamingProfile.js\";\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction.js\";\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction.js\";\n/**\n * @description Defines how to transcode a video to another format\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Transcoding video to other formats}\n * @memberOf Actions\n * @namespace Transcode\n * @example\n * // See examples under each method\n */\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio sample frequency.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio frequency control}\n * @param {AudioFrequencyType|string|number} freq The audio frequency.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {FREQ11025} from '@cloudinary/url-gen/qualifiers/audioFrequency'\n * import {audioFrequency} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode(audioFrequency(FREQ11025()))\n * @return {Actions.Transcode.AudioFrequencyAction}\n *\n */\nfunction audioFrequency(freq) {\n    return new AudioFrequencyAction(freq);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio codec or removes the audio channel.\n * @param {AudioCodecType | string} codec The audio codec or \"none\".\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {aac} from '@cloudinary/url-gen/qualifiers/audioCodec'\n * import {audioCodec} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( audioCodec( aac() ) );\n * @return {Actions.Transcode.AudioCodecAction}\n */\nfunction audioCodec(codec) {\n    return new AudioCodecAction(codec);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video bitrate.\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\n *\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {bitRate} from '@cloudinary/url-gen/actions/transcode'\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( bitRate(500).constant() );\n * @return {Actions.Transcode.BitRateAction}\n */\nfunction bitRate(bitRate) {\n    return new BitRateAction(bitRate);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @param {number} from frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fps} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fps(15) );\n * @return {Actions.Transcode.FPSAction}\n */\nfunction fps(from) {\n    return new FPSAction(from);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\n * delivered with an expected FPS level (helps with sync to audio).\n * @param {number} from frame rate\n * @param {number} to frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fpsRange} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fpsRange( 20, 25 ) );\n * @return {Actions.Transcode.FPSRangeAction}\n */\nfunction fpsRange(from, to) {\n    return new FPSRangeAction(from, to);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the keyframe interval of the delivered video.\n * @param {number | string} interval The keyframe interval in seconds.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {keyframeInterval} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( keyframeInterval( 0.5 ) );\n * @return {Actions.Transcode.KeyframeIntervalsAction}\n */\nfunction keyframeInterval(interval) {\n    return new KeyframeIntervalsAction(interval);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\n * profiles or to create new custom profiles.\n * @param {string} profile The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {fullHd} from \"@cloudinary/url-gen/qualifiers/streamingProfile\";\n * import {streamingProfile} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( streamingProfile( fullHd() ) );\n * @return {Actions.Transcode.StreamingProfileAction}\n */\nfunction streamingProfile(profile) {\n    return new StreamingProfileAction(profile);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Converts a video to animated image.\n * @param {string | AnimatedFormatType} animatedFormat The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {gif} from '@cloudinary/url-gen/qualifiers/animatedFormat'\n * import {toAnimated} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( toAnimated( gif() ) );\n * @return {Actions.Transcode.ToAnimatedAction}\n */\nfunction toAnimated(animatedFormat = '') {\n    return new ToAnimatedAction(animatedFormat);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video codec.\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {vp9} from '@cloudinary/url-gen/qualifiers/videoCodec'\n * import {videoCodec} from '@cloudinary/url-gen/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( videoCodec( vp9() ) );\n * @return {Actions.Transcode.VideoCodecAction}\n */\nfunction videoCodec(videoCodecType) {\n    return new VideoCodecAction(videoCodecType);\n}\nconst Transcode = { bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,8BAA8B;AACxD,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,oBAAoB,MAAM,qCAAqC;AACtE,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,uBAAuB,MAAM,wCAAwC;AAC5E,OAAOC,sBAAsB,MAAM,iCAAiC;AACpE,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,IAAI,EAAE;EAC1B,OAAO,IAAIR,oBAAoB,CAACQ,IAAI,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAACC,KAAK,EAAE;EACvB,OAAO,IAAIX,gBAAgB,CAACW,KAAK,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACA,OAAO,EAAE;EACtB,OAAO,IAAIb,aAAa,CAACa,OAAO,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACC,IAAI,EAAE;EACf,OAAO,IAAIZ,SAAS,CAACY,IAAI,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACD,IAAI,EAAEE,EAAE,EAAE;EACxB,OAAO,IAAIb,cAAc,CAACW,IAAI,EAAEE,EAAE,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,QAAQ,EAAE;EAChC,OAAO,IAAId,uBAAuB,CAACc,QAAQ,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,OAAO,EAAE;EAC/B,OAAO,IAAIf,sBAAsB,CAACe,OAAO,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,GAAsB;EAAA,IAArBC,cAAc,uEAAG,EAAE;EACnC,OAAO,IAAIhB,gBAAgB,CAACgB,cAAc,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAACC,cAAc,EAAE;EAChC,OAAO,IAAIjB,gBAAgB,CAACiB,cAAc,CAAC;AAC/C;AACA,MAAMC,SAAS,GAAG;EAAEb,OAAO;EAAEF,UAAU;EAAEF,cAAc;EAAEK,GAAG;EAAEE,QAAQ;EAAEE,gBAAgB;EAAEE,gBAAgB;EAAEE,UAAU;EAAEE;AAAW,CAAC;AACpI,SAASE,SAAS,EAAEb,OAAO,EAAEF,UAAU,EAAEF,cAAc,EAAEK,GAAG,EAAEE,QAAQ,EAAEE,gBAAgB,EAAEE,gBAAgB,EAAEE,UAAU,EAAEE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}