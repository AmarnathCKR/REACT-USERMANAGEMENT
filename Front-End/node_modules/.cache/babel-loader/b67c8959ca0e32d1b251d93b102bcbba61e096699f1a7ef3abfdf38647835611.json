{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n  /**\n   * @description Adds a border of the specified type around an image or video.\n   * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n   * @param {string} color The color of the border.\n   * @param {number} borderWidth The width in pixels.\n   */\n  constructor(borderType, color, borderWidth) {\n    super();\n    this.borderType = borderType;\n    this.borderColor = prepareColor(color);\n    this.borderWidth = borderWidth;\n  }\n  /**\n   * @description Sets the width of the border\n   * @param {number | string} borderWidth The width in pixels.\n   */\n  width(borderWidth) {\n    this.borderWidth = borderWidth;\n    return this;\n  }\n  /**\n   * @description Sets the color of the border.\n   * @param {string} borderColor The color of the border.\n   */\n  color(borderColor) {\n    this.borderColor = prepareColor(borderColor);\n    return this;\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param {RoundCornersAction} roundCorners\n   * @return {this}\n   */\n  roundCorners(roundCorners) {\n    this._roundCorners = roundCorners;\n    return this;\n  }\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n    this.addQualifier(new Qualifier('bo', qualifierValue));\n    if (this._roundCorners) {\n      this.addQualifier(this._roundCorners.qualifiers.get('r'));\n    }\n  }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n  return new BorderAction('solid', color, width);\n}\nconst Border = {\n  solid\n};\nexport { BorderAction, Border, solid };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","prepareColor","BorderAction","constructor","borderType","color","borderWidth","borderColor","width","roundCorners","_roundCorners","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","qualifiers","get","solid","Border"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/border.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n    /**\n     * @description Adds a border of the specified type around an image or video.\n     * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n     * @param {string} color The color of the border.\n     * @param {number} borderWidth The width in pixels.\n     */\n    constructor(borderType, color, borderWidth) {\n        super();\n        this.borderType = borderType;\n        this.borderColor = prepareColor(color);\n        this.borderWidth = borderWidth;\n    }\n    /**\n     * @description Sets the width of the border\n     * @param {number | string} borderWidth The width in pixels.\n     */\n    width(borderWidth) {\n        this.borderWidth = borderWidth;\n        return this;\n    }\n    /**\n     * @description Sets the color of the border.\n     * @param {string} borderColor The color of the border.\n     */\n    color(borderColor) {\n        this.borderColor = prepareColor(borderColor);\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param {RoundCornersAction} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this._roundCorners = roundCorners;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n        this.addQualifier(new Qualifier('bo', qualifierValue));\n        if (this._roundCorners) {\n            this.addQualifier(this._roundCorners.qualifiers.get('r'));\n        }\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n    return new BorderAction('solid', color, width);\n}\nconst Border = {\n    solid\n};\nexport { BorderAction, Border, solid };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,YAAY,QAAQ,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASJ,MAAM,CAAC;EAC9B;AACJ;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACC,UAAU,EAAEC,KAAK,EAAEC,WAAW,EAAE;IACxC,KAAK,EAAE;IACP,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,WAAW,GAAGN,YAAY,CAACI,KAAK,CAAC;IACtC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;AACA;EACIE,KAAK,CAACF,WAAW,EAAE;IACf,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACID,KAAK,CAACE,WAAW,EAAE;IACf,IAAI,CAACA,WAAW,GAAGN,YAAY,CAACM,WAAW,CAAC;IAC5C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,YAAY,CAACA,YAAY,EAAE;IACvB,IAAI,CAACC,aAAa,GAAGD,YAAY;IACjC,OAAO,IAAI;EACf;EACAE,iBAAiB,GAAG;IAChB,MAAMC,cAAc,GAAG,IAAIb,cAAc,CAAC,CAAE,GAAE,IAAI,CAACO,WAAY,IAAG,EAAE,IAAI,CAACF,UAAU,EAAG,GAAE,IAAI,CAACG,WAAY,EAAC,CAAC,CAAC,CAACM,YAAY,CAAC,GAAG,CAAC;IAC9H,IAAI,CAACC,YAAY,CAAC,IAAId,SAAS,CAAC,IAAI,EAAEY,cAAc,CAAC,CAAC;IACtD,IAAI,IAAI,CAACF,aAAa,EAAE;MACpB,IAAI,CAACI,YAAY,CAAC,IAAI,CAACJ,aAAa,CAACK,UAAU,CAACC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7D;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACT,KAAK,EAAEH,KAAK,EAAE;EACzB,OAAO,IAAIH,YAAY,CAAC,OAAO,EAAEG,KAAK,EAAEG,KAAK,CAAC;AAClD;AACA,MAAMU,MAAM,GAAG;EACXD;AACJ,CAAC;AACD,SAASf,YAAY,EAAEgB,MAAM,EAAED,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}