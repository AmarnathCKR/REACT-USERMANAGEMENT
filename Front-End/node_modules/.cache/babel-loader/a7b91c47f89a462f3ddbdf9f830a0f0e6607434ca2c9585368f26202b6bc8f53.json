{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n  constructor(remoteURL) {\n    super();\n    this._qualifierModel = {\n      sourceType: 'fetch',\n      url: remoteURL\n    };\n    this._remoteURL = remoteURL;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  getOpenSourceString(layerType) {\n    if (this._format) {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n    } else {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n    }\n  }\n  /**\n   * @description\n   * Apply a format for the image source of the layer\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n   * @returns {this}\n   */\n  format(format) {\n    this._qualifierModel.format = format.toString();\n    this._format = format;\n    return this;\n  }\n  static fromJson(qualifierModel, transformationFromJson) {\n    const {\n      url,\n      transformation,\n      format\n    } = qualifierModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(url);\n    if (transformation) {\n      result.transformation(transformationFromJson(transformation));\n    }\n    if (format) {\n      result.format(new FormatQualifier(format));\n    }\n    return result;\n  }\n}\nexport { FetchSource };","map":{"version":3,"names":["BaseSource","FormatQualifier","base64Encode","FetchSource","constructor","remoteURL","_qualifierModel","sourceType","url","_remoteURL","getOpenSourceString","layerType","_format","toString","format","fromJson","qualifierModel","transformationFromJson","transformation","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/FetchSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._qualifierModel = {\n            sourceType: 'fetch',\n            url: remoteURL\n        };\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._qualifierModel.format = format.toString();\n        this._format = format;\n        return this;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { url, transformation, format } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(url);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        if (format) {\n            result.format(new FormatQualifier(format));\n        }\n        return result;\n    }\n}\nexport { FetchSource };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,YAAY,QAAQ,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASH,UAAU,CAAC;EACjCI,WAAW,CAACC,SAAS,EAAE;IACnB,KAAK,EAAE;IACP,IAAI,CAACC,eAAe,GAAG;MACnBC,UAAU,EAAE,OAAO;MACnBC,GAAG,EAAEH;IACT,CAAC;IACD,IAAI,CAACI,UAAU,GAAGJ,SAAS;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,mBAAmB,CAACC,SAAS,EAAE;IAC3B,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,OAAQ,GAAED,SAAU,UAAST,YAAY,CAAC,IAAI,CAACO,UAAU,CAAE,IAAG,IAAI,CAACG,OAAO,CAACC,QAAQ,EAAG,EAAC;IAC3F,CAAC,MACI;MACD,OAAQ,GAAEF,SAAU,UAAST,YAAY,CAAC,IAAI,CAACO,UAAU,CAAE,EAAC;IAChE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,MAAM,CAACA,MAAM,EAAE;IACX,IAAI,CAACR,eAAe,CAACQ,MAAM,GAAGA,MAAM,CAACD,QAAQ,EAAE;IAC/C,IAAI,CAACD,OAAO,GAAGE,MAAM;IACrB,OAAO,IAAI;EACf;EACA,OAAOC,QAAQ,CAACC,cAAc,EAAEC,sBAAsB,EAAE;IACpD,MAAM;MAAET,GAAG;MAAEU,cAAc;MAAEJ;IAAO,CAAC,GAAGE,cAAc;IACtD;IACA;IACA,MAAMG,MAAM,GAAG,IAAI,IAAI,CAACX,GAAG,CAAC;IAC5B,IAAIU,cAAc,EAAE;MAChBC,MAAM,CAACD,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;IACjE;IACA,IAAIJ,MAAM,EAAE;MACRK,MAAM,CAACL,MAAM,CAAC,IAAIb,eAAe,CAACa,MAAM,CAAC,CAAC;IAC9C;IACA,OAAOK,MAAM;EACjB;AACJ;AACA,SAAShB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}