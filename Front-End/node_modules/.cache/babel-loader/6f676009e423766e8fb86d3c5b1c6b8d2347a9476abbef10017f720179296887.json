{"ast":null,"code":"let fs = require('fs');\nlet path = require('path');\nlet sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions() {\n  let useSDKVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  let useNodeVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n  let pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8');\n\n  // allow to pass a custom SDKVersion\n  let sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  let techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode\n  };\n}\nmodule.exports = getSDKVersions;","map":{"version":3,"names":["fs","require","path","sdkCode","getSDKVersions","useSDKVersion","useNodeVersion","pkgJSONFile","readFileSync","join","__dirname","sdkSemver","JSON","parse","version","techVersion","process","versions","node","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/utils/encoding/sdkAnalytics/getSDKVersions.js"],"sourcesContent":["let fs = require('fs');\nlet path = require('path');\nlet sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  let pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8');\n\n  // allow to pass a custom SDKVersion\n  let sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  let techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode\n  };\n}\n\nmodule.exports = getSDKVersions;\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,OAAO,GAAG,GAAG,CAAC,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,GAAwD;EAAA,IAAvDC,aAAa,uEAAG,SAAS;EAAA,IAAEC,cAAc,uEAAG,SAAS;EAC3E,IAAIC,WAAW,GAAGP,EAAE,CAACQ,YAAY,CAACN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,0BAA0B,CAAC,EAAE,OAAO,CAAC;;EAE5F;EACA,IAAIC,SAAS,GAAGN,aAAa,KAAK,SAAS,GAAGO,IAAI,CAACC,KAAK,CAACN,WAAW,CAAC,CAACO,OAAO,GAAGT,aAAa;;EAE7F;EACA,IAAIU,WAAW,GAAGT,cAAc,KAAK,SAAS,GAAGU,OAAO,CAACC,QAAQ,CAACC,IAAI,GAAGZ,cAAc;EAEvF,OAAO;IACLK,SAAS;IACTI,WAAW;IACXZ;EACF,CAAC;AACH;AAEAgB,MAAM,CAACC,OAAO,GAAGhB,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}