{"ast":null,"code":"// IEEE754 conversions based on https://github.com/feross/ieee754\nvar $Array = Array;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar pack = function (number, mantissaLength, bytes) {\n  var buffer = $Array(bytes);\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n  var index = 0;\n  var exponent, mantissa, c;\n  number = abs(number);\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (number != number || number === Infinity) {\n    // eslint-disable-next-line no-self-compare -- NaN check\n    mantissa = number != number ? 1 : 0;\n    exponent = eMax;\n  } else {\n    exponent = floor(log(number) / LN2);\n    c = pow(2, -exponent);\n    if (number * c < 1) {\n      exponent--;\n      c *= 2;\n    }\n    if (exponent + eBias >= 1) {\n      number += rt / c;\n    } else {\n      number += rt * pow(2, 1 - eBias);\n    }\n    if (number * c >= 2) {\n      exponent++;\n      c /= 2;\n    }\n    if (exponent + eBias >= eMax) {\n      mantissa = 0;\n      exponent = eMax;\n    } else if (exponent + eBias >= 1) {\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\n      exponent = exponent + eBias;\n    } else {\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n      exponent = 0;\n    }\n  }\n  while (mantissaLength >= 8) {\n    buffer[index++] = mantissa & 255;\n    mantissa /= 256;\n    mantissaLength -= 8;\n  }\n  exponent = exponent << mantissaLength | mantissa;\n  exponentLength += mantissaLength;\n  while (exponentLength > 0) {\n    buffer[index++] = exponent & 255;\n    exponent /= 256;\n    exponentLength -= 8;\n  }\n  buffer[--index] |= sign * 128;\n  return buffer;\n};\nvar unpack = function (buffer, mantissaLength) {\n  var bytes = buffer.length;\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var nBits = exponentLength - 7;\n  var index = bytes - 1;\n  var sign = buffer[index--];\n  var exponent = sign & 127;\n  var mantissa;\n  sign >>= 7;\n  while (nBits > 0) {\n    exponent = exponent * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  mantissa = exponent & (1 << -nBits) - 1;\n  exponent >>= -nBits;\n  nBits += mantissaLength;\n  while (nBits > 0) {\n    mantissa = mantissa * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  if (exponent === 0) {\n    exponent = 1 - eBias;\n  } else if (exponent === eMax) {\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\n  } else {\n    mantissa = mantissa + pow(2, mantissaLength);\n    exponent = exponent - eBias;\n  }\n  return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n};\nmodule.exports = {\n  pack: pack,\n  unpack: unpack\n};","map":{"version":3,"names":["$Array","Array","abs","Math","pow","floor","log","LN2","pack","number","mantissaLength","bytes","buffer","exponentLength","eMax","eBias","rt","sign","index","exponent","mantissa","c","Infinity","unpack","length","nBits","NaN","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/internals/ieee754.js"],"sourcesContent":["// IEEE754 conversions based on https://github.com/feross/ieee754\nvar $Array = Array;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nvar pack = function (number, mantissaLength, bytes) {\n  var buffer = $Array(bytes);\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n  var index = 0;\n  var exponent, mantissa, c;\n  number = abs(number);\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (number != number || number === Infinity) {\n    // eslint-disable-next-line no-self-compare -- NaN check\n    mantissa = number != number ? 1 : 0;\n    exponent = eMax;\n  } else {\n    exponent = floor(log(number) / LN2);\n    c = pow(2, -exponent);\n    if (number * c < 1) {\n      exponent--;\n      c *= 2;\n    }\n    if (exponent + eBias >= 1) {\n      number += rt / c;\n    } else {\n      number += rt * pow(2, 1 - eBias);\n    }\n    if (number * c >= 2) {\n      exponent++;\n      c /= 2;\n    }\n    if (exponent + eBias >= eMax) {\n      mantissa = 0;\n      exponent = eMax;\n    } else if (exponent + eBias >= 1) {\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\n      exponent = exponent + eBias;\n    } else {\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n      exponent = 0;\n    }\n  }\n  while (mantissaLength >= 8) {\n    buffer[index++] = mantissa & 255;\n    mantissa /= 256;\n    mantissaLength -= 8;\n  }\n  exponent = exponent << mantissaLength | mantissa;\n  exponentLength += mantissaLength;\n  while (exponentLength > 0) {\n    buffer[index++] = exponent & 255;\n    exponent /= 256;\n    exponentLength -= 8;\n  }\n  buffer[--index] |= sign * 128;\n  return buffer;\n};\n\nvar unpack = function (buffer, mantissaLength) {\n  var bytes = buffer.length;\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var nBits = exponentLength - 7;\n  var index = bytes - 1;\n  var sign = buffer[index--];\n  var exponent = sign & 127;\n  var mantissa;\n  sign >>= 7;\n  while (nBits > 0) {\n    exponent = exponent * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  mantissa = exponent & (1 << -nBits) - 1;\n  exponent >>= -nBits;\n  nBits += mantissaLength;\n  while (nBits > 0) {\n    mantissa = mantissa * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  if (exponent === 0) {\n    exponent = 1 - eBias;\n  } else if (exponent === eMax) {\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\n  } else {\n    mantissa = mantissa + pow(2, mantissaLength);\n    exponent = exponent - eBias;\n  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n};\n\nmodule.exports = {\n  pack: pack,\n  unpack: unpack\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}