{"ast":null,"code":"/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n  return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\nexport const camelCase = function (source) {\n  let words = source.match(reWords);\n  words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n  words[0] = words[0].toLocaleLowerCase();\n  return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\nexport var convertKeys = function (source, converter) {\n  var result, value;\n  result = {};\n  for (let key in source) {\n    value = source[key];\n    if (converter) {\n      key = converter(key);\n    }\n    if (!isEmpty(key)) {\n      // @ts-ignore\n      result[key] = value;\n    }\n  }\n  return result;\n};\nexport var reWords = function () {\n  var lower, upper;\n  upper = '[A-Z]';\n  lower = '[a-z]+';\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}();\nexport function identity(x) {\n  return x;\n}\nexport function contains(a, obj) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function difference(arr1, arr2) {\n  return arr1.filter(x => !arr2.includes(x));\n}","map":{"version":3,"names":["isEmpty","withCamelCaseKeys","source","convertKeys","camelCase","words","match","reWords","map","word","charAt","toLocaleUpperCase","slice","toLocaleLowerCase","join","converter","result","value","key","lower","upper","RegExp","identity","x","contains","a","obj","i","length","difference","arr1","arr2","filter","includes"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js"],"sourcesContent":["/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n    return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\nexport const camelCase = function (source) {\n    let words = source.match(reWords);\n    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n    words[0] = words[0].toLocaleLowerCase();\n    return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\nexport var convertKeys = function (source, converter) {\n    var result, value;\n    result = {};\n    for (let key in source) {\n        value = source[key];\n        if (converter) {\n            key = converter(key);\n        }\n        if (!isEmpty(key)) {\n            // @ts-ignore\n            result[key] = value;\n        }\n    }\n    return result;\n};\nexport var reWords = (function () {\n    var lower, upper;\n    upper = '[A-Z]';\n    lower = '[a-z]+';\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n})();\nexport function identity(x) {\n    return x;\n}\nexport function contains(a, obj) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function difference(arr1, arr2) {\n    return arr1.filter(x => !arr2.includes(x));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,OAAO,MAAMC,iBAAiB,GAAG,UAAUC,MAAM,EAAE;EAC/C,OAAOC,WAAW,CAACD,MAAM,EAAEE,SAAS,CAAC;AACzC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,SAAS,GAAG,UAAUF,MAAM,EAAE;EACvC,IAAIG,KAAK,GAAGH,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC;EACjCF,KAAK,GAAGA,KAAK,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,iBAAiB,EAAE,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,iBAAiB,EAAE,CAAC;EACjGR,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACQ,iBAAiB,EAAE;EACvC,OAAOR,KAAK,CAACS,IAAI,CAAC,EAAE,CAAC;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIX,WAAW,GAAG,UAAUD,MAAM,EAAEa,SAAS,EAAE;EAClD,IAAIC,MAAM,EAAEC,KAAK;EACjBD,MAAM,GAAG,CAAC,CAAC;EACX,KAAK,IAAIE,GAAG,IAAIhB,MAAM,EAAE;IACpBe,KAAK,GAAGf,MAAM,CAACgB,GAAG,CAAC;IACnB,IAAIH,SAAS,EAAE;MACXG,GAAG,GAAGH,SAAS,CAACG,GAAG,CAAC;IACxB;IACA,IAAI,CAAClB,OAAO,CAACkB,GAAG,CAAC,EAAE;MACf;MACAF,MAAM,CAACE,GAAG,CAAC,GAAGD,KAAK;IACvB;EACJ;EACA,OAAOD,MAAM;AACjB,CAAC;AACD,OAAO,IAAIT,OAAO,GAAI,YAAY;EAC9B,IAAIY,KAAK,EAAEC,KAAK;EAChBA,KAAK,GAAG,OAAO;EACfD,KAAK,GAAG,QAAQ;EAChB,OAAOE,MAAM,CAACD,KAAK,GAAG,MAAM,GAAGA,KAAK,GAAGD,KAAK,GAAG,IAAI,GAAGC,KAAK,GAAG,GAAG,GAAGD,KAAK,GAAG,GAAG,GAAGC,KAAK,GAAG,UAAU,EAAE,GAAG,CAAC;AAC9G,CAAC,EAAG;AACJ,OAAO,SAASE,QAAQ,CAACC,CAAC,EAAE;EACxB,OAAOA,CAAC;AACZ;AACA,OAAO,SAASC,QAAQ,CAACC,CAAC,EAAEC,GAAG,EAAE;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/B,IAAIF,CAAC,CAACE,CAAC,CAAC,KAAKD,GAAG,EAAE;MACd,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASG,UAAU,CAACC,IAAI,EAAEC,IAAI,EAAE;EACnC,OAAOD,IAAI,CAACE,MAAM,CAACT,CAAC,IAAI,CAACQ,IAAI,CAACE,QAAQ,CAACV,CAAC,CAAC,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}