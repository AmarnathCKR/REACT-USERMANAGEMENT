{"ast":null,"code":"/**\n * Rotates or flips an image or video by the specified number of degrees, or automatically (images only) according to its orientation or available metadata.\n * @memberOf Actions\n * @namespace Rotate\n *\n * @example\n * <caption>Rotate by mode</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {mode, byAngle} from \"@cloudinary/url-gen/actions/rotate\";\n * import {autoLeft} from \"@cloudinary/url-gen/qualifiers/rotationMode\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * // Rotate by mode\n * image.rotate(mode(autoLeft());\n *\n * // Rotate by angle\n * image.rotate(byAngle(90));\n *\n * image.toString();\n */\nimport RotateAction from \"./rotate/RotateAction.js\";\n/**\n * @summary action\n * @description Rotate an image by using a rotationMode\n * @param {RotationModeType|string} rotationMode\n * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n * possible values\n * @memberOf Actions.Rotate\n * @return {Actions.Rotate.RotateAction}\n */\nfunction mode(rotationMode) {\n  return new RotateAction().mode(rotationMode);\n}\n/**\n * @summary action\n * @description Rotate an image by the given degrees.\n * @param {number} angle Given degrees. (Range: 0 to 360, Default: 0).\n * @return {Actions.Rotate.RotateAction}\n * @memberOf Actions.Rotate\n */\nfunction byAngle(angle) {\n  return new RotateAction(angle);\n}\nconst Rotate = {\n  byAngle,\n  mode\n};\nexport { Rotate, byAngle, mode };","map":{"version":3,"names":["RotateAction","mode","rotationMode","byAngle","angle","Rotate"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/rotate.js"],"sourcesContent":["/**\n * Rotates or flips an image or video by the specified number of degrees, or automatically (images only) according to its orientation or available metadata.\n * @memberOf Actions\n * @namespace Rotate\n *\n * @example\n * <caption>Rotate by mode</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {mode, byAngle} from \"@cloudinary/url-gen/actions/rotate\";\n * import {autoLeft} from \"@cloudinary/url-gen/qualifiers/rotationMode\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * // Rotate by mode\n * image.rotate(mode(autoLeft());\n *\n * // Rotate by angle\n * image.rotate(byAngle(90));\n *\n * image.toString();\n */\nimport RotateAction from \"./rotate/RotateAction.js\";\n/**\n * @summary action\n * @description Rotate an image by using a rotationMode\n * @param {RotationModeType|string} rotationMode\n * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n * possible values\n * @memberOf Actions.Rotate\n * @return {Actions.Rotate.RotateAction}\n */\nfunction mode(rotationMode) {\n    return new RotateAction().mode(rotationMode);\n}\n/**\n * @summary action\n * @description Rotate an image by the given degrees.\n * @param {number} angle Given degrees. (Range: 0 to 360, Default: 0).\n * @return {Actions.Rotate.RotateAction}\n * @memberOf Actions.Rotate\n */\nfunction byAngle(angle) {\n    return new RotateAction(angle);\n}\nconst Rotate = { byAngle, mode };\nexport { Rotate, byAngle, mode };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAY,MAAM,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAI,CAACC,YAAY,EAAE;EACxB,OAAO,IAAIF,YAAY,EAAE,CAACC,IAAI,CAACC,YAAY,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACC,KAAK,EAAE;EACpB,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAAC;AAClC;AACA,MAAMC,MAAM,GAAG;EAAEF,OAAO;EAAEF;AAAK,CAAC;AAChC,SAASI,MAAM,EAAEF,OAAO,EAAEF,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}