{"ast":null,"code":"import { snakeCase } from \"../utils/snakeCase.js\";\nclass Layer {\n  /**\n   * Layer\n   * @constructor Layer\n   * @param {Object} options - layer parameters\n   */\n  constructor(options) {\n    this.options = {};\n    if (options != null) {\n      [\"resourceType\", \"type\", \"publicId\", \"format\"].forEach(key => {\n        var ref;\n        // @ts-ignore\n        return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n      });\n    }\n  }\n  resourceType(value) {\n    this.options.resourceType = value;\n    return this;\n  }\n  type(value) {\n    this.options.type = value;\n    return this;\n  }\n  publicId(value) {\n    this.options.publicId = value;\n    return this;\n  }\n  /**\n   * Get the public ID, formatted for layer parameter\n   * @function Layer#getPublicId\n   * @return {String} public ID\n   */\n  getPublicId() {\n    var ref;\n    return (ref = this.options.publicId) != null ? ref.replace(/\\//g, \":\") : void 0;\n  }\n  /**\n   * Get the public ID, with format if present\n   * @function Layer#getFullPublicId\n   * @return {String} public ID\n   */\n  getFullPublicId() {\n    if (this.options.format != null) {\n      return this.getPublicId() + \".\" + this.options.format;\n    } else {\n      return this.getPublicId();\n    }\n  }\n  format(value) {\n    this.options.format = value;\n    return this;\n  }\n  /**\n   * generate the string representation of the layer\n   * @function Layer#toString\n   */\n  toString() {\n    let components = [];\n    if (this.options.publicId == null) {\n      throw \"Must supply publicId\";\n    }\n    if (!(this.options.resourceType === \"image\")) {\n      components.push(this.options.resourceType);\n    }\n    if (!(this.options.type === \"upload\")) {\n      components.push(this.options.type);\n    }\n    components.push(this.getFullPublicId());\n    return components.filter(x => !!x).join(\":\");\n  }\n  clone() {\n    return new Layer(this.options);\n  }\n}\nexport default Layer;","map":{"version":3,"names":["snakeCase","Layer","constructor","options","forEach","key","ref","resourceType","value","type","publicId","getPublicId","replace","getFullPublicId","format","toString","components","push","filter","x","join","clone"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js"],"sourcesContent":["import { snakeCase } from \"../utils/snakeCase.js\";\nclass Layer {\n    /**\n     * Layer\n     * @constructor Layer\n     * @param {Object} options - layer parameters\n     */\n    constructor(options) {\n        this.options = {};\n        if (options != null) {\n            [\"resourceType\", \"type\", \"publicId\", \"format\"].forEach((key) => {\n                var ref;\n                // @ts-ignore\n                return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n            });\n        }\n    }\n    resourceType(value) {\n        this.options.resourceType = value;\n        return this;\n    }\n    type(value) {\n        this.options.type = value;\n        return this;\n    }\n    publicId(value) {\n        this.options.publicId = value;\n        return this;\n    }\n    /**\n     * Get the public ID, formatted for layer parameter\n     * @function Layer#getPublicId\n     * @return {String} public ID\n     */\n    getPublicId() {\n        var ref;\n        return (ref = this.options.publicId) != null ? ref.replace(/\\//g, \":\") : void 0;\n    }\n    /**\n     * Get the public ID, with format if present\n     * @function Layer#getFullPublicId\n     * @return {String} public ID\n     */\n    getFullPublicId() {\n        if (this.options.format != null) {\n            return this.getPublicId() + \".\" + this.options.format;\n        }\n        else {\n            return this.getPublicId();\n        }\n    }\n    format(value) {\n        this.options.format = value;\n        return this;\n    }\n    /**\n     * generate the string representation of the layer\n     * @function Layer#toString\n     */\n    toString() {\n        let components = [];\n        if (this.options.publicId == null) {\n            throw \"Must supply publicId\";\n        }\n        if (!(this.options.resourceType === \"image\")) {\n            components.push(this.options.resourceType);\n        }\n        if (!(this.options.type === \"upload\")) {\n            components.push(this.options.type);\n        }\n        components.push(this.getFullPublicId());\n        return components.filter(x => !!x).join(\":\");\n    }\n    clone() {\n        return new Layer(this.options);\n    }\n}\nexport default Layer;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,MAAMC,KAAK,CAAC;EACR;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAG,CAAC,CAAC;IACjB,IAAIA,OAAO,IAAI,IAAI,EAAE;MACjB,CAAC,cAAc,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAK;QAC5D,IAAIC,GAAG;QACP;QACA,OAAO,IAAI,CAACH,OAAO,CAACE,GAAG,CAAC,GAAG,CAACC,GAAG,GAAGH,OAAO,CAACE,GAAG,CAAC,KAAK,IAAI,GAAGC,GAAG,GAAGH,OAAO,CAACH,SAAS,CAACK,GAAG,CAAC,CAAC;MAC3F,CAAC,CAAC;IACN;EACJ;EACAE,YAAY,CAACC,KAAK,EAAE;IAChB,IAAI,CAACL,OAAO,CAACI,YAAY,GAAGC,KAAK;IACjC,OAAO,IAAI;EACf;EACAC,IAAI,CAACD,KAAK,EAAE;IACR,IAAI,CAACL,OAAO,CAACM,IAAI,GAAGD,KAAK;IACzB,OAAO,IAAI;EACf;EACAE,QAAQ,CAACF,KAAK,EAAE;IACZ,IAAI,CAACL,OAAO,CAACO,QAAQ,GAAGF,KAAK;IAC7B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIG,WAAW,GAAG;IACV,IAAIL,GAAG;IACP,OAAO,CAACA,GAAG,GAAG,IAAI,CAACH,OAAO,CAACO,QAAQ,KAAK,IAAI,GAAGJ,GAAG,CAACM,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;EACnF;EACA;AACJ;AACA;AACA;AACA;EACIC,eAAe,GAAG;IACd,IAAI,IAAI,CAACV,OAAO,CAACW,MAAM,IAAI,IAAI,EAAE;MAC7B,OAAO,IAAI,CAACH,WAAW,EAAE,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,CAACW,MAAM;IACzD,CAAC,MACI;MACD,OAAO,IAAI,CAACH,WAAW,EAAE;IAC7B;EACJ;EACAG,MAAM,CAACN,KAAK,EAAE;IACV,IAAI,CAACL,OAAO,CAACW,MAAM,GAAGN,KAAK;IAC3B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIO,QAAQ,GAAG;IACP,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAI,IAAI,CAACb,OAAO,CAACO,QAAQ,IAAI,IAAI,EAAE;MAC/B,MAAM,sBAAsB;IAChC;IACA,IAAI,EAAE,IAAI,CAACP,OAAO,CAACI,YAAY,KAAK,OAAO,CAAC,EAAE;MAC1CS,UAAU,CAACC,IAAI,CAAC,IAAI,CAACd,OAAO,CAACI,YAAY,CAAC;IAC9C;IACA,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACM,IAAI,KAAK,QAAQ,CAAC,EAAE;MACnCO,UAAU,CAACC,IAAI,CAAC,IAAI,CAACd,OAAO,CAACM,IAAI,CAAC;IACtC;IACAO,UAAU,CAACC,IAAI,CAAC,IAAI,CAACJ,eAAe,EAAE,CAAC;IACvC,OAAOG,UAAU,CAACE,MAAM,CAACC,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAChD;EACAC,KAAK,GAAG;IACJ,OAAO,IAAIpB,KAAK,CAAC,IAAI,CAACE,OAAO,CAAC;EAClC;AACJ;AACA,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}