{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#e_improve|Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {\n      actionType: 'improve'\n    };\n  }\n  /**\n   *\n   * @description The improve mode.\n   * @param {Qualifiers.ImproveMode | string} value\n   */\n  mode(value) {\n    this.modeValue = value;\n    this._actionModel.mode = value;\n    return this;\n  }\n  /**\n   * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n   * @param {number} value\n   */\n  blend(value) {\n    this.blendValue = value;\n    this._actionModel.blend = value;\n    return this;\n  }\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n  static fromJson(actionModel) {\n    const {\n      mode,\n      blend\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this();\n    mode && result.mode(mode);\n    blend && result.blend(blend);\n    return result;\n  }\n}\nexport { ImproveAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ImproveAction","constructor","_actionModel","actionType","mode","value","modeValue","blend","blendValue","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/adjust/ImproveAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#e_improve|Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = { actionType: 'improve' };\n    }\n    /**\n     *\n     * @description The improve mode.\n     * @param {Qualifiers.ImproveMode | string} value\n     */\n    mode(value) {\n        this.modeValue = value;\n        this._actionModel.mode = value;\n        return this;\n    }\n    /**\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n     * @param {number} value\n     */\n    blend(value) {\n        this.blendValue = value;\n        this._actionModel.blend = value;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { mode, blend } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        mode && result.mode(mode);\n        blend && result.blend(blend);\n        return result;\n    }\n}\nexport { ImproveAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASH,MAAM,CAAC;EAC/BI,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,GAAG;MAAEC,UAAU,EAAE;IAAU,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;EACIC,IAAI,CAACC,KAAK,EAAE;IACR,IAAI,CAACC,SAAS,GAAGD,KAAK;IACtB,IAAI,CAACH,YAAY,CAACE,IAAI,GAAGC,KAAK;IAC9B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,KAAK,CAACF,KAAK,EAAE;IACT,IAAI,CAACG,UAAU,GAAGH,KAAK;IACvB,IAAI,CAACH,YAAY,CAACK,KAAK,GAAGF,KAAK;IAC/B,OAAO,IAAI;EACf;EACAI,iBAAiB,GAAG;IAChB,MAAMC,cAAc,GAAG,IAAIZ,cAAc,CAAC,CAAC,SAAS,EAAE,IAAI,CAACQ,SAAS,EAAE,IAAI,CAACE,UAAU,CAAC,CAAC,CAACG,YAAY,CAAC,GAAG,CAAC;IACzG,IAAI,CAACC,YAAY,CAAC,IAAIb,SAAS,CAAC,GAAG,EAAEW,cAAc,CAAC,CAAC;IACrD,OAAO,IAAI;EACf;EACA,OAAOG,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEV,IAAI;MAAEG;IAAM,CAAC,GAAGO,WAAW;IACnC;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,IAAI,EAAE;IACzBX,IAAI,IAAIW,MAAM,CAACX,IAAI,CAACA,IAAI,CAAC;IACzBG,KAAK,IAAIQ,MAAM,CAACR,KAAK,CAACA,KAAK,CAAC;IAC5B,OAAOQ,MAAM;EACjB;AACJ;AACA,SAASf,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}