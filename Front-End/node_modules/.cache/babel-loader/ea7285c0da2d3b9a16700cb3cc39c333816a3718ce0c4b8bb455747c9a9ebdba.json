{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Applies a cartoon effect to an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass CartoonifyEffect extends Action {\n  constructor(effectName, strength) {\n    // We don't pass level in the constructor, we'll build it in the prepareParam\n    super();\n    this._actionModel = {};\n    this.cartoonifyStrength = strength;\n    this.effectName = effectName;\n    this._actionModel.actionType = effectName;\n  }\n  /**\n   * @description Sets the thickness of the lines.\n   * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\n   * @return {this}\n   */\n  lineStrength(lineStrength) {\n    this.cartoonifyStrength = lineStrength;\n    this._actionModel.lineStrength = lineStrength;\n    return this;\n  }\n  /**\n   * @description Achieves a black and white cartoon effect.\n   * @return {this}\n   */\n  blackwhite() {\n    this._actionModel.blackAndWhite = true;\n    this.colorReduction = 'bw';\n    return this;\n  }\n  /**\n   * @description\n   * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\n   * Higher reduction values result in a less realistic look.\n   * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\n   * @return {this}\n   */\n  colorReductionLevel(level) {\n    this._actionModel.colorReductionLevel = level;\n    this.colorReduction = level;\n    return this;\n  }\n  prepareQualifiers() {\n    this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\n    return;\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      lineStrength,\n      blackAndWhite,\n      colorReductionLevel\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(actionType, lineStrength);\n    blackAndWhite && result.blackwhite();\n    colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\n    lineStrength && result.lineStrength(lineStrength);\n    return result;\n  }\n}\nexport { CartoonifyEffect };","map":{"version":3,"names":["Qualifier","QualifierValue","Action","CartoonifyEffect","constructor","effectName","strength","_actionModel","cartoonifyStrength","actionType","lineStrength","blackwhite","blackAndWhite","colorReduction","colorReductionLevel","level","prepareQualifiers","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Cartoonify.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Applies a cartoon effect to an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass CartoonifyEffect extends Action {\n    constructor(effectName, strength) {\n        // We don't pass level in the constructor, we'll build it in the prepareParam\n        super();\n        this._actionModel = {};\n        this.cartoonifyStrength = strength;\n        this.effectName = effectName;\n        this._actionModel.actionType = effectName;\n    }\n    /**\n     * @description Sets the thickness of the lines.\n     * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\n     * @return {this}\n     */\n    lineStrength(lineStrength) {\n        this.cartoonifyStrength = lineStrength;\n        this._actionModel.lineStrength = lineStrength;\n        return this;\n    }\n    /**\n     * @description Achieves a black and white cartoon effect.\n     * @return {this}\n     */\n    blackwhite() {\n        this._actionModel.blackAndWhite = true;\n        this.colorReduction = 'bw';\n        return this;\n    }\n    /**\n     * @description\n     * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\n     * Higher reduction values result in a less realistic look.\n     * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\n     * @return {this}\n     */\n    colorReductionLevel(level) {\n        this._actionModel.colorReductionLevel = level;\n        this.colorReduction = level;\n        return this;\n    }\n    prepareQualifiers() {\n        this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\n        return;\n    }\n    static fromJson(actionModel) {\n        const { actionType, lineStrength, blackAndWhite, colorReductionLevel } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, lineStrength);\n        blackAndWhite && result.blackwhite();\n        colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\n        lineStrength && result.lineStrength(lineStrength);\n        return result;\n    }\n}\nexport { CartoonifyEffect };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,MAAM,QAAQ,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,SAASD,MAAM,CAAC;EAClCE,WAAW,CAACC,UAAU,EAAEC,QAAQ,EAAE;IAC9B;IACA,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,kBAAkB,GAAGF,QAAQ;IAClC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,YAAY,CAACE,UAAU,GAAGJ,UAAU;EAC7C;EACA;AACJ;AACA;AACA;AACA;EACIK,YAAY,CAACA,YAAY,EAAE;IACvB,IAAI,CAACF,kBAAkB,GAAGE,YAAY;IACtC,IAAI,CAACH,YAAY,CAACG,YAAY,GAAGA,YAAY;IAC7C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,UAAU,GAAG;IACT,IAAI,CAACJ,YAAY,CAACK,aAAa,GAAG,IAAI;IACtC,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,mBAAmB,CAACC,KAAK,EAAE;IACvB,IAAI,CAACR,YAAY,CAACO,mBAAmB,GAAGC,KAAK;IAC7C,IAAI,CAACF,cAAc,GAAGE,KAAK;IAC3B,OAAO,IAAI;EACf;EACAC,iBAAiB,GAAG;IAChB,IAAI,CAACC,YAAY,CAAC,IAAIjB,SAAS,CAAC,GAAG,EAAE,IAAIC,cAAc,CAAC,CAAC,IAAI,CAACI,UAAU,EAAE,IAAI,CAACG,kBAAkB,EAAE,IAAI,CAACK,cAAc,CAAC,CAAC,CAAC,CAAC;IAC1H;EACJ;EACA,OAAOK,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEV,UAAU;MAAEC,YAAY;MAAEE,aAAa;MAAEE;IAAoB,CAAC,GAAGK,WAAW;IACpF;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,IAAI,CAACX,UAAU,EAAEC,YAAY,CAAC;IACjDE,aAAa,IAAIQ,MAAM,CAACT,UAAU,EAAE;IACpCG,mBAAmB,IAAIM,MAAM,CAACN,mBAAmB,CAACA,mBAAmB,CAAC;IACtEJ,YAAY,IAAIU,MAAM,CAACV,YAAY,CAACA,YAAY,CAAC;IACjD,OAAOU,MAAM;EACjB;AACJ;AACA,SAASjB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}