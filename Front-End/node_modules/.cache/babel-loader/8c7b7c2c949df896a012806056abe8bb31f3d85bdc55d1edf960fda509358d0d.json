{"ast":null,"code":"import { generateTransformationString } from \"./generateTransformationString.js\";\nimport { finalize_resource_type } from \"./utils/finalizeResourceType.js\";\nimport { finalize_source } from \"./utils/finalize_source.js\";\nimport { unsigned_url_prefix } from \"./utils/unsigned_url_prefix.js\";\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nexport function createCloudinaryLegacyURL(public_id, transformationOptions) {\n  // Path format\n  if (transformationOptions.type === \"fetch\") {\n    if (transformationOptions.fetch_format == null) {\n      transformationOptions.fetch_format = transformationOptions.format;\n    }\n  }\n  let source_to_sign;\n  let type = transformationOptions.type;\n  let resource_type = transformationOptions.resource_type || 'image';\n  let version = transformationOptions.version;\n  const force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;\n  const long_url_signature = !!transformationOptions.long_url_signature;\n  const format = transformationOptions.format;\n  const cloud_name = transformationOptions.cloud_name;\n  if (!cloud_name) {\n    throw \"cloud_name must be provided in the configuration\";\n  }\n  const private_cdn = transformationOptions.private_cdn;\n  const secure_distribution = transformationOptions.secure_distribution;\n  const secure = transformationOptions.secure;\n  const cdn_subdomain = transformationOptions.cdn_subdomain;\n  const secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;\n  const cname = transformationOptions.cname;\n  const shorten = transformationOptions.shorten;\n  const sign_url = transformationOptions.sign_url;\n  const api_secret = transformationOptions.api_secret;\n  const url_suffix = transformationOptions.url_suffix;\n  const use_root_path = transformationOptions.use_root_path;\n  const auth_token = transformationOptions.auth_token;\n  const preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  const original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n  const transformation = generateTransformationString(cloneDeep(transformationOptions)).replace(/([^:])\\/\\//g, '$1/');\n  ;\n  if (sign_url && !auth_token) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (error) {}\n    // No support for Auth Token\n    // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n    // shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n    // signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    // signature = `s--${signature}--`;\n  }\n\n  const prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  const resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(' ', '%20');\n  return resultUrl;\n}","map":{"version":3,"names":["generateTransformationString","finalize_resource_type","finalize_source","unsigned_url_prefix","cloneDeep","createCloudinaryLegacyURL","public_id","transformationOptions","type","fetch_format","format","source_to_sign","resource_type","version","force_version","long_url_signature","cloud_name","private_cdn","secure_distribution","secure","cdn_subdomain","secure_cdn_subdomain","cname","shorten","sign_url","api_secret","url_suffix","use_root_path","auth_token","preloaded","exec","original_source","toString","match","indexOf","transformation","replace","to_sign","filter","part","join","i","decodeURIComponent","error","prefix","resultUrl"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/backwards/createCloudinaryLegacyURL.js"],"sourcesContent":["import { generateTransformationString } from \"./generateTransformationString.js\";\nimport { finalize_resource_type } from \"./utils/finalizeResourceType.js\";\nimport { finalize_source } from \"./utils/finalize_source.js\";\nimport { unsigned_url_prefix } from \"./utils/unsigned_url_prefix.js\";\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nexport function createCloudinaryLegacyURL(public_id, transformationOptions) {\n    // Path format\n    if (transformationOptions.type === \"fetch\") {\n        if (transformationOptions.fetch_format == null) {\n            transformationOptions.fetch_format = transformationOptions.format;\n        }\n    }\n    let source_to_sign;\n    let type = transformationOptions.type;\n    let resource_type = transformationOptions.resource_type || 'image';\n    let version = transformationOptions.version;\n    const force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;\n    const long_url_signature = !!transformationOptions.long_url_signature;\n    const format = transformationOptions.format;\n    const cloud_name = transformationOptions.cloud_name;\n    if (!cloud_name) {\n        throw \"cloud_name must be provided in the configuration\";\n    }\n    const private_cdn = transformationOptions.private_cdn;\n    const secure_distribution = transformationOptions.secure_distribution;\n    const secure = transformationOptions.secure;\n    const cdn_subdomain = transformationOptions.cdn_subdomain;\n    const secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;\n    const cname = transformationOptions.cname;\n    const shorten = transformationOptions.shorten;\n    const sign_url = transformationOptions.sign_url;\n    const api_secret = transformationOptions.api_secret;\n    const url_suffix = transformationOptions.url_suffix;\n    const use_root_path = transformationOptions.use_root_path;\n    const auth_token = transformationOptions.auth_token;\n    const preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n    if (preloaded) {\n        resource_type = preloaded[1];\n        type = preloaded[2];\n        version = preloaded[3];\n        public_id = preloaded[4];\n    }\n    const original_source = public_id;\n    if (public_id == null) {\n        return original_source;\n    }\n    public_id = public_id.toString();\n    if (type === null && public_id.match(/^https?:\\//i)) {\n        return original_source;\n    }\n    [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n    [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n    if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n        version = 1;\n    }\n    if (version != null) {\n        version = `v${version}`;\n    }\n    else {\n        version = null;\n    }\n    const transformation = generateTransformationString(cloneDeep(transformationOptions)).replace(/([^:])\\/\\//g, '$1/');\n    ;\n    if (sign_url && !auth_token) {\n        let to_sign = [transformation, source_to_sign].filter(function (part) {\n            return (part != null) && part !== '';\n        }).join('/');\n        try {\n            for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n                to_sign = decodeURIComponent(to_sign);\n            }\n            // eslint-disable-next-line no-empty\n        }\n        catch (error) {\n        }\n        // No support for Auth Token\n        // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n        // shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n        // signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n        // signature = `s--${signature}--`;\n    }\n    const prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n    const resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {\n        return (part != null) && part !== '';\n    }).join('/').replace(' ', '%20');\n    return resultUrl;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}