{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\nconst CACHE = Symbol.for(\"com.cloudinary.cache\");\nconst CACHE_ADAPTER = Symbol.for(\"com.cloudinary.cacheAdapter\");\nconst {\n  ensurePresenceOf,\n  generate_transformation_string\n} = require('./utils');\n\n/**\n * The adapter used to communicate with the underlying cache storage\n */\nclass CacheAdapter {\n  /**\n   * Get a value from the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @return {*} the value associated with the provided arguments\n   */\n  get(publicId, type, resourceType, transformation, format) {}\n\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @param {*} value\n   */\n  set(publicId, type, resourceType, transformation, format, value) {}\n\n  /**\n   * Delete all values in the cache\n   */\n  flushAll() {}\n}\n/**\n * @class Cache\n * Stores and retrieves values identified by publicId / options pairs\n */\nconst Cache = {\n  /**\n   * The adapter interface. Extend this class to implement a specific adapter.\n   * @type CacheAdapter\n   */\n  CacheAdapter,\n  /**\n   * Set the cache adapter\n   * @param {CacheAdapter} adapter The cache adapter\n   */\n  setAdapter(adapter) {\n    if (this.adapter) {\n      console.warn(\"Overriding existing cache adapter\");\n    }\n    this.adapter = adapter;\n  },\n  /**\n   * Get the adapter the Cache is using\n   * @return {CacheAdapter} the current cache adapter\n   */\n  getAdapter() {\n    return this.adapter;\n  },\n  /**\n   * Get an item from the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @return {*}\n   */\n  get(publicId, options) {\n    if (!this.adapter) {\n      return undefined;\n    }\n    ensurePresenceOf({\n      publicId\n    });\n    let transformation = generate_transformation_string({\n      ...options\n    });\n    return this.adapter.get(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format);\n  },\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @param {*} value\n   * @return {*}\n   */\n  set(publicId, options, value) {\n    if (!this.adapter) {\n      return undefined;\n    }\n    ensurePresenceOf({\n      publicId,\n      value\n    });\n    let transformation = generate_transformation_string({\n      ...options\n    });\n    return this.adapter.set(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format, value);\n  },\n  /**\n   * Clear all items in the cache\n   * @return {*} Returns the value from the adapter's flushAll() method\n   */\n  flushAll() {\n    if (!this.adapter) {\n      return undefined;\n    }\n    return this.adapter.flushAll();\n  }\n};\n\n// Define singleton property\nObject.defineProperty(Cache, \"instance\", {\n  get() {\n    return global[CACHE];\n  }\n});\nObject.defineProperty(Cache, \"adapter\", {\n  /**\n   *\n   * @return {CacheAdapter} The current cache adapter\n   */\n  get() {\n    return global[CACHE_ADAPTER];\n  },\n  /**\n   * Set the cache adapter to be used by Cache\n   * @param {CacheAdapter} adapter Cache adapter\n   */\n  set(adapter) {\n    global[CACHE_ADAPTER] = adapter;\n  }\n});\nObject.freeze(Cache);\n\n// Instantiate the singleton\nlet symbols = Object.getOwnPropertySymbols(global);\nif (symbols.indexOf(CACHE) < 0) {\n  global[CACHE] = Cache;\n}\n\n/**\n * Store key value pairs\n\n */\nmodule.exports = Cache;","map":{"version":3,"names":["CACHE","Symbol","for","CACHE_ADAPTER","ensurePresenceOf","generate_transformation_string","require","CacheAdapter","get","publicId","type","resourceType","transformation","format","set","value","flushAll","Cache","setAdapter","adapter","console","warn","getAdapter","options","undefined","resource_type","Object","defineProperty","global","freeze","symbols","getOwnPropertySymbols","indexOf","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/cache.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n\nconst CACHE = Symbol.for(\"com.cloudinary.cache\");\nconst CACHE_ADAPTER = Symbol.for(\"com.cloudinary.cacheAdapter\");\nconst { ensurePresenceOf, generate_transformation_string } = require('./utils');\n\n/**\n * The adapter used to communicate with the underlying cache storage\n */\nclass CacheAdapter {\n  /**\n   * Get a value from the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @return {*} the value associated with the provided arguments\n   */\n  get(publicId, type, resourceType, transformation, format) {}\n\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @param {*} value\n   */\n  set(publicId, type, resourceType, transformation, format, value) {}\n\n  /**\n   * Delete all values in the cache\n   */\n  flushAll() {}\n}\n/**\n * @class Cache\n * Stores and retrieves values identified by publicId / options pairs\n */\nconst Cache = {\n  /**\n   * The adapter interface. Extend this class to implement a specific adapter.\n   * @type CacheAdapter\n   */\n  CacheAdapter,\n  /**\n   * Set the cache adapter\n   * @param {CacheAdapter} adapter The cache adapter\n   */\n  setAdapter(adapter) {\n    if (this.adapter) {\n      console.warn(\"Overriding existing cache adapter\");\n    }\n    this.adapter = adapter;\n  },\n  /**\n   * Get the adapter the Cache is using\n   * @return {CacheAdapter} the current cache adapter\n   */\n  getAdapter() {\n    return this.adapter;\n  },\n  /**\n   * Get an item from the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @return {*}\n   */\n  get(publicId, options) {\n    if (!this.adapter) { return undefined; }\n    ensurePresenceOf({ publicId });\n    let transformation = generate_transformation_string({ ...options });\n    return this.adapter.get(\n      publicId, options.type || 'upload',\n      options.resource_type || 'image',\n      transformation,\n      options.format\n    );\n  },\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @param {*} value\n   * @return {*}\n   */\n  set(publicId, options, value) {\n    if (!this.adapter) { return undefined; }\n    ensurePresenceOf({ publicId, value });\n    let transformation = generate_transformation_string({ ...options });\n    return this.adapter.set(\n      publicId,\n      options.type || 'upload',\n      options.resource_type || 'image',\n      transformation,\n      options.format,\n      value\n    );\n  },\n  /**\n   * Clear all items in the cache\n   * @return {*} Returns the value from the adapter's flushAll() method\n   */\n  flushAll() {\n    if (!this.adapter) { return undefined; }\n    return this.adapter.flushAll();\n  }\n\n};\n\n// Define singleton property\nObject.defineProperty(Cache, \"instance\", {\n  get() {\n    return global[CACHE];\n  }\n});\nObject.defineProperty(Cache, \"adapter\", {\n  /**\n   *\n   * @return {CacheAdapter} The current cache adapter\n   */\n  get() {\n    return global[CACHE_ADAPTER];\n  },\n  /**\n   * Set the cache adapter to be used by Cache\n   * @param {CacheAdapter} adapter Cache adapter\n   */\n  set(adapter) {\n    global[CACHE_ADAPTER] = adapter;\n  }\n});\nObject.freeze(Cache);\n\n// Instantiate the singleton\nlet symbols = Object.getOwnPropertySymbols(global);\nif (symbols.indexOf(CACHE) < 0) {\n  global[CACHE] = Cache;\n}\n\n/**\n * Store key value pairs\n\n */\nmodule.exports = Cache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}