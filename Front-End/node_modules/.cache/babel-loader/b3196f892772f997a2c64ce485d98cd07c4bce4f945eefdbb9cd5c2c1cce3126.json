{"ast":null,"code":"import { stringPad } from \"./stringPad.js\";\n/**\n * This file maps sequences of 6 bit binary digits to a character in base64.\n * 000000 -> A\n * 110011 -> Z\n * 111111 -> /\n */\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Map = {};\nlet num = 0;\nchars.split('').forEach(char => {\n  let key = num.toString(2);\n  key = stringPad(key, 6, '0');\n  base64Map[key] = char;\n  num++;\n});\n/**\n * Map of [six-bit binary codes] -> [Base64 characters]\n */\nexport { base64Map };","map":{"version":3,"names":["stringPad","chars","base64Map","num","split","forEach","char","key","toString"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/sdkAnalytics/base64Map.js"],"sourcesContent":["import { stringPad } from \"./stringPad.js\";\n/**\n * This file maps sequences of 6 bit binary digits to a character in base64.\n * 000000 -> A\n * 110011 -> Z\n * 111111 -> /\n */\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Map = {};\nlet num = 0;\nchars.split('').forEach((char) => {\n    let key = num.toString(2);\n    key = stringPad(key, 6, '0');\n    base64Map[key] = char;\n    num++;\n});\n/**\n * Map of [six-bit binary codes] -> [Base64 characters]\n */\nexport { base64Map };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,kEAAkE;AAChF,MAAMC,SAAS,GAAG,CAAC,CAAC;AACpB,IAAIC,GAAG,GAAG,CAAC;AACXF,KAAK,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;EAC9B,IAAIC,GAAG,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC,CAAC;EACzBD,GAAG,GAAGP,SAAS,CAACO,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC;EAC5BL,SAAS,CAACK,GAAG,CAAC,GAAGD,IAAI;EACrBH,GAAG,EAAE;AACT,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}