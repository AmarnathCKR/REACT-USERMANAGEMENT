{"ast":null,"code":"import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n  /**\n   * @param {string} fontFamily The font family\n   * @param {number | string} fontSize The font size\n   */\n  constructor(fontFamily, fontSize) {\n    super();\n    if (!fontFamily || !fontSize) {\n      throw `You must provide a fontFamily and fontSize to a TextStyle`;\n    }\n    this._qualifierModel.fontFamily = fontFamily;\n    this._qualifierModel.fontSize = fontSize;\n  }\n  /**\n   * @param {number} spacing The spacing between multiple lines in pixels.\n   */\n  lineSpacing(spacing) {\n    this._qualifierModel.lineSpacing = spacing;\n    return this;\n  }\n  /**\n   * @param spacing The spacing between the letters, in pixels.\n   */\n  letterSpacing(spacing) {\n    this._qualifierModel.letterSpacing = spacing;\n    return this;\n  }\n  /**\n   * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n   * @param {FontAntialiasType|string} antiAlias\n   */\n  fontAntialias(antiAlias) {\n    this._qualifierModel.fontAntialias = antiAlias;\n    return this;\n  }\n  /**\n   * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n   * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n   * @param {string} fontFamilyName\n   */\n  fontFamily(fontFamilyName) {\n    this._qualifierModel.fontFamily = fontFamilyName;\n    return this;\n  }\n  /**\n   * @param {number} fontSize The font size\n   */\n  fontSize(fontSize) {\n    this._qualifierModel.fontSize = fontSize;\n    return this;\n  }\n  /**\n   * @param {FontWeightType|string} fontWeight The font weight\n   */\n  fontWeight(fontWeight) {\n    this._qualifierModel.fontWeight = fontWeight;\n    return this;\n  }\n  /**\n   *\n   * @param {string} fontStyle The font style.\n   */\n  fontStyle(fontStyle) {\n    this._qualifierModel.fontStyle = fontStyle;\n    return this;\n  }\n  /**\n   * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n   */\n  fontHinting(fontHinting) {\n    this._qualifierModel.fontHinting = fontHinting;\n    return this;\n  }\n  /**\n   *\n   * @param {TextDecorationType|string} textDecoration The font decoration type.\n   */\n  textDecoration(textDecoration) {\n    this._qualifierModel.textDecoration = textDecoration;\n    return this;\n  }\n  /**\n   * @param {TextAlignmentType|string} textAlignment The text alignment\n   */\n  textAlignment(textAlignment) {\n    this._qualifierModel.textAlignment = textAlignment;\n    return this;\n  }\n  /**\n   * @description Whether to include an outline stroke. Set the color and weight of the stroke\n   */\n  stroke(textStroke) {\n    if (textStroke) {\n      const strokeStyle = textStroke.split('_');\n      this._qualifierModel.stroke = {\n        width: +strokeStyle[1].replace('px', ''),\n        color: strokeStyle[strokeStyle.length - 1]\n      };\n    } else {\n      this._qualifierModel.stroke = true;\n    }\n    return this;\n  }\n  toString() {\n    const {\n      stroke\n    } = this._qualifierModel;\n    let strokeStr = '';\n    if (stroke) {\n      strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n    }\n    return [`${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`, this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight, this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle, this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration, this._qualifierModel.textAlignment, strokeStr, this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`, this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`, this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`, this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`].filter(a => a).join('_');\n  }\n}\nexport { TextStyle };","map":{"version":3,"names":["normal","normalFontWeight","normalFontStyle","normalTextDecoration","serializeCloudinaryCharacters","QualifierModel","solid","isISolidStrokeModel","TextStyle","constructor","fontFamily","fontSize","_qualifierModel","lineSpacing","spacing","letterSpacing","fontAntialias","antiAlias","fontFamilyName","fontWeight","fontStyle","fontHinting","textDecoration","textAlignment","stroke","textStroke","strokeStyle","split","width","replace","color","length","toString","strokeStr","filter","a","join"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js"],"sourcesContent":["import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n    /**\n     * @param {string} fontFamily The font family\n     * @param {number | string} fontSize The font size\n     */\n    constructor(fontFamily, fontSize) {\n        super();\n        if (!fontFamily || !fontSize) {\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\n        }\n        this._qualifierModel.fontFamily = fontFamily;\n        this._qualifierModel.fontSize = fontSize;\n    }\n    /**\n     * @param {number} spacing The spacing between multiple lines in pixels.\n     */\n    lineSpacing(spacing) {\n        this._qualifierModel.lineSpacing = spacing;\n        return this;\n    }\n    /**\n     * @param spacing The spacing between the letters, in pixels.\n     */\n    letterSpacing(spacing) {\n        this._qualifierModel.letterSpacing = spacing;\n        return this;\n    }\n    /**\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n     * @param {FontAntialiasType|string} antiAlias\n     */\n    fontAntialias(antiAlias) {\n        this._qualifierModel.fontAntialias = antiAlias;\n        return this;\n    }\n    /**\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n     * @param {string} fontFamilyName\n     */\n    fontFamily(fontFamilyName) {\n        this._qualifierModel.fontFamily = fontFamilyName;\n        return this;\n    }\n    /**\n     * @param {number} fontSize The font size\n     */\n    fontSize(fontSize) {\n        this._qualifierModel.fontSize = fontSize;\n        return this;\n    }\n    /**\n     * @param {FontWeightType|string} fontWeight The font weight\n     */\n    fontWeight(fontWeight) {\n        this._qualifierModel.fontWeight = fontWeight;\n        return this;\n    }\n    /**\n     *\n     * @param {string} fontStyle The font style.\n     */\n    fontStyle(fontStyle) {\n        this._qualifierModel.fontStyle = fontStyle;\n        return this;\n    }\n    /**\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n     */\n    fontHinting(fontHinting) {\n        this._qualifierModel.fontHinting = fontHinting;\n        return this;\n    }\n    /**\n     *\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\n     */\n    textDecoration(textDecoration) {\n        this._qualifierModel.textDecoration = textDecoration;\n        return this;\n    }\n    /**\n     * @param {TextAlignmentType|string} textAlignment The text alignment\n     */\n    textAlignment(textAlignment) {\n        this._qualifierModel.textAlignment = textAlignment;\n        return this;\n    }\n    /**\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\n     */\n    stroke(textStroke) {\n        if (textStroke) {\n            const strokeStyle = textStroke.split('_');\n            this._qualifierModel.stroke = {\n                width: +(strokeStyle[1].replace('px', '')),\n                color: strokeStyle[strokeStyle.length - 1]\n            };\n        }\n        else {\n            this._qualifierModel.stroke = true;\n        }\n        return this;\n    }\n    toString() {\n        const { stroke } = this._qualifierModel;\n        let strokeStr = '';\n        if (stroke) {\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n        }\n        return [\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\n            this._qualifierModel.textAlignment,\n            strokeStr,\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\n        ].filter((a) => a).join('_');\n    }\n}\nexport { TextStyle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}