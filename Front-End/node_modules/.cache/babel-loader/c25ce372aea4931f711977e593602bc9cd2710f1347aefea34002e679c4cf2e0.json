{"ast":null,"code":"import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nexport function encodeVersion(semVer) {\n  let strResult = '';\n  // support x.y or x.y.z by using 'parts' as a variable\n  const parts = semVer.split('.').length;\n  const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n  const paddedReversedSemver = reverseVersion(semVer);\n  // turn 15.05.01 to a string '150501' then to a number 150501\n  const num = parseInt(paddedReversedSemver.split('.').join(''));\n  // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n  // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  }\n  // turn every 6 bits into a character using the base64Map\n  paddedBinary.match(/.{1,6}/g).forEach(bitString => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n  return strResult;\n}","map":{"version":3,"names":["base64Map","stringPad","reverseVersion","encodeVersion","semVer","strResult","parts","split","length","paddedStringLength","paddedReversedSemver","num","parseInt","join","paddedBinary","toString","match","forEach","bitString"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/sdkAnalytics/encodeVersion.js"],"sourcesContent":["import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nexport function encodeVersion(semVer) {\n    let strResult = '';\n    // support x.y or x.y.z by using 'parts' as a variable\n    const parts = semVer.split('.').length;\n    const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n    // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n    // Pad to two spaces, 15.5.1 -> 15.05.01\n    const paddedReversedSemver = reverseVersion(semVer);\n    // turn 15.05.01 to a string '150501' then to a number 150501\n    const num = parseInt(paddedReversedSemver.split('.').join(''));\n    // Represent as binary, add left padding to 12 or 18 characters.\n    // 150,501 -> 100100101111100101\n    let paddedBinary = num.toString(2);\n    paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n    // Stop in case an invalid version number was provided\n    // paddedBinary must be built from sections of 6 bits\n    if (paddedBinary.length % 6 !== 0) {\n        throw 'Version must be smaller than 43.21.26)';\n    }\n    // turn every 6 bits into a character using the base64Map\n    paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n        // console.log(bitString);\n        strResult += base64Map[bitString];\n    });\n    return strResult;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,cAAc,QAAQ,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,CAACC,MAAM,EAAE;EAClC,IAAIC,SAAS,GAAG,EAAE;EAClB;EACA,MAAMC,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM;EACtC,MAAMC,kBAAkB,GAAGH,KAAK,GAAG,CAAC,CAAC,CAAC;EACtC;EACA;EACA,MAAMI,oBAAoB,GAAGR,cAAc,CAACE,MAAM,CAAC;EACnD;EACA,MAAMO,GAAG,GAAGC,QAAQ,CAACF,oBAAoB,CAACH,KAAK,CAAC,GAAG,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC;EAC9D;EACA;EACA,IAAIC,YAAY,GAAGH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAAC;EAClCD,YAAY,GAAGb,SAAS,CAACa,YAAY,EAAEL,kBAAkB,EAAE,GAAG,CAAC;EAC/D;EACA;EACA,IAAIK,YAAY,CAACN,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC/B,MAAM,wCAAwC;EAClD;EACA;EACAM,YAAY,CAACE,KAAK,CAAC,SAAS,CAAC,CAACC,OAAO,CAAEC,SAAS,IAAK;IACjD;IACAb,SAAS,IAAIL,SAAS,CAACkB,SAAS,CAAC;EACrC,CAAC,CAAC;EACF,OAAOb,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}