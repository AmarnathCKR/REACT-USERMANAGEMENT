{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\n/**\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass EffectOutline extends Action {\n  constructor() {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = 'outline';\n  }\n  /**\n   * @description\n   * How to apply the outline effect which can be one of the following values:\n   * inner, inner_fill, outer, fill.\n   * @param {OutlineModeType|string} mode  The type of outline effect. Use the constants defined in Outline.\n   * @return {this}\n   */\n  mode(mode) {\n    this._actionModel.mode = mode;\n    this._mode = mode;\n    return this;\n  }\n  /**\n   * The thickness of the outline in pixels. (Range: 1 to 100, Server default: 5)\n   * @param {number} width\n   * @return {this}\n   */\n  width(width) {\n    this._actionModel.width = width;\n    this._width = width;\n    return this;\n  }\n  /**\n   * @description\n   * The level of blur of the outline.\n   * Range: 0 to 2000, Server default: 0\n   * @param {number | string} lvl\n   * @return {this}\n   */\n  blurLevel(lvl) {\n    this._actionModel.blurLevel = lvl;\n    this._blurLevel = lvl;\n    return this;\n  }\n  /**\n   * @param {string | Qualifiers.Color} color One of the SDK Color values, string, or rgba: '#fff'\n   * @return {this}\n   */\n  color(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', prepareColor(color)));\n  }\n  prepareQualifiers() {\n    this.addQualifier(new Qualifier('e', new QualifierValue(['outline', this._mode, this._width, this._blurLevel]).setDelimiter(':')));\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      mode,\n      color,\n      blurLevel,\n      width\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this();\n    mode && result.mode(mode);\n    color && result.color(color);\n    blurLevel && result.blurLevel(blurLevel);\n    width && result.width(width);\n    return result;\n  }\n}\nexport { EffectOutline };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","prepareColor","EffectOutline","constructor","_actionModel","actionType","mode","_mode","width","_width","blurLevel","lvl","_blurLevel","color","addQualifier","prepareQualifiers","setDelimiter","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Outline.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\n/**\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass EffectOutline extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'outline';\n    }\n    /**\n     * @description\n     * How to apply the outline effect which can be one of the following values:\n     * inner, inner_fill, outer, fill.\n     * @param {OutlineModeType|string} mode  The type of outline effect. Use the constants defined in Outline.\n     * @return {this}\n     */\n    mode(mode) {\n        this._actionModel.mode = mode;\n        this._mode = mode;\n        return this;\n    }\n    /**\n     * The thickness of the outline in pixels. (Range: 1 to 100, Server default: 5)\n     * @param {number} width\n     * @return {this}\n     */\n    width(width) {\n        this._actionModel.width = width;\n        this._width = width;\n        return this;\n    }\n    /**\n     * @description\n     * The level of blur of the outline.\n     * Range: 0 to 2000, Server default: 0\n     * @param {number | string} lvl\n     * @return {this}\n     */\n    blurLevel(lvl) {\n        this._actionModel.blurLevel = lvl;\n        this._blurLevel = lvl;\n        return this;\n    }\n    /**\n     * @param {string | Qualifiers.Color} color One of the SDK Color values, string, or rgba: '#fff'\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', prepareColor(color)));\n    }\n    prepareQualifiers() {\n        this.addQualifier(new Qualifier('e', new QualifierValue(['outline', this._mode, this._width, this._blurLevel]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { actionType, mode, color, blurLevel, width } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        mode && result.mode(mode);\n        color && result.color(color);\n        blurLevel && result.blurLevel(blurLevel);\n        width && result.width(width);\n        return result;\n    }\n}\nexport { EffectOutline };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,YAAY,QAAQ,sCAAsC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASJ,MAAM,CAAC;EAC/BK,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACA,YAAY,CAACC,UAAU,GAAG,SAAS;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAI,CAACA,IAAI,EAAE;IACP,IAAI,CAACF,YAAY,CAACE,IAAI,GAAGA,IAAI;IAC7B,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,KAAK,CAACA,KAAK,EAAE;IACT,IAAI,CAACJ,YAAY,CAACI,KAAK,GAAGA,KAAK;IAC/B,IAAI,CAACC,MAAM,GAAGD,KAAK;IACnB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,SAAS,CAACC,GAAG,EAAE;IACX,IAAI,CAACP,YAAY,CAACM,SAAS,GAAGC,GAAG;IACjC,IAAI,CAACC,UAAU,GAAGD,GAAG;IACrB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,KAAK,CAACA,KAAK,EAAE;IACT,IAAI,CAACT,YAAY,CAACS,KAAK,GAAGA,KAAK;IAC/B,OAAO,IAAI,CAACC,YAAY,CAAC,IAAId,SAAS,CAAC,IAAI,EAAEC,YAAY,CAACY,KAAK,CAAC,CAAC,CAAC;EACtE;EACAE,iBAAiB,GAAG;IAChB,IAAI,CAACD,YAAY,CAAC,IAAId,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,CAAC,SAAS,EAAE,IAAI,CAACQ,KAAK,EAAE,IAAI,CAACE,MAAM,EAAE,IAAI,CAACG,UAAU,CAAC,CAAC,CAACI,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;EACtI;EACA,OAAOC,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEb,UAAU;MAAEC,IAAI;MAAEO,KAAK;MAAEH,SAAS;MAAEF;IAAM,CAAC,GAAGU,WAAW;IACjE;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,IAAI,EAAE;IACzBb,IAAI,IAAIa,MAAM,CAACb,IAAI,CAACA,IAAI,CAAC;IACzBO,KAAK,IAAIM,MAAM,CAACN,KAAK,CAACA,KAAK,CAAC;IAC5BH,SAAS,IAAIS,MAAM,CAACT,SAAS,CAACA,SAAS,CAAC;IACxCF,KAAK,IAAIW,MAAM,CAACX,KAAK,CAACA,KAAK,CAAC;IAC5B,OAAOW,MAAM;EACjB;AACJ;AACA,SAASjB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}