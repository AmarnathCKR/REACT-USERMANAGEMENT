{"ast":null,"code":"var $ = require('../internals/export');\nvar shared = require('../internals/shared');\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isSymbol = require('../internals/is-symbol');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Symbol = getBuiltIn('Symbol');\nvar $isWellKnown = Symbol.isWellKnown;\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\nvar WellKnownSymbolsStore = shared('wks');\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\n  // some old engines throws on access to some keys like `arguments` or `caller`\n  try {\n    var symbolKey = symbolKeys[i];\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\n  } catch (error) {/* empty */}\n}\n\n// `Symbol.isWellKnown` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknown\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\n$({\n  target: 'Symbol',\n  stat: true,\n  forced: true\n}, {\n  isWellKnown: function isWellKnown(value) {\n    if ($isWellKnown && $isWellKnown(value)) return true;\n    try {\n      var symbol = thisSymbolValue(value);\n      for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\n        if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\n      }\n    } catch (error) {/* empty */}\n    return false;\n  }\n});","map":{"version":3,"names":["$","require","shared","getBuiltIn","uncurryThis","isSymbol","wellKnownSymbol","Symbol","$isWellKnown","isWellKnown","getOwnPropertyNames","thisSymbolValue","prototype","valueOf","WellKnownSymbolsStore","i","symbolKeys","symbolKeysLength","length","symbolKey","error","target","stat","forced","value","symbol","j","keys","keysLength"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/modules/esnext.symbol.is-well-known.js"],"sourcesContent":["var $ = require('../internals/export');\nvar shared = require('../internals/shared');\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isSymbol = require('../internals/is-symbol');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar Symbol = getBuiltIn('Symbol');\nvar $isWellKnown = Symbol.isWellKnown;\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\nvar WellKnownSymbolsStore = shared('wks');\n\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\n  // some old engines throws on access to some keys like `arguments` or `caller`\n  try {\n    var symbolKey = symbolKeys[i];\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\n  } catch (error) { /* empty */ }\n}\n\n// `Symbol.isWellKnown` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknown\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\n$({ target: 'Symbol', stat: true, forced: true }, {\n  isWellKnown: function isWellKnown(value) {\n    if ($isWellKnown && $isWellKnown(value)) return true;\n    try {\n      var symbol = thisSymbolValue(value);\n      for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\n        if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\n      }\n    } catch (error) { /* empty */ }\n    return false;\n  }\n});\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3C,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACrD,IAAIG,WAAW,GAAGH,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIK,eAAe,GAAGL,OAAO,CAAC,gCAAgC,CAAC;AAE/D,IAAIM,MAAM,GAAGJ,UAAU,CAAC,QAAQ,CAAC;AACjC,IAAIK,YAAY,GAAGD,MAAM,CAACE,WAAW;AACrC,IAAIC,mBAAmB,GAAGP,UAAU,CAAC,QAAQ,EAAE,qBAAqB,CAAC;AACrE,IAAIQ,eAAe,GAAGP,WAAW,CAACG,MAAM,CAACK,SAAS,CAACC,OAAO,CAAC;AAC3D,IAAIC,qBAAqB,GAAGZ,MAAM,CAAC,KAAK,CAAC;AAEzC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGN,mBAAmB,CAACH,MAAM,CAAC,EAAEU,gBAAgB,GAAGD,UAAU,CAACE,MAAM,EAAEH,CAAC,GAAGE,gBAAgB,EAAEF,CAAC,EAAE,EAAE;EACzH;EACA,IAAI;IACF,IAAII,SAAS,GAAGH,UAAU,CAACD,CAAC,CAAC;IAC7B,IAAIV,QAAQ,CAACE,MAAM,CAACY,SAAS,CAAC,CAAC,EAAEb,eAAe,CAACa,SAAS,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAE;AACpB;;AAEA;AACA;AACA;AACApB,CAAC,CAAC;EAAEqB,MAAM,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EAChDd,WAAW,EAAE,SAASA,WAAW,CAACe,KAAK,EAAE;IACvC,IAAIhB,YAAY,IAAIA,YAAY,CAACgB,KAAK,CAAC,EAAE,OAAO,IAAI;IACpD,IAAI;MACF,IAAIC,MAAM,GAAGd,eAAe,CAACa,KAAK,CAAC;MACnC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGjB,mBAAmB,CAACI,qBAAqB,CAAC,EAAEc,UAAU,GAAGD,IAAI,CAACT,MAAM,EAAEQ,CAAC,GAAGE,UAAU,EAAEF,CAAC,EAAE,EAAE;QAChH,IAAIZ,qBAAqB,CAACa,IAAI,CAACD,CAAC,CAAC,CAAC,IAAID,MAAM,EAAE,OAAO,IAAI;MAC3D;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE,CAAE;IAClB,OAAO,KAAK;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}