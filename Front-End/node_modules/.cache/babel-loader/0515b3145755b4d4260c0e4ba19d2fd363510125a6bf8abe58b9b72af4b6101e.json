{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n  constructor(publicID) {\n    super();\n    this._publicID = publicID;\n    this._qualifierModel = {\n      publicId: publicID,\n      sourceType: 'video'\n    };\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n  getOpenSourceString(layerType) {\n    const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n    return `${layerType}_video:${encodedPublicID}`;\n  }\n  static fromJson(qualifierModel, transformationFromJson) {\n    const {\n      publicId,\n      transformation\n    } = qualifierModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n    // This allows the inheriting classes to determine the class to be created\n    // @ts-ignore\n    const result = new this(publicId);\n    if (transformation) {\n      result.transformation(transformationFromJson(transformation));\n    }\n    return result;\n  }\n}\nexport { VideoSource };","map":{"version":3,"names":["BaseSource","VideoSource","constructor","publicID","_publicID","_qualifierModel","publicId","sourceType","getOpenSourceString","layerType","encodedPublicID","encodeAssetPublicID","fromJson","qualifierModel","transformationFromJson","transformation","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/VideoSource.js"],"sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n        this._qualifierModel = {\n            publicId: publicID,\n            sourceType: 'video'\n        };\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        return `${layerType}_video:${encodedPublicID}`;\n    }\n    static fromJson(qualifierModel, transformationFromJson) {\n        const { publicId, transformation } = qualifierModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(publicId);\n        if (transformation) {\n            result.transformation(transformationFromJson(transformation));\n        }\n        return result;\n    }\n}\nexport { VideoSource };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASD,UAAU,CAAC;EACjCE,WAAW,CAACC,QAAQ,EAAE;IAClB,KAAK,EAAE;IACP,IAAI,CAACC,SAAS,GAAGD,QAAQ;IACzB,IAAI,CAACE,eAAe,GAAG;MACnBC,QAAQ,EAAEH,QAAQ;MAClBI,UAAU,EAAE;IAChB,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmB,CAACC,SAAS,EAAE;IAC3B,MAAMC,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACP,SAAS,CAAC;IAChE,OAAQ,GAAEK,SAAU,UAASC,eAAgB,EAAC;EAClD;EACA,OAAOE,QAAQ,CAACC,cAAc,EAAEC,sBAAsB,EAAE;IACpD,MAAM;MAAER,QAAQ;MAAES;IAAe,CAAC,GAAGF,cAAc;IACnD;IACA;IACA;IACA,MAAMG,MAAM,GAAG,IAAI,IAAI,CAACV,QAAQ,CAAC;IACjC,IAAIS,cAAc,EAAE;MAChBC,MAAM,CAACD,cAAc,CAACD,sBAAsB,CAACC,cAAc,CAAC,CAAC;IACjE;IACA,OAAOC,MAAM;EACjB;AACJ;AACA,SAASf,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}