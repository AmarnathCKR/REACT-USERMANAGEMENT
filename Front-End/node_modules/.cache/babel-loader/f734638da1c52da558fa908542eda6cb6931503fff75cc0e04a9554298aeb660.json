{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\n * @memberOf Actions.Adjust\n */\nclass ReplaceColorAction extends Action {\n  /**\n   * @description Sets the target output color.\n   * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n   */\n  constructor(toColor) {\n    super();\n    this.targetColor = toColor;\n  }\n  /**\n   * @description Sets the tolerance threshold.\n   * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n   *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n   *                                  Larger values result in replacing more colors within the image. </br>\n   *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n   * @return {this}\n   */\n  tolerance(toleranceLevel) {\n    this.toleranceLevel = toleranceLevel;\n    return this;\n  }\n  /**\n   * @description Sets the base input color to map.\n   * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n   * @return {this}\n   */\n  fromColor(baseColor) {\n    this.baseColor = baseColor;\n    return this;\n  }\n  prepareQualifiers() {\n    // Target color and base color might not exist at this point (optional qualifiers)\n    // If they exist, ensure that any # for RGB are removed from the resulting string\n    const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n    const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n    const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n}\nexport { ReplaceColorAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ReplaceColorAction","constructor","toColor","targetColor","tolerance","toleranceLevel","fromColor","baseColor","prepareQualifiers","toString","replace","qualifierValue","addQualifier"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/adjust/ReplaceColorAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\n * @memberOf Actions.Adjust\n */\nclass ReplaceColorAction extends Action {\n    /**\n     * @description Sets the target output color.\n     * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n     */\n    constructor(toColor) {\n        super();\n        this.targetColor = toColor;\n    }\n    /**\n     * @description Sets the tolerance threshold.\n     * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n     *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n     *                                  Larger values result in replacing more colors within the image. </br>\n     *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n     * @return {this}\n     */\n    tolerance(toleranceLevel) {\n        this.toleranceLevel = toleranceLevel;\n        return this;\n    }\n    /**\n     * @description Sets the base input color to map.\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n     * @return {this}\n     */\n    fromColor(baseColor) {\n        this.baseColor = baseColor;\n        return this;\n    }\n    prepareQualifiers() {\n        // Target color and base color might not exist at this point (optional qualifiers)\n        // If they exist, ensure that any # for RGB are removed from the resulting string\n        const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n        const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n        const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { ReplaceColorAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASH,MAAM,CAAC;EACpC;AACJ;AACA;AACA;EACII,WAAW,CAACC,OAAO,EAAE;IACjB,KAAK,EAAE;IACP,IAAI,CAACC,WAAW,GAAGD,OAAO;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,SAAS,CAACC,cAAc,EAAE;IACtB,IAAI,CAACA,cAAc,GAAGA,cAAc;IACpC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIC,SAAS,CAACC,SAAS,EAAE;IACjB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,OAAO,IAAI;EACf;EACAC,iBAAiB,GAAG;IAChB;IACA;IACA,MAAML,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI,IAAI,CAACA,WAAW,CAACM,QAAQ,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IACpF,MAAMH,SAAS,GAAG,IAAI,CAACA,SAAS,IAAI,IAAI,CAACA,SAAS,CAACE,QAAQ,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC9E,MAAMC,cAAc,GAAG,IAAIb,cAAc,CAAC,CAAC,eAAe,EAAEK,WAAW,EAAE,IAAI,CAACE,cAAc,EAAEE,SAAS,CAAC,CAAC;IACzG,IAAI,CAACK,YAAY,CAAC,IAAIb,SAAS,CAAC,GAAG,EAAEY,cAAc,CAAC,CAAC;IACrD,OAAO,IAAI;EACf;AACJ;AACA,SAASX,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}