{"ast":null,"code":"var DESCRIPTORS = require('../internals/descriptors');\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\nvar classof = require('../internals/classof-raw');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar getInternalState = require('../internals/internal-state').get;\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError;\n\n// `RegExp.prototype.dotAll` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall\nif (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {\n  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {\n    configurable: true,\n    get: function dotAll() {\n      if (this === RegExpPrototype) return undefined;\n      // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).dotAll;\n      }\n      throw $TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}","map":{"version":3,"names":["DESCRIPTORS","require","UNSUPPORTED_DOT_ALL","classof","defineBuiltInAccessor","getInternalState","get","RegExpPrototype","RegExp","prototype","$TypeError","TypeError","configurable","dotAll","undefined"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/modules/es.regexp.dot-all.js"],"sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\nvar classof = require('../internals/classof-raw');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar getInternalState = require('../internals/internal-state').get;\n\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError;\n\n// `RegExp.prototype.dotAll` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall\nif (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {\n  defineBuiltInAccessor(RegExpPrototype, 'dotAll', {\n    configurable: true,\n    get: function dotAll() {\n      if (this === RegExpPrototype) return undefined;\n      // We can't use InternalStateModule.getterFor because\n      // we don't add metadata for regexps created by a literal.\n      if (classof(this) === 'RegExp') {\n        return !!getInternalState(this).dotAll;\n      }\n      throw $TypeError('Incompatible receiver, RegExp required');\n    }\n  });\n}\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACrD,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,yCAAyC,CAAC;AAC5E,IAAIE,OAAO,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACjD,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,uCAAuC,CAAC;AAC5E,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC,CAACK,GAAG;AAEjE,IAAIC,eAAe,GAAGC,MAAM,CAACC,SAAS;AACtC,IAAIC,UAAU,GAAGC,SAAS;;AAE1B;AACA;AACA,IAAIX,WAAW,IAAIE,mBAAmB,EAAE;EACtCE,qBAAqB,CAACG,eAAe,EAAE,QAAQ,EAAE;IAC/CK,YAAY,EAAE,IAAI;IAClBN,GAAG,EAAE,SAASO,MAAM,GAAG;MACrB,IAAI,IAAI,KAAKN,eAAe,EAAE,OAAOO,SAAS;MAC9C;MACA;MACA,IAAIX,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;QAC9B,OAAO,CAAC,CAACE,gBAAgB,CAAC,IAAI,CAAC,CAACQ,MAAM;MACxC;MACA,MAAMH,UAAU,CAAC,wCAAwC,CAAC;IAC5D;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}