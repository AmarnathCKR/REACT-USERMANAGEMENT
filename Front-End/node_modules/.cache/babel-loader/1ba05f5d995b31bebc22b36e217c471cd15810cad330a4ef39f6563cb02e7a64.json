{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar anObject = require('../internals/an-object');\nvar $TypeError = TypeError;\n\n// `Map.prototype.upsert` method\n// https://github.com/tc39/proposal-upsert\nmodule.exports = function upsert(key, updateFn /* , insertFn */) {\n  var map = anObject(this);\n  var get = aCallable(map.get);\n  var has = aCallable(map.has);\n  var set = aCallable(map.set);\n  var insertFn = arguments.length > 2 ? arguments[2] : undefined;\n  var value;\n  if (!isCallable(updateFn) && !isCallable(insertFn)) {\n    throw $TypeError('At least one callback required');\n  }\n  if (call(has, map, key)) {\n    value = call(get, map, key);\n    if (isCallable(updateFn)) {\n      value = updateFn(value);\n      call(set, map, key, value);\n    }\n  } else if (isCallable(insertFn)) {\n    value = insertFn();\n    call(set, map, key, value);\n  }\n  return value;\n};","map":{"version":3,"names":["call","require","aCallable","isCallable","anObject","$TypeError","TypeError","module","exports","upsert","key","updateFn","map","get","has","set","insertFn","arguments","length","undefined","value"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/internals/map-upsert.js"],"sourcesContent":["'use strict';\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar anObject = require('../internals/an-object');\n\nvar $TypeError = TypeError;\n\n// `Map.prototype.upsert` method\n// https://github.com/tc39/proposal-upsert\nmodule.exports = function upsert(key, updateFn /* , insertFn */) {\n  var map = anObject(this);\n  var get = aCallable(map.get);\n  var has = aCallable(map.has);\n  var set = aCallable(map.set);\n  var insertFn = arguments.length > 2 ? arguments[2] : undefined;\n  var value;\n  if (!isCallable(updateFn) && !isCallable(insertFn)) {\n    throw $TypeError('At least one callback required');\n  }\n  if (call(has, map, key)) {\n    value = call(get, map, key);\n    if (isCallable(updateFn)) {\n      value = updateFn(value);\n      call(set, map, key, value);\n    }\n  } else if (isCallable(insertFn)) {\n    value = insertFn();\n    call(set, map, key, value);\n  } return value;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIE,UAAU,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAEhD,IAAII,UAAU,GAAGC,SAAS;;AAE1B;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,MAAM,CAACC,GAAG,EAAEC,QAAQ,CAAC,kBAAkB;EAC/D,IAAIC,GAAG,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxB,IAAIS,GAAG,GAAGX,SAAS,CAACU,GAAG,CAACC,GAAG,CAAC;EAC5B,IAAIC,GAAG,GAAGZ,SAAS,CAACU,GAAG,CAACE,GAAG,CAAC;EAC5B,IAAIC,GAAG,GAAGb,SAAS,CAACU,GAAG,CAACG,GAAG,CAAC;EAC5B,IAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;EAC9D,IAAIC,KAAK;EACT,IAAI,CAACjB,UAAU,CAACQ,QAAQ,CAAC,IAAI,CAACR,UAAU,CAACa,QAAQ,CAAC,EAAE;IAClD,MAAMX,UAAU,CAAC,gCAAgC,CAAC;EACpD;EACA,IAAIL,IAAI,CAACc,GAAG,EAAEF,GAAG,EAAEF,GAAG,CAAC,EAAE;IACvBU,KAAK,GAAGpB,IAAI,CAACa,GAAG,EAAED,GAAG,EAAEF,GAAG,CAAC;IAC3B,IAAIP,UAAU,CAACQ,QAAQ,CAAC,EAAE;MACxBS,KAAK,GAAGT,QAAQ,CAACS,KAAK,CAAC;MACvBpB,IAAI,CAACe,GAAG,EAAEH,GAAG,EAAEF,GAAG,EAAEU,KAAK,CAAC;IAC5B;EACF,CAAC,MAAM,IAAIjB,UAAU,CAACa,QAAQ,CAAC,EAAE;IAC/BI,KAAK,GAAGJ,QAAQ,EAAE;IAClBhB,IAAI,CAACe,GAAG,EAAEH,GAAG,EAAEF,GAAG,EAAEU,KAAK,CAAC;EAC5B;EAAE,OAAOA,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}