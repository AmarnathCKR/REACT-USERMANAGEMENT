{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\n *              You can replace colors using the xray() method.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass AssistColorBlindEffectAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = 'assistColorblind';\n    this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\n  }\n  /**\n   * @description Replaces problematic colors with colors that are easier to differentiate.\n   * @return {this}\n   */\n  xray() {\n    this._actionModel.type = 'xray';\n    return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\n  }\n  /**\n   * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\n   * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\n   * @return {this}\n   */\n  stripesStrength(strength) {\n    this._actionModel.type = 'stripes';\n    this._actionModel.stripesStrength = strength;\n    return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      type,\n      stripesStrength\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this();\n    if (type === 'xray') {\n      result.xray();\n    }\n    if (type === 'stripes') {\n      stripesStrength && result.stripesStrength(stripesStrength);\n    }\n    return result;\n  }\n}\nexport { AssistColorBlindEffectAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","AssistColorBlindEffectAction","constructor","_actionModel","actionType","addQualifier","xray","type","setDelimiter","stripesStrength","strength","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/AssistColorBlind.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\n *              You can replace colors using the xray() method.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass AssistColorBlindEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'assistColorblind';\n        this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\n    }\n    /**\n     * @description Replaces problematic colors with colors that are easier to differentiate.\n     * @return {this}\n     */\n    xray() {\n        this._actionModel.type = 'xray';\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\n    }\n    /**\n     * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\n     * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\n     * @return {this}\n     */\n    stripesStrength(strength) {\n        this._actionModel.type = 'stripes';\n        this._actionModel.stripesStrength = strength;\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\n    }\n    static fromJson(actionModel) {\n        const { actionType, type, stripesStrength } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        if (type === 'xray') {\n            result.xray();\n        }\n        if (type === 'stripes') {\n            stripesStrength && result.stripesStrength(stripesStrength);\n        }\n        return result;\n    }\n}\nexport { AssistColorBlindEffectAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,4BAA4B,SAASH,MAAM,CAAC;EAC9CI,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACA,YAAY,CAACC,UAAU,GAAG,kBAAkB;IACjD,IAAI,CAACC,YAAY,CAAC,IAAIL,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAClF;EACA;AACJ;AACA;AACA;EACIO,IAAI,GAAG;IACH,IAAI,CAACH,YAAY,CAACI,IAAI,GAAG,MAAM;IAC/B,OAAO,IAAI,CAACF,YAAY,CAAC,IAAIL,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAACS,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;EACrH;EACA;AACJ;AACA;AACA;AACA;EACIC,eAAe,CAACC,QAAQ,EAAE;IACtB,IAAI,CAACP,YAAY,CAACI,IAAI,GAAG,SAAS;IAClC,IAAI,CAACJ,YAAY,CAACM,eAAe,GAAGC,QAAQ;IAC5C,OAAO,IAAI,CAACL,YAAY,CAAC,IAAIL,SAAS,CAAC,GAAG,EAAE,IAAID,cAAc,CAAC,CAAC,mBAAmB,EAAEW,QAAQ,CAAC,CAAC,CAACF,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;EACvH;EACA,OAAOG,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAER,UAAU;MAAEG,IAAI;MAAEE;IAAgB,CAAC,GAAGG,WAAW;IACzD;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,IAAI,EAAE;IACzB,IAAIN,IAAI,KAAK,MAAM,EAAE;MACjBM,MAAM,CAACP,IAAI,EAAE;IACjB;IACA,IAAIC,IAAI,KAAK,SAAS,EAAE;MACpBE,eAAe,IAAII,MAAM,CAACJ,eAAe,CAACA,eAAe,CAAC;IAC9D;IACA,OAAOI,MAAM;EACjB;AACJ;AACA,SAASZ,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}