{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ColorizeEffectAction extends EffectActionWithLevel {\n  /**\n   * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n   * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n   * @return {this}\n   */\n  color(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      level,\n      color\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(actionType, level);\n    color && result.color(color);\n    return result;\n  }\n}\nexport { ColorizeEffectAction };","map":{"version":3,"names":["QualifierValue","Qualifier","prepareColor","EffectActionWithLevel","ColorizeEffectAction","color","_actionModel","addQualifier","fromJson","actionModel","actionType","level","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Colorize.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ColorizeEffectAction extends EffectActionWithLevel {\n    /**\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, level);\n        color && result.color(color);\n        return result;\n    }\n}\nexport { ColorizeEffectAction };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,YAAY,QAAQ,sCAAsC;AACnE,SAASC,qBAAqB,QAAQ,0CAA0C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASD,qBAAqB,CAAC;EACrD;AACJ;AACA;AACA;AACA;EACIE,KAAK,CAACA,KAAK,EAAE;IACT,IAAI,CAACC,YAAY,CAACD,KAAK,GAAGA,KAAK;IAC/B,OAAO,IAAI,CAACE,YAAY,CAAC,IAAIN,SAAS,CAAC,IAAI,EAAE,IAAID,cAAc,CAACE,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1F;EACA,OAAOG,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEC,UAAU;MAAEC,KAAK;MAAEN;IAAM,CAAC,GAAGI,WAAW;IAChD;IACA;IACA,MAAMG,MAAM,GAAG,IAAI,IAAI,CAACF,UAAU,EAAEC,KAAK,CAAC;IAC1CN,KAAK,IAAIO,MAAM,CAACP,KAAK,CAACA,KAAK,CAAC;IAC5B,OAAOO,MAAM;EACjB;AACJ;AACA,SAASR,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}