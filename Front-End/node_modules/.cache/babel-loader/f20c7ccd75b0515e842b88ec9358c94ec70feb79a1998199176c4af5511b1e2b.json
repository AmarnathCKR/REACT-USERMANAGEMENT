{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = 'vectorize';\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n  numOfColors(num) {\n    this._actionModel.numOfColors = num;\n    this._numOfColors = num;\n    return this;\n  }\n  /**\n   * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n   * @param {number | string} num\n   * @return {this}\n   */\n  detailsLevel(num) {\n    this._actionModel.detailLevel = num;\n    this._detailsLevel = num;\n    return this;\n  }\n  /**\n   * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n   * @param {number | string} num\n   * @return {this}\n   */\n  despeckleLevel(num) {\n    this._actionModel.despeckleLevel = num;\n    this._despeckleLevel = num;\n    return this;\n  }\n  /**\n   * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n   * @param {number | string} num\n   * @return {this}\n   */\n  cornersLevel(num) {\n    this._actionModel.cornersLevel = num;\n    this._cornersLevel = num;\n    return this;\n  }\n  /**\n   * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n   * @param {number} num\n   * @return {this}\n   */\n  paths(num) {\n    this._actionModel.paths = num;\n    this._paths = num;\n    return this;\n  }\n  prepareQualifiers() {\n    let str = 'vectorize';\n    if (this._numOfColors) {\n      str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n    }\n    if (this._detailsLevel) {\n      str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n    }\n    if (this._despeckleLevel) {\n      str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n    }\n    if (this._paths) {\n      str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n    }\n    if (this._cornersLevel) {\n      str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n    }\n    this.addQualifier(new Qualifier('e', str));\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      paths,\n      cornersLevel,\n      despeckleLevel,\n      detailLevel,\n      numOfColors\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this();\n    paths && result.paths(paths);\n    cornersLevel && result.cornersLevel(cornersLevel);\n    despeckleLevel && result.despeckleLevel(despeckleLevel);\n    detailLevel && result.detailsLevel(detailLevel);\n    numOfColors && result.numOfColors(numOfColors);\n    return result;\n  }\n}\nexport { VectorizeEffectAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","constructor","_actionModel","actionType","numOfColors","num","_numOfColors","detailsLevel","detailLevel","_detailsLevel","despeckleLevel","_despeckleLevel","cornersLevel","_cornersLevel","paths","_paths","prepareQualifiers","str","toString","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Vectorize.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'vectorize';\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._actionModel.numOfColors = num;\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._actionModel.detailLevel = num;\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._actionModel.despeckleLevel = num;\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._actionModel.cornersLevel = num;\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._actionModel.paths = num;\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n    static fromJson(actionModel) {\n        const { actionType, paths, cornersLevel, despeckleLevel, detailLevel, numOfColors } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        paths && result.paths(paths);\n        cornersLevel && result.cornersLevel(cornersLevel);\n        despeckleLevel && result.despeckleLevel(despeckleLevel);\n        detailLevel && result.detailsLevel(detailLevel);\n        numOfColors && result.numOfColors(numOfColors);\n        return result;\n    }\n}\nexport { VectorizeEffectAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}