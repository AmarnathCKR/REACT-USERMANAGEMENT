{"ast":null,"code":"const fs = require('fs');\nconst {\n  extname,\n  basename\n} = require('path');\nconst Q = require('q');\nconst Writable = require(\"stream\").Writable;\nconst urlLib = require('url');\n\n// eslint-disable-next-line import/order\nconst {\n  upload_prefix\n} = require(\"./config\")();\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\nconst Cache = require('./cache');\nconst utils = require(\"./utils\");\nconst UploadStream = require('./upload_stream');\nconst config = require(\"./config\");\nconst ProxyAgent = utils.optionalRequire('proxy-agent');\nconst ensureOption = require('./utils/ensureOption').defaults(config());\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isEmpty,\n  isObject,\n  isRemoteUrl,\n  merge,\n  pickOnlyExistingValues\n} = utils;\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\nexports.upload_stream = function upload_stream(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return exports.upload(null, callback, extend({\n    stream: true\n  }, options));\n};\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\nexports.upload = function upload(file, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, {\n      file: file\n    }] : [params, {}, file];\n  });\n};\nexports.upload_large = function upload_large(path, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (path != null && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {});\n      }\n    });\n  }\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, active => {\n        this.active = active;\n        if (this.active) {\n          this.buffer = data.slice(grab);\n          done();\n        }\n      });\n    }\n  }\n}\nexports.upload_large_stream = function upload_large_stream(_unused_, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\nexports.upload_chunked_stream = function upload_chunked_stream(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = extend({}, options, {\n    stream: true\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${is_last ? sent : -1}`;\n    params.timestamp = utils.timestamp();\n    let finished_part = function (result) {\n      const errorOrLast = result.error != null || is_last;\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n      return done(!errorOrLast);\n    };\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\nexports.explicit = function explicit(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n};\n\n// Creates a new archive in the server and returns information in JSON format\nexports.create_archive = function create_archive(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let target_format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n    return [opt];\n  });\n};\n\n// Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = function create_zip(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return exports.create_archive(callback, options, \"zip\");\n};\nexports.create_slideshow = function create_slideshow(options, callback) {\n  options.resource_type = ensureOption(options, \"resource_type\", \"video\");\n  return call_api(\"create_slideshow\", callback, options, function () {\n    // Generate a transformation from the manifest_transformation key, which should be a valid transformation\n    const manifest_transformation = utils.generate_transformation_string(extend({}, options.manifest_transformation));\n\n    // Try to use {options.transformation} to generate a transformation (Example: options.transformation.width, options.transformation.height)\n    const transformation = utils.generate_transformation_string(extend({}, ensureOption(options, 'transformation', {})));\n    return [{\n      timestamp: utils.timestamp(),\n      manifest_transformation: manifest_transformation,\n      upload_preset: options.upload_preset,\n      overwrite: options.overwrite,\n      public_id: options.public_id,\n      notification_url: options.notification_url,\n      manifest_json: options.manifest_json,\n      tags: options.tags,\n      transformation: transformation\n    }];\n  });\n};\nexports.destroy = function destroy(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"destroy\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      invalidate: options.invalidate,\n      public_id: public_id\n    }];\n  });\n};\nexports.rename = function rename(from_public_id, to_public_id, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_api(\"rename\", callback, options, function () {\n    return [{\n      timestamp: utils.timestamp(),\n      type: options.type,\n      from_public_id: from_public_id,\n      to_public_id: to_public_id,\n      overwrite: options.overwrite,\n      invalidate: options.invalidate,\n      to_type: options.to_type\n    }];\n  });\n};\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\nexports.text = function text(content, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"text\", callback, options, function () {\n    let textParams = pickOnlyExistingValues(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams\n    };\n    return [params];\n  });\n};\n\n/**\n * Generate a sprite by merging multiple images into a single large image for reducing network overhead and bypassing\n * download limitations.\n *\n * The process produces 2 files as follows:\n * - A single image file containing all the images with the specified tag (PNG by default).\n * - A CSS file that includes the style class names and the location of the individual images in the sprite.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.generate_sprite = function generate_sprite(tag, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"sprite\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\n/**\n * Returns a signed url to download a sprite\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_generated_sprite = function download_generated_sprite(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return utils.api_download_url(\"sprite\", utils.build_multi_and_sprite_params(tag, options), options);\n};\n\n/**\n * Returns a signed url to download a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from\n * multiple image assets.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_multi = function download_multi(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return utils.api_download_url(\"multi\", utils.build_multi_and_sprite_params(tag, options), options);\n};\n\n/**\n * Creates either a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from multiple image\n * assets.\n *\n * Each asset is included as a single frame of the resulting animated image/video, or a page of the PDF (sorted\n * alphabetically by their Public ID).\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.multi = function multi(tag, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"multi\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\nexports.explode = function explode(public_id, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [{\n      timestamp: utils.timestamp(),\n      public_id: public_id,\n      transformation: transformation,\n      format: options.format,\n      type: options.type,\n      notification_url: options.notification_url\n    }];\n  });\n};\n\n/**\n *\n * @param {String}          tag                  The tag or tags to assign. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids           A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.add_tag = function add_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\n/**\n * @param {String}          tag                  The tag or tags to remove. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids            A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.remove_tag = function remove_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\nexports.remove_all_tags = function remove_all_tags() {\n  let public_ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\nexports.replace_tag = function replace_tag(tag) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\nfunction call_tags_api(tag, command) {\n  let public_ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let callback = arguments.length > 3 ? arguments[3] : undefined;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (tag != null) {\n      params.tag = tag;\n    }\n    return [params];\n  });\n}\nexports.add_context = function add_context(context) {\n  let public_ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callback = arguments.length > 2 ? arguments[2] : undefined;\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\nexports.remove_all_context = function remove_all_context() {\n  let public_ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\nfunction call_context_api(context, command) {\n  let public_ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let callback = arguments.length > 3 ? arguments[3] : undefined;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n    return [params];\n  });\n}\n\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\nfunction cacheResults(result, _ref) {\n  let {\n    type,\n    resource_type\n  } = _ref;\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(_ref2 => {\n      let {\n        transformation,\n        url,\n        breakpoints\n      } = _ref2;\n      return Cache.set(result.public_id, {\n        type,\n        resource_type,\n        raw_transformation: transformation,\n        format: extname(breakpoints[0].url).slice(1)\n      }, breakpoints.map(i => i.width));\n    });\n  }\n}\nfunction parseResult(buffer, res) {\n  let result = '';\n  try {\n    result = JSON.parse(buffer);\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\"\n      }\n    };\n  }\n  return result;\n}\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n  const USE_PROMISES = !options.disable_promises;\n  let deferred = Q.defer();\n  if (options == null) {\n    options = {};\n  }\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {\n\n      // Already reported\n    } else if (res.error) {\n      errorRaised = true;\n      if (USE_PROMISES) {\n        deferred.reject(res);\n      }\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", d => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n        if (errorRaised) {\n          return;\n        }\n        result = parseResult(buffer, res);\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          if (USE_PROMISES) {\n            deferred.reject(result.error);\n          }\n        } else {\n          cacheResults(result, options);\n          if (USE_PROMISES) {\n            deferred.resolve(result);\n          }\n        }\n        callback(result);\n      });\n      res.on(\"error\", error => {\n        errorRaised = true;\n        if (USE_PROMISES) {\n          deferred.reject(error);\n        }\n        callback({\n          error\n        });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\"\n      };\n      if (USE_PROMISES) {\n        deferred.reject(error);\n      }\n      callback({\n        error\n      });\n    }\n  };\n  let post_data = utils.hashToParameters(params).filter(_ref3 => {\n    let [key, value] = _ref3;\n    return value != null;\n  }).map(_ref4 => {\n    let [key, value] = _ref4;\n    return Buffer.from(encodeFieldPart(boundary, key, value), 'utf8');\n  });\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n  if (isObject(result)) {\n    return result;\n  }\n  if (USE_PROMISES) {\n    return deferred.promise;\n  }\n}\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n  let oauth_token = options.oauth_token || config().oauth_token;\n  if (file != null || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent()\n  };\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n  if (options.extra_headers !== null) {\n    headers = merge(headers, options.extra_headers);\n  }\n  if (oauth_token != null) {\n    headers.Authorization = `Bearer ${oauth_token}`;\n  }\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers\n  });\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n  let proxy = options.api_proxy || config().api_proxy;\n  if (!isEmpty(proxy)) {\n    if (!post_options.agent) {\n      if (ProxyAgent === null) {\n        throw new Error(\"Proxy value is set, but `proxy-agent` is not installed, please install `proxy-agent` module.\");\n      }\n      post_options.agent = new ProxyAgent(proxy);\n    } else {\n      console.warn(\"Proxy is set, but request uses a custom agent, proxy is ignored.\");\n    }\n  }\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({\n    boundary\n  });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\"\n      };\n    }\n    return callback({\n      error\n    });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n  return true;\n}\nfunction encodeFieldPart(boundary, name, value) {\n  return [`--${boundary}`, `Content-Disposition: form-data; name=\"${name}\"`, '', value, ''].join(\"\\r\\n\");\n}\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [`--${boundary}`, `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"`, `Content-Type: ${type}`, '', ''].join(\"\\r\\n\");\n}\nexports.direct_upload = function direct_upload(callback_url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let params = build_upload_params(extend({\n    callback: callback_url\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\"\n    }\n  };\n};\nexports.upload_tag_params = function upload_tag_params() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\nexports.upload_url = function upload_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n  return utils.api_url(\"upload\", options);\n};\nexports.image_upload_tag = function image_upload_tag(field) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \")\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata = function update_metadata(metadata, public_ids, callback) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type,\n      clear_invalid: options.clear_invalid\n    };\n    return [params];\n  });\n};","map":{"version":3,"names":["fs","require","extname","basename","Q","Writable","urlLib","upload_prefix","isSecure","slice","https","Cache","utils","UploadStream","config","ProxyAgent","optionalRequire","ensureOption","defaults","build_upload_params","extend","includes","isEmpty","isObject","isRemoteUrl","merge","pickOnlyExistingValues","exports","unsigned_upload_stream","upload_preset","callback","options","upload_stream","unsigned","upload","stream","unsigned_upload","file","call_api","params","upload_large","path","filename","split","pop","replace","upload_chunked","resource_type","file_reader","createReadStream","out_stream","upload_chunked_stream","pipe","Chunkable","constructor","chunk_size","buffer","Buffer","alloc","active","on","emit","_write","data","encoding","done","length","concat","grab","upload_large_stream","_unused_","x_unique_upload_id","random_public_id","part_size","chunker","sent","is_last","chunk_start","content_range","timestamp","finished_part","result","errorOrLast","error","write","end","explicit","public_id","build_explicit_api_params","create_archive","target_format","opt","archive_params","create_zip","create_slideshow","manifest_transformation","generate_transformation_string","transformation","overwrite","notification_url","manifest_json","tags","destroy","type","invalidate","rename","from_public_id","to_public_id","to_type","TEXT_PARAMS","text","content","textParams","generate_sprite","tag","build_multi_and_sprite_params","download_generated_sprite","api_download_url","download_multi","multi","explode","format","add_tag","public_ids","exclusive","option_consume","command","call_tags_api","remove_tag","remove_all_tags","replace_tag","build_array","add_context","context","call_context_api","remove_all_context","encode_context","cacheResults","responsive_breakpoints","forEach","url","breakpoints","set","raw_transformation","map","i","width","parseResult","res","JSON","parse","name","jsonError","message","statusCode","action","get_params","USE_PROMISES","disable_promises","deferred","defer","unsigned_params","call","process_request_params","api_url","boundary","errorRaised","handle_response","reject","d","http_code","resolve","post_data","hashToParameters","filter","key","value","from","encodeFieldPart","post","promise","file_header","finish_buffer","oauth_token","encodeFilePart","post_options","headers","getUserAgent","extra_headers","Authorization","method","agent","proxy","api_proxy","Error","console","warn","post_request","request","timeout","setTimeout","abort","postDatum","join","direct_upload","callback_url","hidden_fields","form_attrs","enctype","upload_tag_params","stringify","upload_url","image_upload_tag","field","html_options","html","tag_options","class","html_attrs","unsigned_image_upload_tag","update_metadata","metadata","clear_invalid"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/uploader.js"],"sourcesContent":["const fs = require('fs');\nconst { extname, basename } = require('path');\nconst Q = require('q');\nconst Writable = require(\"stream\").Writable;\nconst urlLib = require('url');\n\n// eslint-disable-next-line import/order\nconst { upload_prefix } = require(\"./config\")();\n\nconst isSecure = !(upload_prefix && upload_prefix.slice(0, 5) === 'http:');\nconst https = isSecure ? require('https') : require('http');\n\nconst Cache = require('./cache');\nconst utils = require(\"./utils\");\nconst UploadStream = require('./upload_stream');\nconst config = require(\"./config\");\nconst ProxyAgent = utils.optionalRequire('proxy-agent');\nconst ensureOption = require('./utils/ensureOption').defaults(config());\n\nconst {\n  build_upload_params,\n  extend,\n  includes,\n  isEmpty,\n  isObject,\n  isRemoteUrl,\n  merge,\n  pickOnlyExistingValues\n} = utils;\n\nexports.unsigned_upload_stream = function unsigned_upload_stream(upload_preset, callback, options = {}) {\n  return exports.upload_stream(callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload_stream = function upload_stream(callback, options = {}) {\n  return exports.upload(null, callback, extend({\n    stream: true\n  }, options));\n};\n\nexports.unsigned_upload = function unsigned_upload(file, upload_preset, callback, options = {}) {\n  return exports.upload(file, callback, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\nexports.upload = function upload(file, callback, options = {}) {\n  return call_api(\"upload\", callback, options, function () {\n    let params = build_upload_params(options);\n    return isRemoteUrl(file) ? [params, { file: file }] : [params, {}, file];\n  });\n};\n\nexports.upload_large = function upload_large(path, callback, options = {}) {\n  if ((path != null) && isRemoteUrl(path)) {\n    // upload a remote file\n    return exports.upload(path, callback, options);\n  }\n  if (path != null && !options.filename) {\n    options.filename = path.split(/(\\\\|\\/)/g).pop().replace(/\\.[^/.]+$/, \"\");\n  }\n  return exports.upload_chunked(path, callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked = function upload_chunked(path, callback, options) {\n  let file_reader = fs.createReadStream(path);\n  let out_stream = exports.upload_chunked_stream(callback, options);\n  return file_reader.pipe(out_stream);\n};\n\nclass Chunkable extends Writable {\n  constructor(options) {\n    super(options);\n    this.chunk_size = options.chunk_size != null ? options.chunk_size : 20000000;\n    this.buffer = Buffer.alloc(0);\n    this.active = true;\n    this.on('finish', () => {\n      if (this.active) {\n        this.emit('ready', this.buffer, true, function () {\n        });\n      }\n    });\n  }\n\n  _write(data, encoding, done) {\n    if (!this.active) {\n      done();\n    }\n    if (this.buffer.length + data.length <= this.chunk_size) {\n      this.buffer = Buffer.concat([this.buffer, data], this.buffer.length + data.length);\n      done();\n    } else {\n      const grab = this.chunk_size - this.buffer.length;\n      this.buffer = Buffer.concat([this.buffer, data.slice(0, grab)], this.buffer.length + grab);\n      this.emit('ready', this.buffer, false, (active) => {\n        this.active = active;\n        if (this.active) {\n          this.buffer = data.slice(grab);\n          done();\n        }\n      });\n    }\n  }\n}\n\nexports.upload_large_stream = function upload_large_stream(_unused_, callback, options = {}) {\n  return exports.upload_chunked_stream(callback, extend({\n    resource_type: 'raw'\n  }, options));\n};\n\nexports.upload_chunked_stream = function upload_chunked_stream(callback, options = {}) {\n  options = extend({}, options, {\n    stream: true\n  });\n  options.x_unique_upload_id = utils.random_public_id();\n  let params = build_upload_params(options);\n  let chunk_size = options.chunk_size != null ? options.chunk_size : options.part_size;\n  let chunker = new Chunkable({\n    chunk_size: chunk_size\n  });\n  let sent = 0;\n  chunker.on('ready', function (buffer, is_last, done) {\n    let chunk_start = sent;\n    sent += buffer.length;\n    options.content_range = `bytes ${chunk_start}-${sent - 1}/${(is_last ? sent : -1)}`;\n    params.timestamp = utils.timestamp();\n    let finished_part = function (result) {\n      const errorOrLast = (result.error != null) || is_last;\n      if (errorOrLast && typeof callback === \"function\") {\n        callback(result);\n      }\n      return done(!errorOrLast);\n    };\n    let stream = call_api(\"upload\", finished_part, options, function () {\n      return [params, {}, buffer];\n    });\n    return stream.write(buffer, 'buffer', function () {\n      return stream.end();\n    });\n  });\n  return chunker;\n};\n\nexports.explicit = function explicit(public_id, callback, options = {}) {\n  return call_api(\"explicit\", callback, options, function () {\n    return utils.build_explicit_api_params(public_id, options);\n  });\n};\n\n// Creates a new archive in the server and returns information in JSON format\nexports.create_archive = function create_archive(callback, options = {}, target_format = null) {\n  return call_api(\"generate_archive\", callback, options, function () {\n    let opt = utils.archive_params(options);\n    if (target_format) {\n      opt.target_format = target_format;\n    }\n    return [opt];\n  });\n};\n\n// Creates a new zip archive in the server and returns information in JSON format\nexports.create_zip = function create_zip(callback, options = {}) {\n  return exports.create_archive(callback, options, \"zip\");\n};\n\n\nexports.create_slideshow = function create_slideshow(options, callback) {\n  options.resource_type = ensureOption(options, \"resource_type\", \"video\");\n  return call_api(\"create_slideshow\", callback, options, function () {\n    // Generate a transformation from the manifest_transformation key, which should be a valid transformation\n    const manifest_transformation = utils.generate_transformation_string(extend({}, options.manifest_transformation));\n\n    // Try to use {options.transformation} to generate a transformation (Example: options.transformation.width, options.transformation.height)\n    const transformation = utils.generate_transformation_string(extend({}, ensureOption(options, 'transformation', {})));\n\n    return [\n      {\n        timestamp: utils.timestamp(),\n        manifest_transformation: manifest_transformation,\n        upload_preset: options.upload_preset,\n        overwrite: options.overwrite,\n        public_id: options.public_id,\n        notification_url: options.notification_url,\n        manifest_json: options.manifest_json,\n        tags: options.tags,\n        transformation: transformation\n      }\n    ];\n  });\n};\n\n\nexports.destroy = function destroy(public_id, callback, options = {}) {\n  return call_api(\"destroy\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        invalidate: options.invalidate,\n        public_id: public_id\n      }\n    ];\n  });\n};\n\nexports.rename = function rename(from_public_id, to_public_id, callback, options = {}) {\n  return call_api(\"rename\", callback, options, function () {\n    return [\n      {\n        timestamp: utils.timestamp(),\n        type: options.type,\n        from_public_id: from_public_id,\n        to_public_id: to_public_id,\n        overwrite: options.overwrite,\n        invalidate: options.invalidate,\n        to_type: options.to_type\n      }\n    ];\n  });\n};\n\nconst TEXT_PARAMS = [\"public_id\", \"font_family\", \"font_size\", \"font_color\", \"text_align\", \"font_weight\", \"font_style\", \"background\", \"opacity\", \"text_decoration\", \"font_hinting\", \"font_antialiasing\"];\n\nexports.text = function text(content, callback, options = {}) {\n  return call_api(\"text\", callback, options, function () {\n    let textParams = pickOnlyExistingValues(options, ...TEXT_PARAMS);\n    let params = {\n      timestamp: utils.timestamp(),\n      text: content,\n      ...textParams\n    };\n\n    return [params];\n  });\n};\n\n/**\n * Generate a sprite by merging multiple images into a single large image for reducing network overhead and bypassing\n * download limitations.\n *\n * The process produces 2 files as follows:\n * - A single image file containing all the images with the specified tag (PNG by default).\n * - A CSS file that includes the style class names and the location of the individual images in the sprite.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.generate_sprite = function generate_sprite(tag, callback, options = {}) {\n  return call_api(\"sprite\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\n\n/**\n * Returns a signed url to download a sprite\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_generated_sprite = function download_generated_sprite(tag, options = {}) {\n  return utils.api_download_url(\"sprite\", utils.build_multi_and_sprite_params(tag, options), options);\n}\n\n/**\n * Returns a signed url to download a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from\n * multiple image assets.\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @returns {string}\n */\nexports.download_multi = function download_multi(tag, options = {}) {\n  return utils.api_download_url(\"multi\", utils.build_multi_and_sprite_params(tag, options), options);\n}\n\n/**\n * Creates either a single animated image (GIF, PNG or WebP), video (MP4 or WebM) or a single PDF from multiple image\n * assets.\n *\n * Each asset is included as a single frame of the resulting animated image/video, or a page of the PDF (sorted\n * alphabetically by their Public ID).\n *\n * @param {String|Object} tag     A string specifying a tag that indicates which images to include or an object\n *                                which includes options and image URLs.\n * @param {Function}     callback   Callback function\n * @param {Object}       options  Configuration options. If options are passed as the first parameter, this parameter\n *                                should be empty\n *\n * @return {Object}\n */\nexports.multi = function multi(tag, callback, options = {}) {\n  return call_api(\"multi\", callback, options, function () {\n    return [utils.build_multi_and_sprite_params(tag, options)];\n  });\n};\n\nexports.explode = function explode(public_id, callback, options = {}) {\n  return call_api(\"explode\", callback, options, function () {\n    const transformation = utils.generate_transformation_string(extend({}, options));\n    return [\n      {\n        timestamp: utils.timestamp(),\n        public_id: public_id,\n        transformation: transformation,\n        format: options.format,\n        type: options.type,\n        notification_url: options.notification_url\n      }\n    ];\n  });\n};\n\n/**\n *\n * @param {String}          tag                  The tag or tags to assign. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids           A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.add_tag = function add_tag(tag, public_ids = [], callback, options = {}) {\n  const exclusive = utils.option_consume(\"exclusive\", options);\n  const command = exclusive ? \"set_exclusive\" : \"add\";\n  return call_tags_api(tag, command, public_ids, callback, options);\n};\n\n\n/**\n * @param {String}          tag                  The tag or tags to remove. Can specify multiple\n *                                               tags in a single string, separated by commas - \"t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11\".\n *\n * @param {Array}          public_ids            A list of public IDs (up to 1000) of assets uploaded to Cloudinary.\n *\n * @param {Function}        callback             Callback function\n *\n * @param {Object}          options              Configuration options may include 'exclusive' (boolean) which causes\n *                                               clearing this tag from all other resources\n * @return {Object}\n */\nexports.remove_tag = function remove_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"remove\", public_ids, callback, options);\n};\n\nexports.remove_all_tags = function remove_all_tags(public_ids = [], callback, options = {}) {\n  return call_tags_api(null, \"remove_all\", public_ids, callback, options);\n};\n\nexports.replace_tag = function replace_tag(tag, public_ids = [], callback, options = {}) {\n  return call_tags_api(tag, \"replace\", public_ids, callback, options);\n};\n\nfunction call_tags_api(tag, command, public_ids = [], callback, options = {}) {\n  return call_api(\"tags\", callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (tag != null) {\n      params.tag = tag;\n    }\n    return [params];\n  });\n}\n\nexports.add_context = function add_context(context, public_ids = [], callback, options = {}) {\n  return call_context_api(context, 'add', public_ids, callback, options);\n};\n\nexports.remove_all_context = function remove_all_context(public_ids = [], callback, options = {}) {\n  return call_context_api(null, 'remove_all', public_ids, callback, options);\n};\n\nfunction call_context_api(context, command, public_ids = [], callback, options = {}) {\n  return call_api('context', callback, options, function () {\n    let params = {\n      timestamp: utils.timestamp(),\n      public_ids: utils.build_array(public_ids),\n      command: command,\n      type: options.type\n    };\n    if (context != null) {\n      params.context = utils.encode_context(context);\n    }\n    return [params];\n  });\n}\n\n/**\n * Cache (part of) the upload results.\n * @param result\n * @param {object} options\n * @param {string} options.type\n * @param {string} options.resource_type\n */\nfunction cacheResults(result, { type, resource_type }) {\n  if (result.responsive_breakpoints) {\n    result.responsive_breakpoints.forEach(\n      ({ transformation,\n        url,\n        breakpoints }) => Cache.set(\n        result.public_id,\n        { type, resource_type, raw_transformation: transformation, format: extname(breakpoints[0].url).slice(1) },\n        breakpoints.map(i => i.width)\n      )\n    );\n  }\n}\n\n\nfunction parseResult(buffer, res) {\n  let result = '';\n  try {\n    result = JSON.parse(buffer);\n    if (result.error && !result.error.name) {\n      result.error.name = \"Error\";\n    }\n  } catch (jsonError) {\n    result = {\n      error: {\n        message: `Server return invalid JSON response. Status Code ${res.statusCode}. ${jsonError}`,\n        name: \"Error\"\n      }\n    };\n  }\n  return result;\n}\n\nfunction call_api(action, callback, options, get_params) {\n  if (typeof callback !== \"function\") {\n    callback = function () {};\n  }\n\n  const USE_PROMISES = !options.disable_promises;\n\n  let deferred = Q.defer();\n  if (options == null) {\n    options = {};\n  }\n  let [params, unsigned_params, file] = get_params.call();\n  params = utils.process_request_params(params, options);\n  params = extend(params, unsigned_params);\n  let api_url = utils.api_url(action, options);\n  let boundary = utils.random_public_id();\n  let errorRaised = false;\n  let handle_response = function (res) {\n    // let buffer;\n    if (errorRaised) {\n\n      // Already reported\n    } else if (res.error) {\n      errorRaised = true;\n\n      if (USE_PROMISES) {\n        deferred.reject(res);\n      }\n      callback(res);\n    } else if (includes([200, 400, 401, 404, 420, 500], res.statusCode)) {\n      let buffer = \"\";\n      res.on(\"data\", (d) => {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", () => {\n        let result;\n        if (errorRaised) {\n          return;\n        }\n        result = parseResult(buffer, res);\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n          if (USE_PROMISES) {\n            deferred.reject(result.error);\n          }\n        } else {\n          cacheResults(result, options);\n          if (USE_PROMISES) {\n            deferred.resolve(result);\n          }\n        }\n        callback(result);\n      });\n      res.on(\"error\", (error) => {\n        errorRaised = true;\n        if (USE_PROMISES) {\n          deferred.reject(error);\n        }\n        callback({ error });\n      });\n    } else {\n      let error = {\n        message: `Server returned unexpected status code - ${res.statusCode}`,\n        http_code: res.statusCode,\n        name: \"UnexpectedResponse\"\n      };\n      if (USE_PROMISES) {\n        deferred.reject(error);\n      }\n      callback({ error });\n    }\n  };\n  let post_data = utils.hashToParameters(params)\n    .filter(([key, value]) => value != null)\n    .map(\n      ([key, value]) => Buffer.from(encodeFieldPart(boundary, key, value), 'utf8')\n    );\n  let result = post(api_url, post_data, boundary, file, handle_response, options);\n  if (isObject(result)) {\n    return result;\n  }\n\n  if (USE_PROMISES) {\n    return deferred.promise;\n  }\n}\n\nfunction post(url, post_data, boundary, file, callback, options) {\n  let file_header;\n  let finish_buffer = Buffer.from(\"--\" + boundary + \"--\", 'ascii');\n  let oauth_token = options.oauth_token || config().oauth_token;\n  if ((file != null) || options.stream) {\n    // eslint-disable-next-line no-nested-ternary\n    let filename = options.stream ? options.filename ? options.filename : \"file\" : basename(file);\n    file_header = Buffer.from(encodeFilePart(boundary, 'application/octet-stream', 'file', filename), 'binary');\n  }\n  let post_options = urlLib.parse(url);\n  let headers = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'User-Agent': utils.getUserAgent()\n  };\n  if (options.content_range != null) {\n    headers['Content-Range'] = options.content_range;\n  }\n  if (options.x_unique_upload_id != null) {\n    headers['X-Unique-Upload-Id'] = options.x_unique_upload_id;\n  }\n  if (options.extra_headers !== null) {\n    headers = merge(headers, options.extra_headers);\n  }\n  if (oauth_token != null) {\n    headers.Authorization = `Bearer ${oauth_token}`;\n  }\n\n  post_options = extend(post_options, {\n    method: 'POST',\n    headers: headers\n  });\n  if (options.agent != null) {\n    post_options.agent = options.agent;\n  }\n  let proxy = options.api_proxy || config().api_proxy;\n  if (!isEmpty(proxy)) {\n    if (!post_options.agent) {\n      if (ProxyAgent === null) {\n        throw new Error(\"Proxy value is set, but `proxy-agent` is not installed, please install `proxy-agent` module.\")\n      }\n      post_options.agent = new ProxyAgent(proxy);\n    } else {\n      console.warn(\"Proxy is set, but request uses a custom agent, proxy is ignored.\");\n    }\n  }\n\n  let post_request = https.request(post_options, callback);\n  let upload_stream = new UploadStream({ boundary });\n  upload_stream.pipe(post_request);\n  let timeout = false;\n  post_request.on(\"error\", function (error) {\n    if (timeout) {\n      error = {\n        message: \"Request Timeout\",\n        http_code: 499,\n        name: \"TimeoutError\"\n      };\n    }\n    return callback({ error });\n  });\n  post_request.setTimeout(options.timeout != null ? options.timeout : 60000, function () {\n    timeout = true;\n    return post_request.abort();\n  });\n  post_data.forEach(postDatum => post_request.write(postDatum));\n  if (options.stream) {\n    post_request.write(file_header);\n    return upload_stream;\n  }\n  if (file != null) {\n    post_request.write(file_header);\n    fs.createReadStream(file).on('error', function (error) {\n      callback({\n        error: error\n      });\n      return post_request.abort();\n    }).pipe(upload_stream);\n  } else {\n    post_request.write(finish_buffer);\n    post_request.end();\n  }\n  return true;\n}\n\nfunction encodeFieldPart(boundary, name, value) {\n  return [\n    `--${boundary}`,\n    `Content-Disposition: form-data; name=\"${name}\"`,\n    '',\n    value,\n    ''\n  ].join(\"\\r\\n\");\n}\n\nfunction encodeFilePart(boundary, type, name, filename) {\n  return [\n    `--${boundary}`,\n    `Content-Disposition: form-data; name=\"${name}\"; filename=\"${filename}\"`,\n    `Content-Type: ${type}`,\n    '',\n    ''\n  ].join(\"\\r\\n\");\n}\n\nexports.direct_upload = function direct_upload(callback_url, options = {}) {\n  let params = build_upload_params(extend({\n    callback: callback_url\n  }, options));\n  params = utils.process_request_params(params, options);\n  let api_url = utils.api_url(\"upload\", options);\n  return {\n    hidden_fields: params,\n    form_attrs: {\n      action: api_url,\n      method: \"POST\",\n      enctype: \"multipart/form-data\"\n    }\n  };\n};\n\nexports.upload_tag_params = function upload_tag_params(options = {}) {\n  let params = build_upload_params(options);\n  params = utils.process_request_params(params, options);\n  return JSON.stringify(params);\n};\n\nexports.upload_url = function upload_url(options = {}) {\n  if (options.resource_type == null) {\n    options.resource_type = \"auto\";\n  }\n  return utils.api_url(\"upload\", options);\n};\n\nexports.image_upload_tag = function image_upload_tag(field, options = {}) {\n  let html_options = options.html || {};\n  let tag_options = extend({\n    type: \"file\",\n    name: \"file\",\n    \"data-url\": exports.upload_url(options),\n    \"data-form-data\": exports.upload_tag_params(options),\n    \"data-cloudinary-field\": field,\n    \"data-max-chunk-size\": options.chunk_size,\n    \"class\": [html_options.class, \"cloudinary-fileupload\"].join(\" \")\n  }, html_options);\n  return `<input ${utils.html_attrs(tag_options)}/>`;\n};\n\nexports.unsigned_image_upload_tag = function unsigned_image_upload_tag(field, upload_preset, options = {}) {\n  return exports.image_upload_tag(field, merge(options, {\n    unsigned: true,\n    upload_preset: upload_preset\n  }));\n};\n\n\n/**\n * Populates metadata fields with the given values. Existing values will be overwritten.\n *\n * @param {Object}   metadata   A list of custom metadata fields (by external_id) and the values to assign to each\n * @param {Array}    public_ids The public IDs of the resources to update\n * @param {Function} callback   Callback function\n * @param {Object}   options    Configuration options\n *\n * @return {Object}\n */\nexports.update_metadata = function update_metadata(metadata, public_ids, callback, options = {}) {\n  return call_api(\"metadata\", callback, options, function () {\n    let params = {\n      metadata: utils.encode_context(metadata),\n      public_ids: utils.build_array(public_ids),\n      timestamp: utils.timestamp(),\n      type: options.type,\n      clear_invalid: options.clear_invalid\n    };\n    return [params];\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}