{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Represents a layer in a Photoshop document.\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\nclass GetLayerAction extends Action {\n  constructor() {\n    super();\n    this.qualifierValue = new QualifierValue();\n    this.qualifierValue.delimiter = ';';\n  }\n  /**\n   * @description deliver an image containing only specified layer of a Photoshop image from The layer index\n   * @param {string|number} from the index of the layer\n   */\n  byIndex(from) {\n    this.qualifierValue.addValue(from);\n    return this;\n  }\n  /**\n   * @description deliver an image containing only specified range of layers of a Photoshop image\n   * @param {string|number} from The layer number\n   * @param {string|number} to The layer number\n   */\n  byRange(from, to) {\n    const range = new QualifierValue(from);\n    range.addValue(to);\n    range.delimiter = '-';\n    this.qualifierValue.addValue(range);\n    return this;\n  }\n  /**\n   * @description deliver an image containing only specified layer by name of a Photoshop image\n   * @param {string|number} name The layer by name\n   */\n  byName(name) {\n    this.name = name;\n    this.qualifierValue.addValue(name);\n    return this;\n  }\n  prepareQualifiers() {\n    let qualifierValue = this.qualifierValue;\n    if (this.name) {\n      qualifierValue = new QualifierValue(['name', this.qualifierValue]).setDelimiter(':');\n    }\n    this.addQualifier(new Qualifier('pg', qualifierValue));\n    return this;\n  }\n}\nexport { GetLayerAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","GetLayerAction","constructor","qualifierValue","delimiter","byIndex","from","addValue","byRange","to","range","byName","name","prepareQualifiers","setDelimiter","addQualifier"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/psdTools/GetLayerAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Represents a layer in a Photoshop document.\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\nclass GetLayerAction extends Action {\n    constructor() {\n        super();\n        this.qualifierValue = new QualifierValue();\n        this.qualifierValue.delimiter = ';';\n    }\n    /**\n     * @description deliver an image containing only specified layer of a Photoshop image from The layer index\n     * @param {string|number} from the index of the layer\n     */\n    byIndex(from) {\n        this.qualifierValue.addValue(from);\n        return this;\n    }\n    /**\n     * @description deliver an image containing only specified range of layers of a Photoshop image\n     * @param {string|number} from The layer number\n     * @param {string|number} to The layer number\n     */\n    byRange(from, to) {\n        const range = new QualifierValue(from);\n        range.addValue(to);\n        range.delimiter = '-';\n        this.qualifierValue.addValue(range);\n        return this;\n    }\n    /**\n     * @description deliver an image containing only specified layer by name of a Photoshop image\n     * @param {string|number} name The layer by name\n     */\n    byName(name) {\n        this.name = name;\n        this.qualifierValue.addValue(name);\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue = this.qualifierValue;\n        if (this.name) {\n            qualifierValue = new QualifierValue(['name', this.qualifierValue]).setDelimiter(':');\n        }\n        this.addQualifier(new Qualifier('pg', qualifierValue));\n        return this;\n    }\n}\nexport { GetLayerAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,4CAA4C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASH,MAAM,CAAC;EAChCI,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,cAAc,GAAG,IAAIH,cAAc,EAAE;IAC1C,IAAI,CAACG,cAAc,CAACC,SAAS,GAAG,GAAG;EACvC;EACA;AACJ;AACA;AACA;EACIC,OAAO,CAACC,IAAI,EAAE;IACV,IAAI,CAACH,cAAc,CAACI,QAAQ,CAACD,IAAI,CAAC;IAClC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,OAAO,CAACF,IAAI,EAAEG,EAAE,EAAE;IACd,MAAMC,KAAK,GAAG,IAAIV,cAAc,CAACM,IAAI,CAAC;IACtCI,KAAK,CAACH,QAAQ,CAACE,EAAE,CAAC;IAClBC,KAAK,CAACN,SAAS,GAAG,GAAG;IACrB,IAAI,CAACD,cAAc,CAACI,QAAQ,CAACG,KAAK,CAAC;IACnC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,MAAM,CAACC,IAAI,EAAE;IACT,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACT,cAAc,CAACI,QAAQ,CAACK,IAAI,CAAC;IAClC,OAAO,IAAI;EACf;EACAC,iBAAiB,GAAG;IAChB,IAAIV,cAAc,GAAG,IAAI,CAACA,cAAc;IACxC,IAAI,IAAI,CAACS,IAAI,EAAE;MACXT,cAAc,GAAG,IAAIH,cAAc,CAAC,CAAC,MAAM,EAAE,IAAI,CAACG,cAAc,CAAC,CAAC,CAACW,YAAY,CAAC,GAAG,CAAC;IACxF;IACA,IAAI,CAACC,YAAY,CAAC,IAAIhB,SAAS,CAAC,IAAI,EAAEI,cAAc,CAAC,CAAC;IACtD,OAAO,IAAI;EACf;AACJ;AACA,SAASF,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}