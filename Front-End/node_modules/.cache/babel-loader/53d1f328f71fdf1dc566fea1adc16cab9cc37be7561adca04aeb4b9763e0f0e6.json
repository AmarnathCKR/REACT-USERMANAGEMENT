{"ast":null,"code":"var aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar call = require('../internals/function-call');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar $TypeError = TypeError;\nvar max = Math.max;\nvar SetRecord = function (set, size, has, keys) {\n  this.set = set;\n  this.size = size;\n  this.has = has;\n  this.keys = keys;\n};\nSetRecord.prototype = {\n  getIterator: function () {\n    return anObject(call(this.keys, this.set));\n  },\n  includes: function (it) {\n    return call(this.has, this.set, it);\n  }\n};\n\n// `GetSetRecord` abstract operation\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\nmodule.exports = function (obj) {\n  anObject(obj);\n  var numSize = +obj.size;\n  // NOTE: If size is undefined, then numSize will be NaN\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (numSize != numSize) throw $TypeError('Invalid size');\n  return new SetRecord(obj, max(toIntegerOrInfinity(numSize), 0), aCallable(obj.has), aCallable(obj.keys));\n};","map":{"version":3,"names":["aCallable","require","anObject","call","toIntegerOrInfinity","$TypeError","TypeError","max","Math","SetRecord","set","size","has","keys","prototype","getIterator","includes","it","module","exports","obj","numSize"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/internals/get-set-record.js"],"sourcesContent":["var aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar call = require('../internals/function-call');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $TypeError = TypeError;\nvar max = Math.max;\n\nvar SetRecord = function (set, size, has, keys) {\n  this.set = set;\n  this.size = size;\n  this.has = has;\n  this.keys = keys;\n};\n\nSetRecord.prototype = {\n  getIterator: function () {\n    return anObject(call(this.keys, this.set));\n  },\n  includes: function (it) {\n    return call(this.has, this.set, it);\n  }\n};\n\n// `GetSetRecord` abstract operation\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\nmodule.exports = function (obj) {\n  anObject(obj);\n  var numSize = +obj.size;\n  // NOTE: If size is undefined, then numSize will be NaN\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (numSize != numSize) throw $TypeError('Invalid size');\n  return new SetRecord(\n    obj,\n    max(toIntegerOrInfinity(numSize), 0),\n    aCallable(obj.has),\n    aCallable(obj.keys)\n  );\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIE,IAAI,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AAExE,IAAII,UAAU,GAAGC,SAAS;AAC1B,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG;AAElB,IAAIE,SAAS,GAAG,UAAUC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC9C,IAAI,CAACH,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,IAAI,GAAGA,IAAI;AAClB,CAAC;AAEDJ,SAAS,CAACK,SAAS,GAAG;EACpBC,WAAW,EAAE,YAAY;IACvB,OAAOb,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACU,IAAI,EAAE,IAAI,CAACH,GAAG,CAAC,CAAC;EAC5C,CAAC;EACDM,QAAQ,EAAE,UAAUC,EAAE,EAAE;IACtB,OAAOd,IAAI,CAAC,IAAI,CAACS,GAAG,EAAE,IAAI,CAACF,GAAG,EAAEO,EAAE,CAAC;EACrC;AACF,CAAC;;AAED;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAE;EAC9BlB,QAAQ,CAACkB,GAAG,CAAC;EACb,IAAIC,OAAO,GAAG,CAACD,GAAG,CAACT,IAAI;EACvB;EACA;EACA,IAAIU,OAAO,IAAIA,OAAO,EAAE,MAAMhB,UAAU,CAAC,cAAc,CAAC;EACxD,OAAO,IAAII,SAAS,CAClBW,GAAG,EACHb,GAAG,CAACH,mBAAmB,CAACiB,OAAO,CAAC,EAAE,CAAC,CAAC,EACpCrB,SAAS,CAACoB,GAAG,CAACR,GAAG,CAAC,EAClBZ,SAAS,CAACoB,GAAG,CAACP,IAAI,CAAC,CACpB;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}