{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar $Array = Array;\nvar max = Math.max;\nvar min = Math.min;\n\n// `Array.prototype.toSpliced` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toSpliced\n$({\n  target: 'Array',\n  proto: true\n}, {\n  toSpliced: function toSpliced(start, deleteCount /* , ...items */) {\n    var O = toIndexedObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var k = 0;\n    var insertCount, actualDeleteCount, newLen, A;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    newLen = doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);\n    A = $Array(newLen);\n    for (; k < actualStart; k++) A[k] = O[k];\n    for (; k < actualStart + insertCount; k++) A[k] = arguments[k - actualStart + 2];\n    for (; k < newLen; k++) A[k] = O[k + actualDeleteCount - insertCount];\n    return A;\n  }\n});\naddToUnscopables('toSpliced');","map":{"version":3,"names":["$","require","addToUnscopables","doesNotExceedSafeInteger","lengthOfArrayLike","toAbsoluteIndex","toIndexedObject","toIntegerOrInfinity","$Array","Array","max","Math","min","target","proto","toSpliced","start","deleteCount","O","len","actualStart","argumentsLength","arguments","length","k","insertCount","actualDeleteCount","newLen","A"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/modules/es.array.to-spliced.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $Array = Array;\nvar max = Math.max;\nvar min = Math.min;\n\n// `Array.prototype.toSpliced` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toSpliced\n$({ target: 'Array', proto: true }, {\n  toSpliced: function toSpliced(start, deleteCount /* , ...items */) {\n    var O = toIndexedObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var k = 0;\n    var insertCount, actualDeleteCount, newLen, A;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    newLen = doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);\n    A = $Array(newLen);\n\n    for (; k < actualStart; k++) A[k] = O[k];\n    for (; k < actualStart + insertCount; k++) A[k] = arguments[k - actualStart + 2];\n    for (; k < newLen; k++) A[k] = O[k + actualDeleteCount - insertCount];\n\n    return A;\n  }\n});\n\naddToUnscopables('toSpliced');\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,iCAAiC,CAAC;AACjE,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,2CAA2C,CAAC;AACnF,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,mCAAmC,CAAC;AACpE,IAAII,eAAe,GAAGJ,OAAO,CAAC,gCAAgC,CAAC;AAC/D,IAAIK,eAAe,GAAGL,OAAO,CAAC,gCAAgC,CAAC;AAC/D,IAAIM,mBAAmB,GAAGN,OAAO,CAAC,qCAAqC,CAAC;AAExE,IAAIO,MAAM,GAAGC,KAAK;AAClB,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG;AAClB,IAAIE,GAAG,GAAGD,IAAI,CAACC,GAAG;;AAElB;AACA;AACAZ,CAAC,CAAC;EAAEa,MAAM,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAK,CAAC,EAAE;EAClCC,SAAS,EAAE,SAASA,SAAS,CAACC,KAAK,EAAEC,WAAW,CAAC,kBAAkB;IACjE,IAAIC,CAAC,GAAGZ,eAAe,CAAC,IAAI,CAAC;IAC7B,IAAIa,GAAG,GAAGf,iBAAiB,CAACc,CAAC,CAAC;IAC9B,IAAIE,WAAW,GAAGf,eAAe,CAACW,KAAK,EAAEG,GAAG,CAAC;IAC7C,IAAIE,eAAe,GAAGC,SAAS,CAACC,MAAM;IACtC,IAAIC,CAAC,GAAG,CAAC;IACT,IAAIC,WAAW,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,CAAC;IAC7C,IAAIP,eAAe,KAAK,CAAC,EAAE;MACzBI,WAAW,GAAGC,iBAAiB,GAAG,CAAC;IACrC,CAAC,MAAM,IAAIL,eAAe,KAAK,CAAC,EAAE;MAChCI,WAAW,GAAG,CAAC;MACfC,iBAAiB,GAAGP,GAAG,GAAGC,WAAW;IACvC,CAAC,MAAM;MACLK,WAAW,GAAGJ,eAAe,GAAG,CAAC;MACjCK,iBAAiB,GAAGd,GAAG,CAACF,GAAG,CAACH,mBAAmB,CAACU,WAAW,CAAC,EAAE,CAAC,CAAC,EAAEE,GAAG,GAAGC,WAAW,CAAC;IACtF;IACAO,MAAM,GAAGxB,wBAAwB,CAACgB,GAAG,GAAGM,WAAW,GAAGC,iBAAiB,CAAC;IACxEE,CAAC,GAAGpB,MAAM,CAACmB,MAAM,CAAC;IAElB,OAAOH,CAAC,GAAGJ,WAAW,EAAEI,CAAC,EAAE,EAAEI,CAAC,CAACJ,CAAC,CAAC,GAAGN,CAAC,CAACM,CAAC,CAAC;IACxC,OAAOA,CAAC,GAAGJ,WAAW,GAAGK,WAAW,EAAED,CAAC,EAAE,EAAEI,CAAC,CAACJ,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAGJ,WAAW,GAAG,CAAC,CAAC;IAChF,OAAOI,CAAC,GAAGG,MAAM,EAAEH,CAAC,EAAE,EAAEI,CAAC,CAACJ,CAAC,CAAC,GAAGN,CAAC,CAACM,CAAC,GAAGE,iBAAiB,GAAGD,WAAW,CAAC;IAErE,OAAOG,CAAC;EACV;AACF,CAAC,CAAC;AAEF1B,gBAAgB,CAAC,WAAW,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}