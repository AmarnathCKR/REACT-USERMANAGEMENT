{"ast":null,"code":"var bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aConstructor = require('../internals/a-constructor');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\nvar toBigInt = require('../internals/to-big-int');\nmodule.exports = function from(source /* , mapfn, thisArg */) {\n  var C = aConstructor(this);\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, thisIsBigIntArray, value, step, iterator, next;\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = call(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2]);\n  }\n  length = lengthOfArrayLike(O);\n  result = new (aTypedArrayConstructor(C))(length);\n  thisIsBigIntArray = isBigIntArray(result);\n  for (i = 0; length > i; i++) {\n    value = mapping ? mapfn(O[i], i) : O[i];\n    // FF30- typed arrays doesn't properly convert objects to typed array values\n    result[i] = thisIsBigIntArray ? toBigInt(value) : +value;\n  }\n  return result;\n};","map":{"version":3,"names":["bind","require","call","aConstructor","toObject","lengthOfArrayLike","getIterator","getIteratorMethod","isArrayIteratorMethod","isBigIntArray","aTypedArrayConstructor","toBigInt","module","exports","from","source","C","O","argumentsLength","arguments","length","mapfn","undefined","mapping","iteratorMethod","i","result","thisIsBigIntArray","value","step","iterator","next","done","push"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/internals/typed-array-from.js"],"sourcesContent":["var bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aConstructor = require('../internals/a-constructor');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\nvar toBigInt = require('../internals/to-big-int');\n\nmodule.exports = function from(source /* , mapfn, thisArg */) {\n  var C = aConstructor(this);\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, thisIsBigIntArray, value, step, iterator, next;\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = call(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2]);\n  }\n  length = lengthOfArrayLike(O);\n  result = new (aTypedArrayConstructor(C))(length);\n  thisIsBigIntArray = isBigIntArray(result);\n  for (i = 0; length > i; i++) {\n    value = mapping ? mapfn(O[i], i) : O[i];\n    // FF30- typed arrays doesn't properly convert objects to typed array values\n    result[i] = thisIsBigIntArray ? toBigInt(value) : +value;\n  }\n  return result;\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,oCAAoC,CAAC;AACxD,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIE,YAAY,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AACxD,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mCAAmC,CAAC;AACpE,IAAIK,WAAW,GAAGL,OAAO,CAAC,2BAA2B,CAAC;AACtD,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,kCAAkC,CAAC;AACnE,IAAIO,qBAAqB,GAAGP,OAAO,CAAC,uCAAuC,CAAC;AAC5E,IAAIQ,aAAa,GAAGR,OAAO,CAAC,+BAA+B,CAAC;AAC5D,IAAIS,sBAAsB,GAAGT,OAAO,CAAC,qCAAqC,CAAC,CAACS,sBAAsB;AAClG,IAAIC,QAAQ,GAAGV,OAAO,CAAC,yBAAyB,CAAC;AAEjDW,MAAM,CAACC,OAAO,GAAG,SAASC,IAAI,CAACC,MAAM,CAAC,wBAAwB;EAC5D,IAAIC,CAAC,GAAGb,YAAY,CAAC,IAAI,CAAC;EAC1B,IAAIc,CAAC,GAAGb,QAAQ,CAACW,MAAM,CAAC;EACxB,IAAIG,eAAe,GAAGC,SAAS,CAACC,MAAM;EACtC,IAAIC,KAAK,GAAGH,eAAe,GAAG,CAAC,GAAGC,SAAS,CAAC,CAAC,CAAC,GAAGG,SAAS;EAC1D,IAAIC,OAAO,GAAGF,KAAK,KAAKC,SAAS;EACjC,IAAIE,cAAc,GAAGjB,iBAAiB,CAACU,CAAC,CAAC;EACzC,IAAIQ,CAAC,EAAEL,MAAM,EAAEM,MAAM,EAAEC,iBAAiB,EAAEC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI;EACrE,IAAIP,cAAc,IAAI,CAAChB,qBAAqB,CAACgB,cAAc,CAAC,EAAE;IAC5DM,QAAQ,GAAGxB,WAAW,CAACW,CAAC,EAAEO,cAAc,CAAC;IACzCO,IAAI,GAAGD,QAAQ,CAACC,IAAI;IACpBd,CAAC,GAAG,EAAE;IACN,OAAO,CAAC,CAACY,IAAI,GAAG3B,IAAI,CAAC6B,IAAI,EAAED,QAAQ,CAAC,EAAEE,IAAI,EAAE;MAC1Cf,CAAC,CAACgB,IAAI,CAACJ,IAAI,CAACD,KAAK,CAAC;IACpB;EACF;EACA,IAAIL,OAAO,IAAIL,eAAe,GAAG,CAAC,EAAE;IAClCG,KAAK,GAAGrB,IAAI,CAACqB,KAAK,EAAEF,SAAS,CAAC,CAAC,CAAC,CAAC;EACnC;EACAC,MAAM,GAAGf,iBAAiB,CAACY,CAAC,CAAC;EAC7BS,MAAM,GAAG,KAAKhB,sBAAsB,CAACM,CAAC,CAAC,EAAEI,MAAM,CAAC;EAChDO,iBAAiB,GAAGlB,aAAa,CAACiB,MAAM,CAAC;EACzC,KAAKD,CAAC,GAAG,CAAC,EAAEL,MAAM,GAAGK,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3BG,KAAK,GAAGL,OAAO,GAAGF,KAAK,CAACJ,CAAC,CAACQ,CAAC,CAAC,EAAEA,CAAC,CAAC,GAAGR,CAAC,CAACQ,CAAC,CAAC;IACvC;IACAC,MAAM,CAACD,CAAC,CAAC,GAAGE,iBAAiB,GAAGhB,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAACA,KAAK;EAC1D;EACA,OAAOF,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}