{"ast":null,"code":"import Expression from './expression.js';\n/**\n * Represents a transformation condition.\n * @param {string} conditionStr - a condition in string format\n * @class Condition\n * @example\n * // normally this class is not instantiated directly\n * var tr = cloudinary.Transformation.new()\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n * var tr = cloudinary.Transformation.new()\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n */\nclass Condition extends Expression {\n  constructor(conditionStr) {\n    super(conditionStr);\n  }\n  /**\n   * @function Condition#height\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  height(operator, value) {\n    return this.predicate(\"h\", operator, value);\n  }\n  /**\n   * @function Condition#width\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  width(operator, value) {\n    return this.predicate(\"w\", operator, value);\n  }\n  /**\n   * @function Condition#aspectRatio\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  aspectRatio(operator, value) {\n    return this.predicate(\"ar\", operator, value);\n  }\n  /**\n   * @function Condition#pages\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  pageCount(operator, value) {\n    return this.predicate(\"pc\", operator, value);\n  }\n  /**\n   * @function Condition#faces\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  faceCount(operator, value) {\n    return this.predicate(\"fc\", operator, value);\n  }\n  /**\n   * @function Condition#duration\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  duration(operator, value) {\n    return this.predicate(\"du\", operator, value);\n  }\n  /**\n   * @function Condition#initialDuration\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n  initialDuration(operator, value) {\n    return this.predicate(\"idu\", operator, value);\n  }\n}\nexport default Condition;","map":{"version":3,"names":["Expression","Condition","constructor","conditionStr","height","operator","value","predicate","width","aspectRatio","pageCount","faceCount","duration","initialDuration"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/backwards/condition.js"],"sourcesContent":["import Expression from './expression.js';\n/**\n * Represents a transformation condition.\n * @param {string} conditionStr - a condition in string format\n * @class Condition\n * @example\n * // normally this class is not instantiated directly\n * var tr = cloudinary.Transformation.new()\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n * var tr = cloudinary.Transformation.new()\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n */\nclass Condition extends Expression {\n    constructor(conditionStr) {\n        super(conditionStr);\n    }\n    /**\n     * @function Condition#height\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    height(operator, value) {\n        return this.predicate(\"h\", operator, value);\n    }\n    /**\n     * @function Condition#width\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    width(operator, value) {\n        return this.predicate(\"w\", operator, value);\n    }\n    /**\n     * @function Condition#aspectRatio\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    aspectRatio(operator, value) {\n        return this.predicate(\"ar\", operator, value);\n    }\n    /**\n     * @function Condition#pages\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    pageCount(operator, value) {\n        return this.predicate(\"pc\", operator, value);\n    }\n    /**\n     * @function Condition#faces\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    faceCount(operator, value) {\n        return this.predicate(\"fc\", operator, value);\n    }\n    /**\n     * @function Condition#duration\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    duration(operator, value) {\n        return this.predicate(\"du\", operator, value);\n    }\n    /**\n     * @function Condition#initialDuration\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    initialDuration(operator, value) {\n        return this.predicate(\"idu\", operator, value);\n    }\n}\nexport default Condition;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASD,UAAU,CAAC;EAC/BE,WAAW,CAACC,YAAY,EAAE;IACtB,KAAK,CAACA,YAAY,CAAC;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,MAAM,CAACC,QAAQ,EAAEC,KAAK,EAAE;IACpB,OAAO,IAAI,CAACC,SAAS,CAAC,GAAG,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,KAAK,CAACH,QAAQ,EAAEC,KAAK,EAAE;IACnB,OAAO,IAAI,CAACC,SAAS,CAAC,GAAG,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,WAAW,CAACJ,QAAQ,EAAEC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACC,SAAS,CAAC,IAAI,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACII,SAAS,CAACL,QAAQ,EAAEC,KAAK,EAAE;IACvB,OAAO,IAAI,CAACC,SAAS,CAAC,IAAI,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIK,SAAS,CAACN,QAAQ,EAAEC,KAAK,EAAE;IACvB,OAAO,IAAI,CAACC,SAAS,CAAC,IAAI,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIM,QAAQ,CAACP,QAAQ,EAAEC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACC,SAAS,CAAC,IAAI,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIO,eAAe,CAACR,QAAQ,EAAEC,KAAK,EAAE;IAC7B,OAAO,IAAI,CAACC,SAAS,CAAC,KAAK,EAAEF,QAAQ,EAAEC,KAAK,CAAC;EACjD;AACJ;AACA,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}