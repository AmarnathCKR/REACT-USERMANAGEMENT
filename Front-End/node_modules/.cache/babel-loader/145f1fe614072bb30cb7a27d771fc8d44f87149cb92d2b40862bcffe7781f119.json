{"ast":null,"code":"let PRELOADED_CLOUDINARY_PATH, config, utils;\nutils = require(\"./utils\");\nconfig = require(\"./config\");\nPRELOADED_CLOUDINARY_PATH = /^([^\\/]+)\\/([^\\/]+)\\/v(\\d+)\\/([^#]+)#([^\\/]+)$/;\nclass PreloadedFile {\n  constructor(file_info) {\n    let matches, public_id_and_format;\n    matches = file_info.match(PRELOADED_CLOUDINARY_PATH);\n    if (!matches) {\n      throw \"Invalid preloaded file info\";\n    }\n    this.resource_type = matches[1];\n    this.type = matches[2];\n    this.version = matches[3];\n    this.filename = matches[4];\n    this.signature = matches[5];\n    public_id_and_format = PreloadedFile.split_format(this.filename);\n    this.public_id = public_id_and_format[0];\n    this.format = public_id_and_format[1];\n  }\n  is_valid() {\n    let expected_signature;\n    expected_signature = utils.api_sign_request({\n      public_id: this.public_id,\n      version: this.version\n    }, config().api_secret);\n    return this.signature === expected_signature;\n  }\n  static split_format(identifier) {\n    let format, last_dot, public_id;\n    last_dot = identifier.lastIndexOf(\".\");\n    if (last_dot === -1) {\n      return [identifier, null];\n    }\n    public_id = identifier.substr(0, last_dot);\n    format = identifier.substr(last_dot + 1);\n    return [public_id, format];\n  }\n  identifier() {\n    return `v${this.version}/${this.filename}`;\n  }\n  toString() {\n    return `${this.resource_type}/${this.type}/v${this.version}/${this.filename}#${this.signature}`;\n  }\n  toJSON() {\n    let result = {};\n    Object.getOwnPropertyNames(this).forEach(key => {\n      let val = this[key];\n      if (typeof val !== 'function') {\n        result[key] = val;\n      }\n    });\n    return result;\n  }\n}\nmodule.exports = PreloadedFile;","map":{"version":3,"names":["PRELOADED_CLOUDINARY_PATH","config","utils","require","PreloadedFile","constructor","file_info","matches","public_id_and_format","match","resource_type","type","version","filename","signature","split_format","public_id","format","is_valid","expected_signature","api_sign_request","api_secret","identifier","last_dot","lastIndexOf","substr","toString","toJSON","result","Object","getOwnPropertyNames","forEach","key","val","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/preloaded_file.js"],"sourcesContent":["let PRELOADED_CLOUDINARY_PATH, config, utils;\n\nutils = require(\"./utils\");\n\nconfig = require(\"./config\");\n\nPRELOADED_CLOUDINARY_PATH = /^([^\\/]+)\\/([^\\/]+)\\/v(\\d+)\\/([^#]+)#([^\\/]+)$/;\n\nclass PreloadedFile {\n  constructor(file_info) {\n    let matches, public_id_and_format;\n    matches = file_info.match(PRELOADED_CLOUDINARY_PATH);\n    if (!matches) {\n      throw \"Invalid preloaded file info\";\n    }\n    this.resource_type = matches[1];\n    this.type = matches[2];\n    this.version = matches[3];\n    this.filename = matches[4];\n    this.signature = matches[5];\n    public_id_and_format = PreloadedFile.split_format(this.filename);\n    this.public_id = public_id_and_format[0];\n    this.format = public_id_and_format[1];\n  }\n\n  is_valid() {\n    let expected_signature;\n    expected_signature = utils.api_sign_request({\n      public_id: this.public_id,\n      version: this.version\n    }, config().api_secret);\n    return this.signature === expected_signature;\n  }\n\n  static split_format(identifier) {\n    let format, last_dot, public_id;\n    last_dot = identifier.lastIndexOf(\".\");\n    if (last_dot === -1) {\n      return [identifier, null];\n    }\n    public_id = identifier.substr(0, last_dot);\n    format = identifier.substr(last_dot + 1);\n    return [public_id, format];\n  }\n\n  identifier() {\n    return `v${this.version}/${this.filename}`;\n  }\n\n  toString() {\n    return `${this.resource_type}/${this.type}/v${this.version}/${this.filename}#${this.signature}`;\n  }\n\n  toJSON() {\n    let result = {};\n    Object.getOwnPropertyNames(this).forEach((key) => {\n      let val = this[key];\n      if (typeof val !== 'function') {\n        result[key] = val;\n      }\n    });\n    return result;\n  }\n}\n\nmodule.exports = PreloadedFile;\n"],"mappings":"AAAA,IAAIA,yBAAyB,EAAEC,MAAM,EAAEC,KAAK;AAE5CA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE1BF,MAAM,GAAGE,OAAO,CAAC,UAAU,CAAC;AAE5BH,yBAAyB,GAAG,gDAAgD;AAE5E,MAAMI,aAAa,CAAC;EAClBC,WAAW,CAACC,SAAS,EAAE;IACrB,IAAIC,OAAO,EAAEC,oBAAoB;IACjCD,OAAO,GAAGD,SAAS,CAACG,KAAK,CAACT,yBAAyB,CAAC;IACpD,IAAI,CAACO,OAAO,EAAE;MACZ,MAAM,6BAA6B;IACrC;IACA,IAAI,CAACG,aAAa,GAAGH,OAAO,CAAC,CAAC,CAAC;IAC/B,IAAI,CAACI,IAAI,GAAGJ,OAAO,CAAC,CAAC,CAAC;IACtB,IAAI,CAACK,OAAO,GAAGL,OAAO,CAAC,CAAC,CAAC;IACzB,IAAI,CAACM,QAAQ,GAAGN,OAAO,CAAC,CAAC,CAAC;IAC1B,IAAI,CAACO,SAAS,GAAGP,OAAO,CAAC,CAAC,CAAC;IAC3BC,oBAAoB,GAAGJ,aAAa,CAACW,YAAY,CAAC,IAAI,CAACF,QAAQ,CAAC;IAChE,IAAI,CAACG,SAAS,GAAGR,oBAAoB,CAAC,CAAC,CAAC;IACxC,IAAI,CAACS,MAAM,GAAGT,oBAAoB,CAAC,CAAC,CAAC;EACvC;EAEAU,QAAQ,GAAG;IACT,IAAIC,kBAAkB;IACtBA,kBAAkB,GAAGjB,KAAK,CAACkB,gBAAgB,CAAC;MAC1CJ,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBJ,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC,EAAEX,MAAM,EAAE,CAACoB,UAAU,CAAC;IACvB,OAAO,IAAI,CAACP,SAAS,KAAKK,kBAAkB;EAC9C;EAEA,OAAOJ,YAAY,CAACO,UAAU,EAAE;IAC9B,IAAIL,MAAM,EAAEM,QAAQ,EAAEP,SAAS;IAC/BO,QAAQ,GAAGD,UAAU,CAACE,WAAW,CAAC,GAAG,CAAC;IACtC,IAAID,QAAQ,KAAK,CAAC,CAAC,EAAE;MACnB,OAAO,CAACD,UAAU,EAAE,IAAI,CAAC;IAC3B;IACAN,SAAS,GAAGM,UAAU,CAACG,MAAM,CAAC,CAAC,EAAEF,QAAQ,CAAC;IAC1CN,MAAM,GAAGK,UAAU,CAACG,MAAM,CAACF,QAAQ,GAAG,CAAC,CAAC;IACxC,OAAO,CAACP,SAAS,EAAEC,MAAM,CAAC;EAC5B;EAEAK,UAAU,GAAG;IACX,OAAQ,IAAG,IAAI,CAACV,OAAQ,IAAG,IAAI,CAACC,QAAS,EAAC;EAC5C;EAEAa,QAAQ,GAAG;IACT,OAAQ,GAAE,IAAI,CAAChB,aAAc,IAAG,IAAI,CAACC,IAAK,KAAI,IAAI,CAACC,OAAQ,IAAG,IAAI,CAACC,QAAS,IAAG,IAAI,CAACC,SAAU,EAAC;EACjG;EAEAa,MAAM,GAAG;IACP,IAAIC,MAAM,GAAG,CAAC,CAAC;IACfC,MAAM,CAACC,mBAAmB,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAK;MAChD,IAAIC,GAAG,GAAG,IAAI,CAACD,GAAG,CAAC;MACnB,IAAI,OAAOC,GAAG,KAAK,UAAU,EAAE;QAC7BL,MAAM,CAACI,GAAG,CAAC,GAAGC,GAAG;MACnB;IACF,CAAC,CAAC;IACF,OAAOL,MAAM;EACf;AACF;AAEAM,MAAM,CAACC,OAAO,GAAG/B,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}