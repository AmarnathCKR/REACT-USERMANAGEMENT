{"ast":null,"code":"/**\n * Assign a value to a nested object\n * @function putNestedValue\n * @param params the parent object - this argument will be modified!\n * @param key key in the form nested[innerkey]\n * @param value the value to assign\n * @return the modified params object\n */\nconst url = require('url');\nconst extend = require(\"lodash/extend\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst entries = require('./utils/entries');\nlet cloudinary_config = void 0;\n\n/**\n * Sets a value in an object using a nested key\n * @param {object} params The object to assign the value in.\n * @param {string} key The key of the value. A period is used to denote inner keys.\n * @param {*} value The value to set.\n * @returns {object} The params argument.\n * @example\n *     let o = {foo: {bar: 1}};\n *     putNestedValue(o, 'foo.bar', 2); // {foo: {bar: 2}}\n *     putNestedValue(o, 'foo.inner.key', 'this creates an inner object');\n *     // {{foo: {bar: 2}, inner: {key: 'this creates an inner object'}}}\n */\nfunction putNestedValue(params, key, value) {\n  let chain = key.split(/[\\[\\]]+/).filter(i => i.length);\n  let outer = params;\n  let lastKey = chain.pop();\n  for (let j = 0; j < chain.length; j++) {\n    let innerKey = chain[j];\n    let inner = outer[innerKey];\n    if (inner == null) {\n      inner = {};\n      outer[innerKey] = inner;\n    }\n    outer = inner;\n  }\n  outer[lastKey] = value;\n  return params;\n}\nfunction parseCloudinaryConfigFromEnvURL(ENV_STR) {\n  let conf = {};\n  let uri = url.parse(ENV_STR, true);\n  if (uri.protocol === 'cloudinary:') {\n    conf = Object.assign({}, conf, {\n      cloud_name: uri.host,\n      api_key: uri.auth && uri.auth.split(\":\")[0],\n      api_secret: uri.auth && uri.auth.split(\":\")[1],\n      private_cdn: uri.pathname != null,\n      secure_distribution: uri.pathname && uri.pathname.substring(1)\n    });\n  } else if (uri.protocol === 'account:') {\n    conf = Object.assign({}, conf, {\n      account_id: uri.host,\n      provisioning_api_key: uri.auth && uri.auth.split(\":\")[0],\n      provisioning_api_secret: uri.auth && uri.auth.split(\":\")[1]\n    });\n  }\n  return conf;\n}\nfunction extendCloudinaryConfigFromQuery(ENV_URL) {\n  let confToExtend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let uri = url.parse(ENV_URL, true);\n  if (uri.query != null) {\n    entries(uri.query).forEach(_ref => {\n      let [key, value] = _ref;\n      return putNestedValue(confToExtend, key, value);\n    });\n  }\n}\nfunction extendCloudinaryConfig(parsedConfig) {\n  let confToExtend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  entries(parsedConfig).forEach(_ref2 => {\n    let [key, value] = _ref2;\n    if (value !== undefined) {\n      confToExtend[key] = value;\n    }\n  });\n  return confToExtend;\n}\nmodule.exports = function (new_config, new_value) {\n  if (cloudinary_config == null || new_config === true) {\n    if (cloudinary_config == null) {\n      cloudinary_config = {};\n    } else {\n      Object.keys(cloudinary_config).forEach(key => delete cloudinary_config[key]);\n    }\n    let CLOUDINARY_ENV_URL = process.env.CLOUDINARY_URL;\n    let CLOUDINARY_ENV_ACCOUNT_URL = process.env.CLOUDINARY_ACCOUNT_URL;\n    let CLOUDINARY_API_PROXY = process.env.CLOUDINARY_API_PROXY;\n    if (CLOUDINARY_ENV_URL && !CLOUDINARY_ENV_URL.toLowerCase().startsWith('cloudinary://')) {\n      throw new Error(\"Invalid CLOUDINARY_URL protocol. URL should begin with 'cloudinary://'\");\n    }\n    if (CLOUDINARY_ENV_ACCOUNT_URL && !CLOUDINARY_ENV_ACCOUNT_URL.toLowerCase().startsWith('account://')) {\n      throw new Error(\"Invalid CLOUDINARY_ACCOUNT_URL protocol. URL should begin with 'account://'\");\n    }\n    if (!isEmpty(CLOUDINARY_API_PROXY)) {\n      extendCloudinaryConfig({\n        api_proxy: CLOUDINARY_API_PROXY\n      }, cloudinary_config);\n    }\n    [CLOUDINARY_ENV_URL, CLOUDINARY_ENV_ACCOUNT_URL].forEach(ENV_URL => {\n      if (ENV_URL) {\n        let parsedConfig = parseCloudinaryConfigFromEnvURL(ENV_URL);\n        extendCloudinaryConfig(parsedConfig, cloudinary_config);\n        // Provide Query support in ENV url cloudinary://key:secret@test123?foo[bar]=value\n        // expect(cloudinary_config.foo.bar).to.eql('value')\n        extendCloudinaryConfigFromQuery(ENV_URL, cloudinary_config);\n      }\n    });\n  }\n  if (!isUndefined(new_value)) {\n    cloudinary_config[new_config] = new_value;\n  } else if (isString(new_config)) {\n    return cloudinary_config[new_config];\n  } else if (isObject(new_config)) {\n    extend(cloudinary_config, new_config);\n  }\n  return cloudinary_config;\n};","map":{"version":3,"names":["url","require","extend","isObject","isString","isUndefined","isEmpty","entries","cloudinary_config","putNestedValue","params","key","value","chain","split","filter","i","length","outer","lastKey","pop","j","innerKey","inner","parseCloudinaryConfigFromEnvURL","ENV_STR","conf","uri","parse","protocol","Object","assign","cloud_name","host","api_key","auth","api_secret","private_cdn","pathname","secure_distribution","substring","account_id","provisioning_api_key","provisioning_api_secret","extendCloudinaryConfigFromQuery","ENV_URL","confToExtend","query","forEach","extendCloudinaryConfig","parsedConfig","undefined","module","exports","new_config","new_value","keys","CLOUDINARY_ENV_URL","process","env","CLOUDINARY_URL","CLOUDINARY_ENV_ACCOUNT_URL","CLOUDINARY_ACCOUNT_URL","CLOUDINARY_API_PROXY","toLowerCase","startsWith","Error","api_proxy"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/config.js"],"sourcesContent":["/**\n * Assign a value to a nested object\n * @function putNestedValue\n * @param params the parent object - this argument will be modified!\n * @param key key in the form nested[innerkey]\n * @param value the value to assign\n * @return the modified params object\n */\nconst url = require('url');\nconst extend = require(\"lodash/extend\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst entries = require('./utils/entries');\n\nlet cloudinary_config = void 0;\n\n/**\n * Sets a value in an object using a nested key\n * @param {object} params The object to assign the value in.\n * @param {string} key The key of the value. A period is used to denote inner keys.\n * @param {*} value The value to set.\n * @returns {object} The params argument.\n * @example\n *     let o = {foo: {bar: 1}};\n *     putNestedValue(o, 'foo.bar', 2); // {foo: {bar: 2}}\n *     putNestedValue(o, 'foo.inner.key', 'this creates an inner object');\n *     // {{foo: {bar: 2}, inner: {key: 'this creates an inner object'}}}\n */\nfunction putNestedValue(params, key, value) {\n  let chain = key.split(/[\\[\\]]+/).filter(i => i.length);\n  let outer = params;\n  let lastKey = chain.pop();\n  for (let j = 0; j < chain.length; j++) {\n    let innerKey = chain[j];\n    let inner = outer[innerKey];\n    if (inner == null) {\n      inner = {};\n      outer[innerKey] = inner;\n    }\n    outer = inner;\n  }\n  outer[lastKey] = value;\n  return params;\n}\n\nfunction parseCloudinaryConfigFromEnvURL(ENV_STR) {\n  let conf = {};\n\n  let uri = url.parse(ENV_STR, true);\n\n  if (uri.protocol === 'cloudinary:') {\n    conf = Object.assign({}, conf, {\n      cloud_name: uri.host,\n      api_key: uri.auth && uri.auth.split(\":\")[0],\n      api_secret: uri.auth && uri.auth.split(\":\")[1],\n      private_cdn: uri.pathname != null,\n      secure_distribution: uri.pathname && uri.pathname.substring(1)\n    });\n  } else if (uri.protocol === 'account:') {\n    conf = Object.assign({}, conf, {\n      account_id: uri.host,\n      provisioning_api_key: uri.auth && uri.auth.split(\":\")[0],\n      provisioning_api_secret: uri.auth && uri.auth.split(\":\")[1]\n    });\n  }\n\n  return conf;\n}\n\nfunction extendCloudinaryConfigFromQuery(ENV_URL, confToExtend = {}) {\n  let uri = url.parse(ENV_URL, true);\n  if (uri.query != null) {\n    entries(uri.query).forEach(([key, value]) => putNestedValue(confToExtend, key, value));\n  }\n}\n\nfunction extendCloudinaryConfig(parsedConfig, confToExtend = {}) {\n  entries(parsedConfig).forEach(([key, value]) => {\n    if (value !== undefined) {\n      confToExtend[key] = value;\n    }\n  });\n\n  return confToExtend;\n}\n\nmodule.exports = function (new_config, new_value) {\n  if ((cloudinary_config == null) || new_config === true) {\n    if (cloudinary_config == null) {\n      cloudinary_config = {};\n    } else {\n      Object.keys(cloudinary_config).forEach(key => delete cloudinary_config[key]);\n    }\n\n    let CLOUDINARY_ENV_URL = process.env.CLOUDINARY_URL;\n    let CLOUDINARY_ENV_ACCOUNT_URL = process.env.CLOUDINARY_ACCOUNT_URL;\n    let CLOUDINARY_API_PROXY = process.env.CLOUDINARY_API_PROXY;\n\n    if (CLOUDINARY_ENV_URL && !CLOUDINARY_ENV_URL.toLowerCase().startsWith('cloudinary://')) {\n      throw new Error(\"Invalid CLOUDINARY_URL protocol. URL should begin with 'cloudinary://'\");\n    }\n    if (CLOUDINARY_ENV_ACCOUNT_URL && !CLOUDINARY_ENV_ACCOUNT_URL.toLowerCase().startsWith('account://')) {\n      throw new Error(\"Invalid CLOUDINARY_ACCOUNT_URL protocol. URL should begin with 'account://'\");\n    }\n    if (!isEmpty(CLOUDINARY_API_PROXY)) {\n      extendCloudinaryConfig({ api_proxy: CLOUDINARY_API_PROXY }, cloudinary_config);\n    }\n\n    [CLOUDINARY_ENV_URL, CLOUDINARY_ENV_ACCOUNT_URL].forEach((ENV_URL) => {\n      if (ENV_URL) {\n        let parsedConfig = parseCloudinaryConfigFromEnvURL(ENV_URL);\n        extendCloudinaryConfig(parsedConfig, cloudinary_config);\n        // Provide Query support in ENV url cloudinary://key:secret@test123?foo[bar]=value\n        // expect(cloudinary_config.foo.bar).to.eql('value')\n        extendCloudinaryConfigFromQuery(ENV_URL, cloudinary_config);\n      }\n    });\n  }\n  if (!isUndefined(new_value)) {\n    cloudinary_config[new_config] = new_value;\n  } else if (isString(new_config)) {\n    return cloudinary_config[new_config];\n  } else if (isObject(new_config)) {\n    extend(cloudinary_config, new_config);\n  }\n  return cloudinary_config;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;AACvC,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMG,QAAQ,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMI,WAAW,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAMK,OAAO,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAMM,OAAO,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAE1C,IAAIO,iBAAiB,GAAG,KAAK,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAC1C,IAAIC,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC;EACtD,IAAIC,KAAK,GAAGR,MAAM;EAClB,IAAIS,OAAO,GAAGN,KAAK,CAACO,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;IACrC,IAAIC,QAAQ,GAAGT,KAAK,CAACQ,CAAC,CAAC;IACvB,IAAIE,KAAK,GAAGL,KAAK,CAACI,QAAQ,CAAC;IAC3B,IAAIC,KAAK,IAAI,IAAI,EAAE;MACjBA,KAAK,GAAG,CAAC,CAAC;MACVL,KAAK,CAACI,QAAQ,CAAC,GAAGC,KAAK;IACzB;IACAL,KAAK,GAAGK,KAAK;EACf;EACAL,KAAK,CAACC,OAAO,CAAC,GAAGP,KAAK;EACtB,OAAOF,MAAM;AACf;AAEA,SAASc,+BAA+B,CAACC,OAAO,EAAE;EAChD,IAAIC,IAAI,GAAG,CAAC,CAAC;EAEb,IAAIC,GAAG,GAAG3B,GAAG,CAAC4B,KAAK,CAACH,OAAO,EAAE,IAAI,CAAC;EAElC,IAAIE,GAAG,CAACE,QAAQ,KAAK,aAAa,EAAE;IAClCH,IAAI,GAAGI,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,IAAI,EAAE;MAC7BM,UAAU,EAAEL,GAAG,CAACM,IAAI;MACpBC,OAAO,EAAEP,GAAG,CAACQ,IAAI,IAAIR,GAAG,CAACQ,IAAI,CAACrB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3CsB,UAAU,EAAET,GAAG,CAACQ,IAAI,IAAIR,GAAG,CAACQ,IAAI,CAACrB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9CuB,WAAW,EAAEV,GAAG,CAACW,QAAQ,IAAI,IAAI;MACjCC,mBAAmB,EAAEZ,GAAG,CAACW,QAAQ,IAAIX,GAAG,CAACW,QAAQ,CAACE,SAAS,CAAC,CAAC;IAC/D,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIb,GAAG,CAACE,QAAQ,KAAK,UAAU,EAAE;IACtCH,IAAI,GAAGI,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,IAAI,EAAE;MAC7Be,UAAU,EAAEd,GAAG,CAACM,IAAI;MACpBS,oBAAoB,EAAEf,GAAG,CAACQ,IAAI,IAAIR,GAAG,CAACQ,IAAI,CAACrB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACxD6B,uBAAuB,EAAEhB,GAAG,CAACQ,IAAI,IAAIR,GAAG,CAACQ,IAAI,CAACrB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC;EACJ;EAEA,OAAOY,IAAI;AACb;AAEA,SAASkB,+BAA+B,CAACC,OAAO,EAAqB;EAAA,IAAnBC,YAAY,uEAAG,CAAC,CAAC;EACjE,IAAInB,GAAG,GAAG3B,GAAG,CAAC4B,KAAK,CAACiB,OAAO,EAAE,IAAI,CAAC;EAClC,IAAIlB,GAAG,CAACoB,KAAK,IAAI,IAAI,EAAE;IACrBxC,OAAO,CAACoB,GAAG,CAACoB,KAAK,CAAC,CAACC,OAAO,CAAC;MAAA,IAAC,CAACrC,GAAG,EAAEC,KAAK,CAAC;MAAA,OAAKH,cAAc,CAACqC,YAAY,EAAEnC,GAAG,EAAEC,KAAK,CAAC;IAAA,EAAC;EACxF;AACF;AAEA,SAASqC,sBAAsB,CAACC,YAAY,EAAqB;EAAA,IAAnBJ,YAAY,uEAAG,CAAC,CAAC;EAC7DvC,OAAO,CAAC2C,YAAY,CAAC,CAACF,OAAO,CAAC,SAAkB;IAAA,IAAjB,CAACrC,GAAG,EAAEC,KAAK,CAAC;IACzC,IAAIA,KAAK,KAAKuC,SAAS,EAAE;MACvBL,YAAY,CAACnC,GAAG,CAAC,GAAGC,KAAK;IAC3B;EACF,CAAC,CAAC;EAEF,OAAOkC,YAAY;AACrB;AAEAM,MAAM,CAACC,OAAO,GAAG,UAAUC,UAAU,EAAEC,SAAS,EAAE;EAChD,IAAK/C,iBAAiB,IAAI,IAAI,IAAK8C,UAAU,KAAK,IAAI,EAAE;IACtD,IAAI9C,iBAAiB,IAAI,IAAI,EAAE;MAC7BA,iBAAiB,GAAG,CAAC,CAAC;IACxB,CAAC,MAAM;MACLsB,MAAM,CAAC0B,IAAI,CAAChD,iBAAiB,CAAC,CAACwC,OAAO,CAACrC,GAAG,IAAI,OAAOH,iBAAiB,CAACG,GAAG,CAAC,CAAC;IAC9E;IAEA,IAAI8C,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc;IACnD,IAAIC,0BAA0B,GAAGH,OAAO,CAACC,GAAG,CAACG,sBAAsB;IACnE,IAAIC,oBAAoB,GAAGL,OAAO,CAACC,GAAG,CAACI,oBAAoB;IAE3D,IAAIN,kBAAkB,IAAI,CAACA,kBAAkB,CAACO,WAAW,EAAE,CAACC,UAAU,CAAC,eAAe,CAAC,EAAE;MACvF,MAAM,IAAIC,KAAK,CAAC,wEAAwE,CAAC;IAC3F;IACA,IAAIL,0BAA0B,IAAI,CAACA,0BAA0B,CAACG,WAAW,EAAE,CAACC,UAAU,CAAC,YAAY,CAAC,EAAE;MACpG,MAAM,IAAIC,KAAK,CAAC,6EAA6E,CAAC;IAChG;IACA,IAAI,CAAC5D,OAAO,CAACyD,oBAAoB,CAAC,EAAE;MAClCd,sBAAsB,CAAC;QAAEkB,SAAS,EAAEJ;MAAqB,CAAC,EAAEvD,iBAAiB,CAAC;IAChF;IAEA,CAACiD,kBAAkB,EAAEI,0BAA0B,CAAC,CAACb,OAAO,CAAEH,OAAO,IAAK;MACpE,IAAIA,OAAO,EAAE;QACX,IAAIK,YAAY,GAAG1B,+BAA+B,CAACqB,OAAO,CAAC;QAC3DI,sBAAsB,CAACC,YAAY,EAAE1C,iBAAiB,CAAC;QACvD;QACA;QACAoC,+BAA+B,CAACC,OAAO,EAAErC,iBAAiB,CAAC;MAC7D;IACF,CAAC,CAAC;EACJ;EACA,IAAI,CAACH,WAAW,CAACkD,SAAS,CAAC,EAAE;IAC3B/C,iBAAiB,CAAC8C,UAAU,CAAC,GAAGC,SAAS;EAC3C,CAAC,MAAM,IAAInD,QAAQ,CAACkD,UAAU,CAAC,EAAE;IAC/B,OAAO9C,iBAAiB,CAAC8C,UAAU,CAAC;EACtC,CAAC,MAAM,IAAInD,QAAQ,CAACmD,UAAU,CAAC,EAAE;IAC/BpD,MAAM,CAACM,iBAAiB,EAAE8C,UAAU,CAAC;EACvC;EACA,OAAO9C,iBAAiB;AAC1B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}