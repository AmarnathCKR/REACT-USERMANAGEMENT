{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n  /**\n   * @param {Qualifiers.Quality} qualityValue a Quality value\n   */\n  constructor(qualityValue) {\n    super('q', qualityValue.toString(), 'level');\n  }\n  /**\n   * Selet the Chroma sub sampling</br>\n   * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\n   * @param {420 | 444 | number} type The chroma sub sampling type\n   */\n  chromaSubSampling(type) {\n    this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\n    const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\n    qualityWithSubSampling.setDelimiter(':');\n    // We either have chroma or quantization, but not both\n    return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n  }\n  /**\n   * Controls the final quality by setting a maximum quantization percentage\n   * @param {number} val\n   */\n  quantization(val) {\n    this._actionModel.quantization = val;\n    const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\n    // We either have chroma or quantization, but not both\n    return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n  }\n  static fromJson(actionModel) {\n    const {\n      level,\n      chromaSubSampling,\n      quantization\n    } = actionModel;\n    const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\n    const result = new this(levelType);\n    if (chromaSubSampling) {\n      //Turn strings like 'CHROMA_420' to 420\n      const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\n      chromaValue && result.chromaSubSampling(+chromaValue);\n    }\n    quantization && result.quantization(quantization);\n    return result;\n  }\n}\nexport { DeliveryQualityAction };","map":{"version":3,"names":["QualifierValue","Qualifier","DeliveryAction","CHROMA_VALUE_TO_CHROMA_MODEL_ENUM","CHROMA_MODEL_ENUM_TO_CHROMA_VALUE","ACTION_TYPE_TO_QUALITY_MODE_MAP","DeliveryQualityAction","constructor","qualityValue","toString","chromaSubSampling","type","_actionModel","qualityWithSubSampling","level","setDelimiter","addQualifier","quantization","val","qualityWithQuantization","fromJson","actionModel","levelType","result","chromaValue","toUpperCase"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryQualityAction.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n    /**\n     * @param {Qualifiers.Quality} qualityValue a Quality value\n     */\n    constructor(qualityValue) {\n        super('q', qualityValue.toString(), 'level');\n    }\n    /**\n     * Selet the Chroma sub sampling</br>\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\n     * @param {420 | 444 | number} type The chroma sub sampling type\n     */\n    chromaSubSampling(type) {\n        this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\n        const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\n        qualityWithSubSampling.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n    quantization(val) {\n        this._actionModel.quantization = val;\n        const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n    static fromJson(actionModel) {\n        const { level, chromaSubSampling, quantization } = actionModel;\n        const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\n        const result = new this(levelType);\n        if (chromaSubSampling) {\n            //Turn strings like 'CHROMA_420' to 420\n            const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\n            chromaValue && result.chromaSubSampling(+chromaValue);\n        }\n        quantization && result.quantization(quantization);\n        return result;\n    }\n}\nexport { DeliveryQualityAction };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,iCAAiC,EAAEC,iCAAiC,EAAEC,+BAA+B,QAAQ,qCAAqC;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,SAASJ,cAAc,CAAC;EAC/C;AACJ;AACA;EACIK,WAAW,CAACC,YAAY,EAAE;IACtB,KAAK,CAAC,GAAG,EAAEA,YAAY,CAACC,QAAQ,EAAE,EAAE,OAAO,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIC,iBAAiB,CAACC,IAAI,EAAE;IACpB,IAAI,CAACC,YAAY,CAACF,iBAAiB,GAAGP,iCAAiC,CAACQ,IAAI,CAAC;IAC7E,MAAME,sBAAsB,GAAG,IAAIb,cAAc,CAAC,CAAC,IAAI,CAACY,YAAY,CAACE,KAAK,EAAEH,IAAI,CAAC,CAAC;IAClFE,sBAAsB,CAACE,YAAY,CAAC,GAAG,CAAC;IACxC;IACA,OAAO,IAAI,CAACC,YAAY,CAAC,IAAIf,SAAS,CAAC,GAAG,EAAEY,sBAAsB,CAAC,CAAC;EACxE;EACA;AACJ;AACA;AACA;EACII,YAAY,CAACC,GAAG,EAAE;IACd,IAAI,CAACN,YAAY,CAACK,YAAY,GAAGC,GAAG;IACpC,MAAMC,uBAAuB,GAAG,IAAInB,cAAc,CAAC,CAAC,IAAI,CAACY,YAAY,CAACE,KAAK,EAAG,QAAOI,GAAI,EAAC,CAAC,CAAC,CAACH,YAAY,CAAC,GAAG,CAAC;IAC9G;IACA,OAAO,IAAI,CAACC,YAAY,CAAC,IAAIf,SAAS,CAAC,GAAG,EAAEkB,uBAAuB,CAAC,CAAC;EACzE;EACA,OAAOC,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEP,KAAK;MAAEJ,iBAAiB;MAAEO;IAAa,CAAC,GAAGI,WAAW;IAC9D,MAAMC,SAAS,GAAGjB,+BAA+B,CAACS,KAAK,CAAC,IAAIA,KAAK;IACjE,MAAMS,MAAM,GAAG,IAAI,IAAI,CAACD,SAAS,CAAC;IAClC,IAAIZ,iBAAiB,EAAE;MACnB;MACA,MAAMc,WAAW,GAAGpB,iCAAiC,CAACM,iBAAiB,CAACe,WAAW,EAAE,CAAC;MACtFD,WAAW,IAAID,MAAM,CAACb,iBAAiB,CAAC,CAACc,WAAW,CAAC;IACzD;IACAP,YAAY,IAAIM,MAAM,CAACN,YAAY,CAACA,YAAY,CAAC;IACjD,OAAOM,MAAM;EACjB;AACJ;AACA,SAASjB,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}