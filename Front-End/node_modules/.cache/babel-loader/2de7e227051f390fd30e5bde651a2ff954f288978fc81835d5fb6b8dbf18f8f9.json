{"ast":null,"code":"// adapted from https://github.com/jridgewell/string-dedent\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fromCharCode = String.fromCharCode;\nvar fromCodePoint = getBuiltIn('String', 'fromCodePoint');\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar stringSlice = uncurryThis(''.slice);\nvar ZERO_CODE = 48;\nvar NINE_CODE = 57;\nvar LOWER_A_CODE = 97;\nvar LOWER_F_CODE = 102;\nvar UPPER_A_CODE = 65;\nvar UPPER_F_CODE = 70;\nvar isDigit = function (str, index) {\n  var c = charCodeAt(str, index);\n  return c >= ZERO_CODE && c <= NINE_CODE;\n};\nvar parseHex = function (str, index, end) {\n  if (end >= str.length) return -1;\n  var n = 0;\n  for (; index < end; index++) {\n    var c = hexToInt(charCodeAt(str, index));\n    if (c === -1) return -1;\n    n = n * 16 + c;\n  }\n  return n;\n};\nvar hexToInt = function (c) {\n  if (c >= ZERO_CODE && c <= NINE_CODE) return c - ZERO_CODE;\n  if (c >= LOWER_A_CODE && c <= LOWER_F_CODE) return c - LOWER_A_CODE + 10;\n  if (c >= UPPER_A_CODE && c <= UPPER_F_CODE) return c - UPPER_A_CODE + 10;\n  return -1;\n};\nmodule.exports = function (raw) {\n  var out = '';\n  var start = 0;\n  // We need to find every backslash escape sequence, and cook the escape into a real char.\n  var i = 0;\n  var n;\n  while ((i = stringIndexOf(raw, '\\\\', i)) > -1) {\n    out += stringSlice(raw, start, i);\n    // If the backslash is the last char of the string, then it was an invalid sequence.\n    // This can't actually happen in a tagged template literal, but could happen if you manually\n    // invoked the tag with an array.\n    if (++i === raw.length) return;\n    var next = charAt(raw, i++);\n    switch (next) {\n      // Escaped control codes need to be individually processed.\n      case 'b':\n        out += '\\b';\n        break;\n      case 't':\n        out += '\\t';\n        break;\n      case 'n':\n        out += '\\n';\n        break;\n      case 'v':\n        out += '\\v';\n        break;\n      case 'f':\n        out += '\\f';\n        break;\n      case 'r':\n        out += '\\r';\n        break;\n      // Escaped line terminators just skip the char.\n      case '\\r':\n        // Treat `\\r\\n` as a single terminator.\n        if (i < raw.length && charAt(raw, i) === '\\n') ++i;\n      // break omitted\n      case '\\n':\n      case '\\u2028':\n      case '\\u2029':\n        break;\n      // `\\0` is a null control char, but `\\0` followed by another digit is an illegal octal escape.\n      case '0':\n        if (isDigit(raw, i)) return;\n        out += '\\0';\n        break;\n      // Hex escapes must contain 2 hex chars.\n      case 'x':\n        n = parseHex(raw, i, i + 2);\n        if (n === -1) return;\n        i += 2;\n        out += fromCharCode(n);\n        break;\n      // Unicode escapes contain either 4 chars, or an unlimited number between `{` and `}`.\n      // The hex value must not overflow 0x10FFFF.\n      case 'u':\n        if (i < raw.length && charAt(raw, i) === '{') {\n          var end = stringIndexOf(raw, '}', ++i);\n          if (end === -1) return;\n          n = parseHex(raw, i, end);\n          i = end + 1;\n        } else {\n          n = parseHex(raw, i, i + 4);\n          i += 4;\n        }\n        if (n === -1 || n > 0x10FFFF) return;\n        out += fromCodePoint(n);\n        break;\n      default:\n        if (isDigit(next, 0)) return;\n        out += next;\n    }\n    start = i;\n  }\n  return out + stringSlice(raw, start);\n};","map":{"version":3,"names":["getBuiltIn","require","uncurryThis","fromCharCode","String","fromCodePoint","charAt","charCodeAt","stringIndexOf","indexOf","stringSlice","slice","ZERO_CODE","NINE_CODE","LOWER_A_CODE","LOWER_F_CODE","UPPER_A_CODE","UPPER_F_CODE","isDigit","str","index","c","parseHex","end","length","n","hexToInt","module","exports","raw","out","start","i","next"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/core-js/internals/string-parse.js"],"sourcesContent":["// adapted from https://github.com/jridgewell/string-dedent\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar fromCharCode = String.fromCharCode;\nvar fromCodePoint = getBuiltIn('String', 'fromCodePoint');\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar stringSlice = uncurryThis(''.slice);\n\nvar ZERO_CODE = 48;\nvar NINE_CODE = 57;\nvar LOWER_A_CODE = 97;\nvar LOWER_F_CODE = 102;\nvar UPPER_A_CODE = 65;\nvar UPPER_F_CODE = 70;\n\nvar isDigit = function (str, index) {\n  var c = charCodeAt(str, index);\n  return c >= ZERO_CODE && c <= NINE_CODE;\n};\n\nvar parseHex = function (str, index, end) {\n  if (end >= str.length) return -1;\n  var n = 0;\n  for (; index < end; index++) {\n    var c = hexToInt(charCodeAt(str, index));\n    if (c === -1) return -1;\n    n = n * 16 + c;\n  }\n  return n;\n};\n\nvar hexToInt = function (c) {\n  if (c >= ZERO_CODE && c <= NINE_CODE) return c - ZERO_CODE;\n  if (c >= LOWER_A_CODE && c <= LOWER_F_CODE) return c - LOWER_A_CODE + 10;\n  if (c >= UPPER_A_CODE && c <= UPPER_F_CODE) return c - UPPER_A_CODE + 10;\n  return -1;\n};\n\nmodule.exports = function (raw) {\n  var out = '';\n  var start = 0;\n  // We need to find every backslash escape sequence, and cook the escape into a real char.\n  var i = 0;\n  var n;\n  while ((i = stringIndexOf(raw, '\\\\', i)) > -1) {\n    out += stringSlice(raw, start, i);\n    // If the backslash is the last char of the string, then it was an invalid sequence.\n    // This can't actually happen in a tagged template literal, but could happen if you manually\n    // invoked the tag with an array.\n    if (++i === raw.length) return;\n    var next = charAt(raw, i++);\n    switch (next) {\n      // Escaped control codes need to be individually processed.\n      case 'b':\n        out += '\\b';\n        break;\n      case 't':\n        out += '\\t';\n        break;\n      case 'n':\n        out += '\\n';\n        break;\n      case 'v':\n        out += '\\v';\n        break;\n      case 'f':\n        out += '\\f';\n        break;\n      case 'r':\n        out += '\\r';\n        break;\n      // Escaped line terminators just skip the char.\n      case '\\r':\n        // Treat `\\r\\n` as a single terminator.\n        if (i < raw.length && charAt(raw, i) === '\\n') ++i;\n      // break omitted\n      case '\\n':\n      case '\\u2028':\n      case '\\u2029':\n        break;\n      // `\\0` is a null control char, but `\\0` followed by another digit is an illegal octal escape.\n      case '0':\n        if (isDigit(raw, i)) return;\n        out += '\\0';\n        break;\n      // Hex escapes must contain 2 hex chars.\n      case 'x':\n        n = parseHex(raw, i, i + 2);\n        if (n === -1) return;\n        i += 2;\n        out += fromCharCode(n);\n        break;\n      // Unicode escapes contain either 4 chars, or an unlimited number between `{` and `}`.\n      // The hex value must not overflow 0x10FFFF.\n      case 'u':\n        if (i < raw.length && charAt(raw, i) === '{') {\n          var end = stringIndexOf(raw, '}', ++i);\n          if (end === -1) return;\n          n = parseHex(raw, i, end);\n          i = end + 1;\n        } else {\n          n = parseHex(raw, i, i + 4);\n          i += 4;\n        }\n        if (n === -1 || n > 0x10FFFF) return;\n        out += fromCodePoint(n);\n        break;\n      default:\n        if (isDigit(next, 0)) return;\n        out += next;\n    }\n    start = i;\n  }\n  return out + stringSlice(raw, start);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}