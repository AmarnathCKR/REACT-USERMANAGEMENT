{"ast":null,"code":"/**\n * @description Contains functions to select the rotation mode.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @memberOf Qualifiers\n * @namespace RotationMode\n * @see Visit {@link Actions.Rotate|Rotate Action} for an example\n */\nimport { RotationModeQualifierValue } from \"./rotate/RotationModeQualifierValue.js\";\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees clockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoRight() {\n  return new RotationModeQualifierValue('auto_right');\n}\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees counterclockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoLeft() {\n  return new RotationModeQualifierValue('auto_left');\n}\n/**\n * @summary qualifier\n * @description Vertical mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction verticalFlip() {\n  return new RotationModeQualifierValue('vflip');\n}\n/**\n * @summary qualifier\n * @description Horizontal mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction horizontalFlip() {\n  return new RotationModeQualifierValue('hflip');\n}\n/**\n * @summary qualifier\n * @description By default, the image is automatically rotated according to the EXIF data stored by the camera when the image\n *                           was taken. Set the angle to 'ignore' if you do not want the image to be automatically rotated.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction ignore() {\n  return new RotationModeQualifierValue('ignore');\n}\nconst RotationMode = {\n  autoLeft,\n  autoRight,\n  horizontalFlip,\n  ignore,\n  verticalFlip\n};\nexport { RotationMode, autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };","map":{"version":3,"names":["RotationModeQualifierValue","autoRight","autoLeft","verticalFlip","horizontalFlip","ignore","RotationMode"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/rotationMode.js"],"sourcesContent":["/**\n * @description Contains functions to select the rotation mode.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @memberOf Qualifiers\n * @namespace RotationMode\n * @see Visit {@link Actions.Rotate|Rotate Action} for an example\n */\nimport { RotationModeQualifierValue } from \"./rotate/RotationModeQualifierValue.js\";\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees clockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoRight() {\n    return new RotationModeQualifierValue('auto_right');\n}\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees counterclockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoLeft() {\n    return new RotationModeQualifierValue('auto_left');\n}\n/**\n * @summary qualifier\n * @description Vertical mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction verticalFlip() {\n    return new RotationModeQualifierValue('vflip');\n}\n/**\n * @summary qualifier\n * @description Horizontal mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction horizontalFlip() {\n    return new RotationModeQualifierValue('hflip');\n}\n/**\n * @summary qualifier\n * @description By default, the image is automatically rotated according to the EXIF data stored by the camera when the image\n *                           was taken. Set the angle to 'ignore' if you do not want the image to be automatically rotated.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction ignore() {\n    return new RotationModeQualifierValue('ignore');\n}\nconst RotationMode = { autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\nexport { RotationMode, autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,wCAAwC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,GAAG;EACjB,OAAO,IAAID,0BAA0B,CAAC,YAAY,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,QAAQ,GAAG;EAChB,OAAO,IAAIF,0BAA0B,CAAC,WAAW,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAY,GAAG;EACpB,OAAO,IAAIH,0BAA0B,CAAC,OAAO,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,cAAc,GAAG;EACtB,OAAO,IAAIJ,0BAA0B,CAAC,OAAO,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,MAAM,GAAG;EACd,OAAO,IAAIL,0BAA0B,CAAC,QAAQ,CAAC;AACnD;AACA,MAAMM,YAAY,GAAG;EAAEJ,QAAQ;EAAED,SAAS;EAAEG,cAAc;EAAEC,MAAM;EAAEF;AAAa,CAAC;AAClF,SAASG,YAAY,EAAEJ,QAAQ,EAAED,SAAS,EAAEG,cAAc,EAAEC,MAAM,EAAEF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}