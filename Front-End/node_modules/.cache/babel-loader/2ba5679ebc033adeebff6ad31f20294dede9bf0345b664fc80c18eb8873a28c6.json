{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { BlendModeQualifier } from \"../../qualifiers/blendMode/BlendModeQualifier.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\nimport { createPositionFromModel } from \"../../internal/models/createPositionFromModel.js\";\nimport { createTimelinePositionFromModel } from \"../../internal/models/createTimelinePositionFromModel.js\";\nimport { ACTION_TYPE_TO_BLEND_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\nclass LayerAction extends Action {\n  /**\n   * @description Creates a LayerAction to be used with overlays and underlays\n   * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n   */\n  constructor(layerSource) {\n    super();\n    this.source = layerSource;\n    this._actionModel = {\n      actionType: 'overlay',\n      source: layerSource.toJson()\n    };\n  }\n  /**\n   * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n   * @param {'u' | 'l'} type\n   * @return {this}\n   */\n  setLayerType(type) {\n    this.layerType = type;\n    this._actionModel.actionType = type === 'u' ? 'underlay' : 'overlay';\n    return this;\n  }\n  /**\n   * @description Sets the timeline position of the video layer\n   * @param {Qualifiers.TimelinePosition} timelinePosition\n   * @return {this}\n   */\n  timeline(timelinePosition) {\n    this._timelinePosition = timelinePosition;\n    this._actionModel.timelinePosition = timelinePosition.toJson();\n    return this;\n  }\n  /**\n   * @description Sets the position of the layer\n   * @param {Qualifiers.Position} position\n   * @return {this}\n   */\n  position(position) {\n    this._position = position;\n    this._actionModel.position = position.toJson();\n    return this;\n  }\n  /**\n   * @description Specifies how to blend the image overlay with the base overlay\n   * @param {Qualifiers.BlendMode|BlendModeType} blendMode\n   * @return {this}\n   */\n  blendMode(blendMode) {\n    this._blendMode = blendMode;\n    const [mode, level] = `${blendMode}`.replace('e_', '').split(\":\");\n    if (mode === 'anti_removal') {\n      this._actionModel.blendMode = level ? {\n        blendModeType: 'antiRemoval',\n        level: level\n      } : {\n        blendModeType: 'antiRemoval'\n      };\n    } else {\n      this._actionModel.blendMode = {\n        blendModeType: mode\n      };\n    }\n    return this;\n  }\n  /**\n   * @private\n   * @description\n   * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n   * @return {SDK.Action}\n   */\n  closeLayer() {\n    var _a, _b, _c, _d;\n    const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n    (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach(qualifier => {\n      bit.addQualifier(qualifier);\n    });\n    // Flags are stored separately from qualifiers, we need to add those as well\n    (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach(flag => {\n      bit.addFlag(flag);\n    });\n    if (typeof this._blendMode === \"string\") {\n      bit.addQualifier(new Qualifier('e', this._blendMode));\n    } else {\n      (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach(qualifier => {\n        bit.addQualifier(qualifier);\n      });\n    }\n    (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach(qualifier => {\n      bit.addQualifier(qualifier);\n    });\n    return bit;\n  }\n  /**\n   * @private\n   * @description\n   * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n   * @return string\n   */\n  openLayer() {\n    return `${this.source.getOpenSourceString(this.layerType)}`;\n  }\n  /**\n   * @description\n   * Serializes the Layer to a string\n   * @return {string}\n   */\n  toString() {\n    return [this.openLayer(), this.source.getTransformation() && this.source.getTransformation().toString(), this.closeLayer()].filter(a => a).join('/');\n  }\n  static fromJson(actionModel, transformationFromJson) {\n    const {\n      source,\n      actionType,\n      position,\n      timelinePosition,\n      blendMode\n    } = actionModel;\n    const sourceInstance = createSourceFromModel(source, transformationFromJson);\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(sourceInstance);\n    const layerType = actionType === 'overlay' ? 'l' : 'u';\n    result.setLayerType(layerType);\n    if (position) {\n      result.position(createPositionFromModel(position));\n    }\n    if (timelinePosition) {\n      result.timeline(createTimelinePositionFromModel(timelinePosition));\n    }\n    if (blendMode) {\n      const blendModeType = ACTION_TYPE_TO_BLEND_MODE_MAP[blendMode.blendModeType] || blendMode.blendModeType;\n      if (blendMode === null || blendMode === void 0 ? void 0 : blendMode.level) {\n        result.blendMode(new BlendModeQualifier(blendModeType, blendMode.level));\n      } else {\n        result.blendMode(new BlendModeQualifier(blendModeType));\n      }\n    }\n    return result;\n  }\n}\nexport { LayerAction };","map":{"version":3,"names":["Action","BlendModeQualifier","FlagQualifier","Qualifier","createSourceFromModel","createPositionFromModel","createTimelinePositionFromModel","ACTION_TYPE_TO_BLEND_MODE_MAP","LayerAction","constructor","layerSource","source","_actionModel","actionType","toJson","setLayerType","type","layerType","timeline","timelinePosition","_timelinePosition","position","_position","blendMode","_blendMode","mode","level","replace","split","blendModeType","closeLayer","_a","_b","_c","_d","bit","addFlag","qualifiers","forEach","qualifier","addQualifier","flags","flag","openLayer","getOpenSourceString","toString","getTransformation","filter","a","join","fromJson","actionModel","transformationFromJson","sourceInstance","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/layer/LayerAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { BlendModeQualifier } from \"../../qualifiers/blendMode/BlendModeQualifier.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\nimport { createPositionFromModel } from \"../../internal/models/createPositionFromModel.js\";\nimport { createTimelinePositionFromModel } from \"../../internal/models/createTimelinePositionFromModel.js\";\nimport { ACTION_TYPE_TO_BLEND_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\nclass LayerAction extends Action {\n    /**\n     * @description Creates a LayerAction to be used with overlays and underlays\n     * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n     */\n    constructor(layerSource) {\n        super();\n        this.source = layerSource;\n        this._actionModel = {\n            actionType: 'overlay',\n            source: layerSource.toJson()\n        };\n    }\n    /**\n     * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n     * @param {'u' | 'l'} type\n     * @return {this}\n     */\n    setLayerType(type) {\n        this.layerType = type;\n        this._actionModel.actionType = type === 'u' ? 'underlay' : 'overlay';\n        return this;\n    }\n    /**\n     * @description Sets the timeline position of the video layer\n     * @param {Qualifiers.TimelinePosition} timelinePosition\n     * @return {this}\n     */\n    timeline(timelinePosition) {\n        this._timelinePosition = timelinePosition;\n        this._actionModel.timelinePosition = timelinePosition.toJson();\n        return this;\n    }\n    /**\n     * @description Sets the position of the layer\n     * @param {Qualifiers.Position} position\n     * @return {this}\n     */\n    position(position) {\n        this._position = position;\n        this._actionModel.position = position.toJson();\n        return this;\n    }\n    /**\n     * @description Specifies how to blend the image overlay with the base overlay\n     * @param {Qualifiers.BlendMode|BlendModeType} blendMode\n     * @return {this}\n     */\n    blendMode(blendMode) {\n        this._blendMode = blendMode;\n        const [mode, level] = `${blendMode}`.replace('e_', '').split(\":\");\n        if (mode === 'anti_removal') {\n            this._actionModel.blendMode = level ? { blendModeType: 'antiRemoval', level: level } : { blendModeType: 'antiRemoval' };\n        }\n        else {\n            this._actionModel.blendMode = { blendModeType: mode };\n        }\n        return this;\n    }\n    /**\n     * @private\n     * @description\n     * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return {SDK.Action}\n     */\n    closeLayer() {\n        var _a, _b, _c, _d;\n        const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n        (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        // Flags are stored separately from qualifiers, we need to add those as well\n        (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach((flag) => {\n            bit.addFlag(flag);\n        });\n        if (typeof this._blendMode === \"string\") {\n            bit.addQualifier(new Qualifier('e', this._blendMode));\n        }\n        else {\n            (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach((qualifier) => {\n                bit.addQualifier(qualifier);\n            });\n        }\n        (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        return bit;\n    }\n    /**\n     * @private\n     * @description\n     * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return string\n     */\n    openLayer() {\n        return `${this.source.getOpenSourceString(this.layerType)}`;\n    }\n    /**\n     * @description\n     * Serializes the Layer to a string\n     * @return {string}\n     */\n    toString() {\n        return [\n            this.openLayer(),\n            this.source.getTransformation() && this.source.getTransformation().toString(),\n            this.closeLayer()\n        ].filter((a) => a).join('/');\n    }\n    static fromJson(actionModel, transformationFromJson) {\n        const { source, actionType, position, timelinePosition, blendMode } = actionModel;\n        const sourceInstance = createSourceFromModel(source, transformationFromJson);\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(sourceInstance);\n        const layerType = actionType === 'overlay' ? 'l' : 'u';\n        result.setLayerType(layerType);\n        if (position) {\n            result.position(createPositionFromModel(position));\n        }\n        if (timelinePosition) {\n            result.timeline(createTimelinePositionFromModel(timelinePosition));\n        }\n        if (blendMode) {\n            const blendModeType = ACTION_TYPE_TO_BLEND_MODE_MAP[blendMode.blendModeType] || blendMode.blendModeType;\n            if (blendMode === null || blendMode === void 0 ? void 0 : blendMode.level) {\n                result.blendMode(new BlendModeQualifier(blendModeType, blendMode.level));\n            }\n            else {\n                result.blendMode(new BlendModeQualifier(blendModeType));\n            }\n        }\n        return result;\n    }\n}\nexport { LayerAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}