{"ast":null,"code":"import { Action } from \"../../../internal/Action.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP, EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description A class that defines a simple effect of the type e_{effectName}\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass SimpleEffectAction extends Action {\n  constructor(effectType, level) {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\n    const qualifierEffect = this.createEffectQualifier(effectType, level);\n    this.addQualifier(qualifierEffect);\n  }\n  createEffectQualifier(effectType, level) {\n    let qualifierValue;\n    if (level) {\n      qualifierValue = new QualifierValue([effectType, `${level}`]).setDelimiter(':');\n    } else {\n      qualifierValue = new QualifierValue(effectType);\n    }\n    return new Qualifier('e', qualifierValue);\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      level,\n      strength\n    } = actionModel;\n    const effectType = ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType] || actionType;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    // @ts-ignore\n    const result = new this(effectType, level ? level : strength);\n    return result;\n  }\n}\nexport { SimpleEffectAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ACTION_TYPE_TO_EFFECT_MODE_MAP","EFFECT_MODE_TO_ACTION_TYPE_MAP","SimpleEffectAction","constructor","effectType","level","_actionModel","actionType","qualifierEffect","createEffectQualifier","addQualifier","qualifierValue","setDelimiter","fromJson","actionModel","strength","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/SimpleEffectAction.js"],"sourcesContent":["import { Action } from \"../../../internal/Action.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP, EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description A class that defines a simple effect of the type e_{effectName}\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass SimpleEffectAction extends Action {\n    constructor(effectType, level) {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\n        const qualifierEffect = this.createEffectQualifier(effectType, level);\n        this.addQualifier(qualifierEffect);\n    }\n    createEffectQualifier(effectType, level) {\n        let qualifierValue;\n        if (level) {\n            qualifierValue = new QualifierValue([effectType, `${level}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(effectType);\n        }\n        return new Qualifier('e', qualifierValue);\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, strength } = actionModel;\n        const effectType = ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        // @ts-ignore\n        const result = new this(effectType, level ? level : strength);\n        return result;\n    }\n}\nexport { SimpleEffectAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,6BAA6B;AACpD,SAASC,cAAc,QAAQ,+CAA+C;AAC9E,SAASC,SAAS,QAAQ,0CAA0C;AACpE,SAASC,8BAA8B,EAAEC,8BAA8B,QAAQ,wCAAwC;AACvH;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASL,MAAM,CAAC;EACpCM,WAAW,CAACC,UAAU,EAAEC,KAAK,EAAE;IAC3B,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACA,YAAY,CAACC,UAAU,GAAGN,8BAA8B,CAACG,UAAU,CAAC,IAAIA,UAAU;IACvF,MAAMI,eAAe,GAAG,IAAI,CAACC,qBAAqB,CAACL,UAAU,EAAEC,KAAK,CAAC;IACrE,IAAI,CAACK,YAAY,CAACF,eAAe,CAAC;EACtC;EACAC,qBAAqB,CAACL,UAAU,EAAEC,KAAK,EAAE;IACrC,IAAIM,cAAc;IAClB,IAAIN,KAAK,EAAE;MACPM,cAAc,GAAG,IAAIb,cAAc,CAAC,CAACM,UAAU,EAAG,GAAEC,KAAM,EAAC,CAAC,CAAC,CAACO,YAAY,CAAC,GAAG,CAAC;IACnF,CAAC,MACI;MACDD,cAAc,GAAG,IAAIb,cAAc,CAACM,UAAU,CAAC;IACnD;IACA,OAAO,IAAIL,SAAS,CAAC,GAAG,EAAEY,cAAc,CAAC;EAC7C;EACA,OAAOE,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEP,UAAU;MAAEF,KAAK;MAAEU;IAAS,CAAC,GAAGD,WAAW;IACnD,MAAMV,UAAU,GAAGJ,8BAA8B,CAACO,UAAU,CAAC,IAAIA,UAAU;IAC3E;IACA;IACA;IACA,MAAMS,MAAM,GAAG,IAAI,IAAI,CAACZ,UAAU,EAAEC,KAAK,GAAGA,KAAK,GAAGU,QAAQ,CAAC;IAC7D,OAAOC,MAAM;EACjB;AACJ;AACA,SAASd,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}