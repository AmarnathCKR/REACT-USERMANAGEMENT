{"ast":null,"code":"const api = require('./api');\nconst {\n  isEmpty,\n  isNumber\n} = require('../utils');\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n  static instance() {\n    return new Search();\n  }\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n  static sort_by(field_name) {\n    let dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n    return this.instance().sort_by(field_name, dir);\n  }\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n  aggregate(value) {\n    const found = this.query_hash.aggregate.find(v => v === value);\n    if (!found) {\n      this.query_hash.aggregate.push(value);\n    }\n    return this;\n  }\n  with_field(value) {\n    const found = this.query_hash.with_field.find(v => v === value);\n    if (!found) {\n      this.query_hash.with_field.push(value);\n    }\n    return this;\n  }\n  sort_by(field_name) {\n    let dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"desc\";\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir;\n\n    // Check if this field name is already stored in the hash\n    const previously_sorted_obj = this.query_hash.sort_by.find(sort_by => sort_by[field_name]);\n\n    // Since objects are references in Javascript, we can update the reference we found\n    // For example,\n    if (previously_sorted_obj) {\n      previously_sorted_obj[field_name] = dir;\n    } else {\n      this.query_hash.sort_by.push(sort_bucket);\n    }\n    return this;\n  }\n  to_query() {\n    Object.keys(this.query_hash).forEach(k => {\n      let v = this.query_hash[k];\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n};\nmodule.exports = Search;","map":{"version":3,"names":["api","require","isEmpty","isNumber","Search","constructor","query_hash","sort_by","aggregate","with_field","instance","expression","value","max_results","next_cursor","field_name","dir","found","find","v","push","sort_bucket","previously_sorted_obj","to_query","Object","keys","forEach","k","execute","options","callback","search","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/v2/search.js"],"sourcesContent":["const api = require('./api');\nconst {isEmpty, isNumber} = require('../utils');\n\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n\n  static instance() {\n    return new Search();\n  }\n\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n\n  static sort_by(field_name, dir = 'asc') {\n    return this.instance().sort_by(field_name, dir);\n  }\n\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n\n  aggregate(value) {\n    const found = this.query_hash.aggregate.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.aggregate.push(value);\n    }\n\n    return this;\n  }\n\n  with_field(value) {\n    const found = this.query_hash.with_field.find(v => v === value);\n\n    if (!found) {\n      this.query_hash.with_field.push(value);\n    }\n\n    return this;\n  }\n\n  sort_by(field_name, dir = \"desc\") {\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir;\n\n    // Check if this field name is already stored in the hash\n    const previously_sorted_obj = this.query_hash.sort_by.find((sort_by) => sort_by[field_name]);\n\n    // Since objects are references in Javascript, we can update the reference we found\n    // For example,\n    if (previously_sorted_obj) {\n      previously_sorted_obj[field_name] = dir;\n    } else {\n      this.query_hash.sort_by.push(sort_bucket);\n    }\n\n    return this;\n  }\n\n  to_query() {\n    Object.keys(this.query_hash).forEach((k) => {\n      let v = this.query_hash[k];\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n};\n\nmodule.exports = Search;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}