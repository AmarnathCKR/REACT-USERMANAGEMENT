{"ast":null,"code":"import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\n/**\n * @description Determines the video codec to use.\n * @memberOf Qualifiers\n * @namespace VideoCodec\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n/**\n * @summary qualifier\n * @description Auto video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction auto() {\n  return new VideoCodecType('auto');\n}\n/**\n * @summary qualifier\n * @description Video codec h264.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\n */\nfunction h264() {\n  return new AdvVideoCodecType('h264');\n}\n/**\n * @summary qualifier\n * @description h265 video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction h265() {\n  return new VideoCodecType('h265');\n}\n/**\n * @summary qualifier\n * @description Video codec proRes (Apple ProRes 422 HQ).\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction proRes() {\n  return new VideoCodecType('prores');\n}\n/**\n * @summary qualifier\n * @description Video codec theora.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction theora() {\n  return new VideoCodecType('theora');\n}\n/**\n * @summary qualifier\n * @description Video codec vp8.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp8() {\n  return new VideoCodecType('vp8');\n}\n/**\n * @summary qualifier\n * @description Video codec vp9.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp9() {\n  return new VideoCodecType('vp9');\n}\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\n  'auto': auto(),\n  'h264': h264(),\n  'h265': h265(),\n  'prores': proRes(),\n  'theora': theora(),\n  'vp8': vp8(),\n  'vp9': vp9()\n};\nconst VideoCodec = {\n  auto,\n  h264,\n  h265,\n  proRes,\n  theora,\n  vp8,\n  vp9\n};\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };","map":{"version":3,"names":["AdvVideoCodecType","VideoCodecType","auto","h264","h265","proRes","theora","vp8","vp9","VIDEO_CODEC_TO_TRANSFORMATION","VideoCodec"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/videoCodec.js"],"sourcesContent":["import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\n/**\n * @description Determines the video codec to use.\n * @memberOf Qualifiers\n * @namespace VideoCodec\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n/**\n * @summary qualifier\n * @description Auto video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction auto() {\n    return new VideoCodecType('auto');\n}\n/**\n * @summary qualifier\n * @description Video codec h264.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\n */\nfunction h264() {\n    return new AdvVideoCodecType('h264');\n}\n/**\n * @summary qualifier\n * @description h265 video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction h265() {\n    return new VideoCodecType('h265');\n}\n/**\n * @summary qualifier\n * @description Video codec proRes (Apple ProRes 422 HQ).\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction proRes() {\n    return new VideoCodecType('prores');\n}\n/**\n * @summary qualifier\n * @description Video codec theora.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction theora() {\n    return new VideoCodecType('theora');\n}\n/**\n * @summary qualifier\n * @description Video codec vp8.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp8() {\n    return new VideoCodecType('vp8');\n}\n/**\n * @summary qualifier\n * @description Video codec vp9.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp9() {\n    return new VideoCodecType('vp9');\n}\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\n    'auto': auto(),\n    'h264': h264(),\n    'h265': h265(),\n    'prores': proRes(),\n    'theora': theora(),\n    'vp8': vp8(),\n    'vp9': vp9()\n};\nconst VideoCodec = { auto, h264, h265, proRes, theora, vp8, vp9 };\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,cAAc,QAAQ,oCAAoC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAI,GAAG;EACZ,OAAO,IAAID,cAAc,CAAC,MAAM,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,IAAI,GAAG;EACZ,OAAO,IAAIH,iBAAiB,CAAC,MAAM,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,IAAI,GAAG;EACZ,OAAO,IAAIH,cAAc,CAAC,MAAM,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,MAAM,GAAG;EACd,OAAO,IAAIJ,cAAc,CAAC,QAAQ,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,MAAM,GAAG;EACd,OAAO,IAAIL,cAAc,CAAC,QAAQ,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,GAAG,GAAG;EACX,OAAO,IAAIN,cAAc,CAAC,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,GAAG,GAAG;EACX,OAAO,IAAIP,cAAc,CAAC,KAAK,CAAC;AACpC;AACA,OAAO,MAAMQ,6BAA6B,GAAG;EACzC,MAAM,EAAEP,IAAI,EAAE;EACd,MAAM,EAAEC,IAAI,EAAE;EACd,MAAM,EAAEC,IAAI,EAAE;EACd,QAAQ,EAAEC,MAAM,EAAE;EAClB,QAAQ,EAAEC,MAAM,EAAE;EAClB,KAAK,EAAEC,GAAG,EAAE;EACZ,KAAK,EAAEC,GAAG;AACd,CAAC;AACD,MAAME,UAAU,GAAG;EAAER,IAAI;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC,MAAM;EAAEC,GAAG;EAAEC;AAAI,CAAC;AACjE,SAASE,UAAU,EAAER,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}