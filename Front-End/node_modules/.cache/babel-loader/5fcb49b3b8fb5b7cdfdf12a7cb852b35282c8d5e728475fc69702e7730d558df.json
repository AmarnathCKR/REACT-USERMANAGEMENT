{"ast":null,"code":"import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n  constructor(squareSize) {\n    super();\n    this._actionModel = {};\n    this._squareSize = squareSize;\n    this._actionModel.actionType = 'pixelate';\n    this._actionModel.squareSize = squareSize;\n  }\n  /**\n   * @description Specifies the region to piexlate.\n   * @param {NamedRegion} pixelateRegion\n   */\n  region(pixelateRegion) {\n    this._region = pixelateRegion;\n    this._actionModel.region = {\n      RegionType: this._region.regionType\n    };\n    return this;\n  }\n  /**\n   * @description Sets the squareSize of the pixelate effect.\n   * @param {number | string} squareSize\n   */\n  squareSize(squareSize) {\n    this._squareSize = squareSize;\n    this._actionModel.squareSize = squareSize;\n    return this;\n  }\n  prepareQualifiers() {\n    /*\n     * pixelate with region is a unique object in this codebase.\n     * On top of pixelate being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of pixelate in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (pixelate and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with pixelate\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const str = this._squareSize ? `:${this._squareSize}` : '';\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers;\n      // Copy qualifiers from the region \"action\" to the pixelate action\n      qualifiers.forEach(q => this.addQualifier(q));\n      if (this._region.regionType === 'named') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n      }\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `pixelate${str}`));\n    }\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      region,\n      squareSize\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(squareSize);\n    squareSize && result.squareSize(squareSize);\n    if (region && region.RegionType === 'faces') {\n      result.region(faces());\n    }\n    if (region && region.RegionType === 'custom') {\n      result.region(custom());\n    }\n    return result;\n  }\n}\nexport { Pixelate };","map":{"version":3,"names":["Qualifier","Action","custom","faces","Pixelate","constructor","squareSize","_actionModel","_squareSize","actionType","region","pixelateRegion","_region","RegionType","regionType","prepareQualifiers","str","qualifiers","forEach","q","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/pixelate/Pixelate.js"],"sourcesContent":["import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n    constructor(squareSize) {\n        super();\n        this._actionModel = {};\n        this._squareSize = squareSize;\n        this._actionModel.actionType = 'pixelate';\n        this._actionModel.squareSize = squareSize;\n    }\n    /**\n     * @description Specifies the region to piexlate.\n     * @param {NamedRegion} pixelateRegion\n     */\n    region(pixelateRegion) {\n        this._region = pixelateRegion;\n        this._actionModel.region = { RegionType: this._region.regionType };\n        return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n    squareSize(squareSize) {\n        this._squareSize = squareSize;\n        this._actionModel.squareSize = squareSize;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * pixelate with region is a unique object in this codebase.\n         * On top of pixelate being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of pixelate in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with pixelate\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._squareSize ? `:${this._squareSize}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the pixelate action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'named') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { actionType, region, squareSize } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(squareSize);\n        squareSize && result.squareSize(squareSize);\n        if (region && region.RegionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.RegionType === 'custom') {\n            result.region(custom());\n        }\n        return result;\n    }\n}\nexport { Pixelate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}