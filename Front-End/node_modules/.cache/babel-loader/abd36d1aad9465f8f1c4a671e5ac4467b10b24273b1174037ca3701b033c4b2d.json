{"ast":null,"code":"const utils = require('./index');\nconst generateBreakpoints = require('./generateBreakpoints');\nconst Cache = require('../cache');\nconst isEmpty = utils.isEmpty;\n\n/**\n * Options used to generate the srcset attribute.\n * @typedef {object} srcset\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\n * @property {number}                [min_width]   Minimal width of the srcset images.\n * @property {number}                [max_width]   Maximal width of the srcset images.\n * @property {number}                [max_images]  Number of srcset images to generate.\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\n */\n\n/**\n * Helper function. Generates a single srcset item url\n *\n * @private\n * @param {string} public_id  Public ID of the resource.\n * @param {number} width      Width in pixels of the srcset item.\n * @param {object|string} transformation\n * @param {object} options    Additional options.\n *\n * @return {string} Resulting URL of the item\n */\nfunction scaledUrl(public_id, width, transformation) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let configParams = utils.extractUrlParams(options);\n  transformation = transformation || options;\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), {\n    crop: 'scale',\n    width: width\n  }]);\n  return utils.url(public_id, configParams);\n}\n\n/**\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\n * or cache is not enabled, generate the values.\n * @param {srcset} srcset The srcset configuration parameters\n * @param {string} public_id\n * @param {object} options\n * @return {*|Array}\n */\nfunction getOrGenerateBreakpoints(public_id) {\n  let srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let breakpoints = [];\n  if (srcset.useCache) {\n    breakpoints = Cache.get(public_id, options);\n    if (!breakpoints) {\n      breakpoints = [];\n    }\n  } else {\n    breakpoints = generateBreakpoints(srcset);\n  }\n  return breakpoints;\n}\n\n/**\n * Helper function. Generates srcset attribute value of the HTML img tag\n * @private\n *\n * @param {string} public_id  Public ID of the resource\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\n * @param {object} transformation The transformation\n * @param {object} options Includes html tag options, transformation options\n * @return {string} Resulting srcset attribute value\n */\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\n  options = utils.clone(options);\n  utils.patchFetchFormat(options);\n  return breakpoints.map(width => `${scaledUrl(public_id, width, transformation, options)} ${width}w`).join(', ');\n}\n\n/**\n * Helper function. Generates sizes attribute value of the HTML img tag\n * @private\n * @param {number[]} breakpoints An array of breakpoints.\n * @return {string} Resulting sizes attribute value\n */\nfunction generateSizesAttribute() {\n  let breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return breakpoints.map(width => `(max-width: ${width}px) ${width}px`).join(', ');\n}\n\n/**\n * Helper function. Generates srcset and sizes attributes of the image tag\n *\n * Generated attributes are added to attributes argument\n *\n * @private\n * @param {string}    publicId  The public ID of the resource\n * @param {object}    attributes Existing HTML attributes.\n * @param {srcset}    srcsetData\n * @param {object}    options    Additional options.\n *\n * @return array The responsive attributes\n */\nfunction generateImageResponsiveAttributes(publicId) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let srcsetData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Create both srcset and sizes here to avoid fetching breakpoints twice\n\n  let responsiveAttributes = {};\n  if (isEmpty(srcsetData)) {\n    return responsiveAttributes;\n  }\n  const generateSizes = !attributes.sizes && srcsetData.sizes === true;\n  const generateSrcset = !attributes.srcset;\n  if (generateSrcset || generateSizes) {\n    let breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\n    if (generateSrcset) {\n      let transformation = srcsetData.transformation;\n      let srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\n      if (!isEmpty(srcsetAttr)) {\n        responsiveAttributes.srcset = srcsetAttr;\n      }\n    }\n    if (generateSizes) {\n      let sizesAttr = generateSizesAttribute(breakpoints);\n      if (!isEmpty(sizesAttr)) {\n        responsiveAttributes.sizes = sizesAttr;\n      }\n    }\n  }\n  return responsiveAttributes;\n}\n\n/**\n * Generate a media query\n *\n * @private\n * @param {object} options configuration options\n * @param {number|string} options.min_width\n * @param {number|string} options.max_width\n * @return {string} a media query string\n */\nfunction generateMediaAttr() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let mediaQuery = [];\n  if (options.min_width != null) {\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\n  }\n  if (options.max_width != null) {\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\n  }\n  return mediaQuery.join(' and ');\n}\nmodule.exports = {\n  srcsetUrl: scaledUrl,\n  generateSrcsetAttribute,\n  generateSizesAttribute,\n  generateMediaAttr,\n  generateImageResponsiveAttributes\n};","map":{"version":3,"names":["utils","require","generateBreakpoints","Cache","isEmpty","scaledUrl","public_id","width","transformation","options","configParams","extractUrlParams","raw_transformation","generate_transformation_string","extend","crop","url","getOrGenerateBreakpoints","srcset","breakpoints","useCache","get","generateSrcsetAttribute","clone","patchFetchFormat","map","join","generateSizesAttribute","generateImageResponsiveAttributes","publicId","attributes","srcsetData","responsiveAttributes","generateSizes","sizes","generateSrcset","srcsetAttr","sizesAttr","generateMediaAttr","mediaQuery","min_width","push","max_width","module","exports","srcsetUrl"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/utils/srcsetUtils.js"],"sourcesContent":["\nconst utils = require('./index');\nconst generateBreakpoints = require('./generateBreakpoints');\nconst Cache = require('../cache');\n\nconst isEmpty = utils.isEmpty;\n\n/**\n * Options used to generate the srcset attribute.\n * @typedef {object} srcset\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\n * @property {number}                [min_width]   Minimal width of the srcset images.\n * @property {number}                [max_width]   Maximal width of the srcset images.\n * @property {number}                [max_images]  Number of srcset images to generate.\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\n */\n\n/**\n * Helper function. Generates a single srcset item url\n *\n * @private\n * @param {string} public_id  Public ID of the resource.\n * @param {number} width      Width in pixels of the srcset item.\n * @param {object|string} transformation\n * @param {object} options    Additional options.\n *\n * @return {string} Resulting URL of the item\n */\nfunction scaledUrl(public_id, width, transformation, options = {}) {\n  let configParams = utils.extractUrlParams(options);\n  transformation = transformation || options;\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), { crop: 'scale', width: width }]);\n\n  return utils.url(public_id, configParams);\n}\n\n/**\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\n * or cache is not enabled, generate the values.\n * @param {srcset} srcset The srcset configuration parameters\n * @param {string} public_id\n * @param {object} options\n * @return {*|Array}\n */\nfunction getOrGenerateBreakpoints(public_id, srcset = {}, options = {}) {\n  let breakpoints = [];\n  if (srcset.useCache) {\n    breakpoints = Cache.get(public_id, options);\n    if (!breakpoints) {\n      breakpoints = [];\n    }\n  } else {\n    breakpoints = generateBreakpoints(srcset);\n  }\n  return breakpoints;\n}\n\n/**\n * Helper function. Generates srcset attribute value of the HTML img tag\n * @private\n *\n * @param {string} public_id  Public ID of the resource\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\n * @param {object} transformation The transformation\n * @param {object} options Includes html tag options, transformation options\n * @return {string} Resulting srcset attribute value\n */\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\n  options = utils.clone(options);\n  utils.patchFetchFormat(options);\n  return breakpoints.map(width => `${scaledUrl(public_id, width, transformation, options)} ${width}w`).join(', ');\n}\n\n/**\n * Helper function. Generates sizes attribute value of the HTML img tag\n * @private\n * @param {number[]} breakpoints An array of breakpoints.\n * @return {string} Resulting sizes attribute value\n */\nfunction generateSizesAttribute(breakpoints = []) {\n  return breakpoints.map(width => `(max-width: ${width}px) ${width}px`).join(', ');\n}\n\n/**\n * Helper function. Generates srcset and sizes attributes of the image tag\n *\n * Generated attributes are added to attributes argument\n *\n * @private\n * @param {string}    publicId  The public ID of the resource\n * @param {object}    attributes Existing HTML attributes.\n * @param {srcset}    srcsetData\n * @param {object}    options    Additional options.\n *\n * @return array The responsive attributes\n */\nfunction generateImageResponsiveAttributes(publicId, attributes = {}, srcsetData = {}, options = {}) {\n  // Create both srcset and sizes here to avoid fetching breakpoints twice\n\n  let responsiveAttributes = {};\n  if (isEmpty(srcsetData)) {\n    return responsiveAttributes;\n  }\n\n  const generateSizes = (!attributes.sizes && srcsetData.sizes === true);\n\n  const generateSrcset = !attributes.srcset;\n  if (generateSrcset || generateSizes) {\n    let breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\n\n    if (generateSrcset) {\n      let transformation = srcsetData.transformation;\n      let srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\n      if (!isEmpty(srcsetAttr)) {\n        responsiveAttributes.srcset = srcsetAttr;\n      }\n    }\n\n    if (generateSizes) {\n      let sizesAttr = generateSizesAttribute(breakpoints);\n      if (!isEmpty(sizesAttr)) {\n        responsiveAttributes.sizes = sizesAttr;\n      }\n    }\n  }\n  return responsiveAttributes;\n}\n\n/**\n * Generate a media query\n *\n * @private\n * @param {object} options configuration options\n * @param {number|string} options.min_width\n * @param {number|string} options.max_width\n * @return {string} a media query string\n */\nfunction generateMediaAttr(options = {}) {\n  let mediaQuery = [];\n  if (options.min_width != null) {\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\n  }\n  if (options.max_width != null) {\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\n  }\n  return mediaQuery.join(' and ');\n}\n\nmodule.exports = {\n  srcsetUrl: scaledUrl,\n  generateSrcsetAttribute,\n  generateSizesAttribute,\n  generateMediaAttr,\n  generateImageResponsiveAttributes\n};\n"],"mappings":"AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEjC,MAAMG,OAAO,GAAGJ,KAAK,CAACI,OAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,SAAS,EAAEC,KAAK,EAAEC,cAAc,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC/D,IAAIC,YAAY,GAAGV,KAAK,CAACW,gBAAgB,CAACF,OAAO,CAAC;EAClDD,cAAc,GAAGA,cAAc,IAAIC,OAAO;EAC1CC,YAAY,CAACE,kBAAkB,GAAGZ,KAAK,CAACa,8BAA8B,CAAC,CAACb,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC,EAAEN,cAAc,CAAC,EAAE;IAAEO,IAAI,EAAE,OAAO;IAAER,KAAK,EAAEA;EAAM,CAAC,CAAC,CAAC;EAE3I,OAAOP,KAAK,CAACgB,GAAG,CAACV,SAAS,EAAEI,YAAY,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,wBAAwB,CAACX,SAAS,EAA6B;EAAA,IAA3BY,MAAM,uEAAG,CAAC,CAAC;EAAA,IAAET,OAAO,uEAAG,CAAC,CAAC;EACpE,IAAIU,WAAW,GAAG,EAAE;EACpB,IAAID,MAAM,CAACE,QAAQ,EAAE;IACnBD,WAAW,GAAGhB,KAAK,CAACkB,GAAG,CAACf,SAAS,EAAEG,OAAO,CAAC;IAC3C,IAAI,CAACU,WAAW,EAAE;MAChBA,WAAW,GAAG,EAAE;IAClB;EACF,CAAC,MAAM;IACLA,WAAW,GAAGjB,mBAAmB,CAACgB,MAAM,CAAC;EAC3C;EACA,OAAOC,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,uBAAuB,CAAChB,SAAS,EAAEa,WAAW,EAAEX,cAAc,EAAEC,OAAO,EAAE;EAChFA,OAAO,GAAGT,KAAK,CAACuB,KAAK,CAACd,OAAO,CAAC;EAC9BT,KAAK,CAACwB,gBAAgB,CAACf,OAAO,CAAC;EAC/B,OAAOU,WAAW,CAACM,GAAG,CAAClB,KAAK,IAAK,GAAEF,SAAS,CAACC,SAAS,EAAEC,KAAK,EAAEC,cAAc,EAAEC,OAAO,CAAE,IAAGF,KAAM,GAAE,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC;AACjH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,GAAmB;EAAA,IAAlBR,WAAW,uEAAG,EAAE;EAC9C,OAAOA,WAAW,CAACM,GAAG,CAAClB,KAAK,IAAK,eAAcA,KAAM,OAAMA,KAAM,IAAG,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iCAAiC,CAACC,QAAQ,EAAkD;EAAA,IAAhDC,UAAU,uEAAG,CAAC,CAAC;EAAA,IAAEC,UAAU,uEAAG,CAAC,CAAC;EAAA,IAAEtB,OAAO,uEAAG,CAAC,CAAC;EACjG;;EAEA,IAAIuB,oBAAoB,GAAG,CAAC,CAAC;EAC7B,IAAI5B,OAAO,CAAC2B,UAAU,CAAC,EAAE;IACvB,OAAOC,oBAAoB;EAC7B;EAEA,MAAMC,aAAa,GAAI,CAACH,UAAU,CAACI,KAAK,IAAIH,UAAU,CAACG,KAAK,KAAK,IAAK;EAEtE,MAAMC,cAAc,GAAG,CAACL,UAAU,CAACZ,MAAM;EACzC,IAAIiB,cAAc,IAAIF,aAAa,EAAE;IACnC,IAAId,WAAW,GAAGF,wBAAwB,CAACY,QAAQ,EAAEE,UAAU,EAAEtB,OAAO,CAAC;IAEzE,IAAI0B,cAAc,EAAE;MAClB,IAAI3B,cAAc,GAAGuB,UAAU,CAACvB,cAAc;MAC9C,IAAI4B,UAAU,GAAGd,uBAAuB,CAACO,QAAQ,EAAEV,WAAW,EAAEX,cAAc,EAAEC,OAAO,CAAC;MACxF,IAAI,CAACL,OAAO,CAACgC,UAAU,CAAC,EAAE;QACxBJ,oBAAoB,CAACd,MAAM,GAAGkB,UAAU;MAC1C;IACF;IAEA,IAAIH,aAAa,EAAE;MACjB,IAAII,SAAS,GAAGV,sBAAsB,CAACR,WAAW,CAAC;MACnD,IAAI,CAACf,OAAO,CAACiC,SAAS,CAAC,EAAE;QACvBL,oBAAoB,CAACE,KAAK,GAAGG,SAAS;MACxC;IACF;EACF;EACA,OAAOL,oBAAoB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,iBAAiB,GAAe;EAAA,IAAd7B,OAAO,uEAAG,CAAC,CAAC;EACrC,IAAI8B,UAAU,GAAG,EAAE;EACnB,IAAI9B,OAAO,CAAC+B,SAAS,IAAI,IAAI,EAAE;IAC7BD,UAAU,CAACE,IAAI,CAAE,eAAchC,OAAO,CAAC+B,SAAU,KAAI,CAAC;EACxD;EACA,IAAI/B,OAAO,CAACiC,SAAS,IAAI,IAAI,EAAE;IAC7BH,UAAU,CAACE,IAAI,CAAE,eAAchC,OAAO,CAACiC,SAAU,KAAI,CAAC;EACxD;EACA,OAAOH,UAAU,CAACb,IAAI,CAAC,OAAO,CAAC;AACjC;AAEAiB,MAAM,CAACC,OAAO,GAAG;EACfC,SAAS,EAAExC,SAAS;EACpBiB,uBAAuB;EACvBK,sBAAsB;EACtBW,iBAAiB;EACjBV;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}