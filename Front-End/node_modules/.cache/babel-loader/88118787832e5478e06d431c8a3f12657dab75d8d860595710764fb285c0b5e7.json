{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  constructor(cropType, cropWidth, cropHeight) {\n    super();\n    this._actionModel = {\n      dimensions: {}\n    };\n    this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n    this.addQualifier(new Qualifier('c', cropType));\n    cropWidth && this.width(cropWidth);\n    cropHeight && this.height(cropHeight);\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n  height(x) {\n    this._actionModel.dimensions.height = x;\n    return this.addQualifier(new Qualifier('h', x));\n  }\n  /**\n   * @description Sets the width of the resize\n   * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n  width(x) {\n    this._actionModel.dimensions.width = x;\n    return this.addQualifier(new Qualifier('w', x));\n  }\n  /**\n   * @description Sets the aspect ratio of the asset.\n   * For a list of supported types see {@link Qualifiers.AspectRatio|\n    * AspectRatio values}\n   * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n   * @return {this}\n   */\n  aspectRatio(ratio) {\n    // toFloatAsString is used to ensure 1 turns into 1.0\n    if (ratio instanceof AspectRatioQualifierValue) {\n      this._actionModel.dimensions.aspectRatio = `${ratio}`;\n      return this.addQualifier(new Qualifier('ar', ratio));\n    }\n    if (typeof ratio === 'number' || typeof ratio === 'string') {\n      this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n      return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n    }\n    if (ratio instanceof FlagQualifier) {\n      this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n      return this.addFlag(ratio);\n    }\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n   * @return {this}\n   */\n  relative() {\n    this._actionModel.relative = true;\n    return this.addFlag(relative());\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n   * @return {this}\n   */\n  regionRelative() {\n    this._actionModel.regionRelative = true;\n    return this.addFlag(regionRelative());\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      dimensions,\n      relative,\n      regionRelative\n    } = actionModel;\n    const {\n      aspectRatio,\n      width,\n      height\n    } = dimensions;\n    const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(cropMode, width, height);\n    aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n    relative && result.relative();\n    regionRelative && result.regionRelative();\n    return result;\n  }\n}\nexport { ResizeSimpleAction };","map":{"version":3,"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","ignoreInitialAspectRatio","regionRelative","relative","FlagQualifier","ACTION_TYPE_TO_CROP_MODE_MAP","CROP_MODE_TO_ACTION_TYPE_MAP","ResizeSimpleAction","constructor","cropType","cropWidth","cropHeight","_actionModel","dimensions","actionType","addQualifier","width","height","x","aspectRatio","ratio","qualifierValue","addFlag","fromJson","actionModel","cropMode","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizeSimpleAction.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        this._actionModel = { dimensions: {} };\n        this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n        this.addQualifier(new Qualifier('c', cropType));\n        cropWidth && this.width(cropWidth);\n        cropHeight && this.height(cropHeight);\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        this._actionModel.dimensions.height = x;\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        this._actionModel.dimensions.width = x;\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\n      * AspectRatio values}\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            this._actionModel.dimensions.aspectRatio = `${ratio}`;\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        this._actionModel.relative = true;\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        this._actionModel.regionRelative = true;\n        return this.addFlag(regionRelative());\n    }\n    static fromJson(actionModel) {\n        const { actionType, dimensions, relative, regionRelative } = actionModel;\n        const { aspectRatio, width, height } = dimensions;\n        const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(cropMode, width, height);\n        aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n        relative && result.relative();\n        regionRelative && result.regionRelative();\n        return result;\n    }\n}\nexport { ResizeSimpleAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}