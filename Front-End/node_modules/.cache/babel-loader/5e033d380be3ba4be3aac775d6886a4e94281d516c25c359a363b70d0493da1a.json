{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @description Delivers an animated GIF that contains additional loops of the GIF.\n * The total number of iterations is the number of additional loops plus one.\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n *\n * @memberOf Actions\n * @namespace Animated\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n/**\n * @memberOf Actions.Animated\n * @see Actions.Animated\n * @example\n * // Used through a builder function Animated.edit(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\nclass AnimatedAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   * @description Controls the time delay between the frames of an animated image, in milliseconds.\n   * @param {number} delayValue The delay in milliseconds\n   * @return {this}\n   */\n  delay(delayValue) {\n    this.addQualifier(new Qualifier('dl', delayValue));\n    return this;\n  }\n  /**\n   * @description Delivers an animated GIF that contains additional loops of the GIF.\n   * @param {number} additionalLoops The additional number of times to play the animated GIF.\n   * @return {this}\n   */\n  loop(additionalLoops) {\n    const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n}\n/**\n * @summary action\n * @memberOf Actions.Animated\n * @description Delivers an animated GIF.\n * @return {Actions.Animated.AnimatedAction}\n */\nfunction edit() {\n  return new AnimatedAction();\n}\nconst Animated = {\n  edit\n};\nexport { AnimatedAction, Animated, edit };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","AnimatedAction","constructor","delay","delayValue","addQualifier","loop","additionalLoops","qualifierValue","setDelimiter","edit","Animated"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/animated.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @description Delivers an animated GIF that contains additional loops of the GIF.\n * The total number of iterations is the number of additional loops plus one.\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n *\n * @memberOf Actions\n * @namespace Animated\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n/**\n * @memberOf Actions.Animated\n * @see Actions.Animated\n * @example\n * // Used through a builder function Animated.edit(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\nclass AnimatedAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description Controls the time delay between the frames of an animated image, in milliseconds.\n     * @param {number} delayValue The delay in milliseconds\n     * @return {this}\n     */\n    delay(delayValue) {\n        this.addQualifier(new Qualifier('dl', delayValue));\n        return this;\n    }\n    /**\n     * @description Delivers an animated GIF that contains additional loops of the GIF.\n     * @param {number} additionalLoops The additional number of times to play the animated GIF.\n     * @return {this}\n     */\n    loop(additionalLoops) {\n        const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Animated\n * @description Delivers an animated GIF.\n * @return {Actions.Animated.AnimatedAction}\n */\nfunction edit() {\n    return new AnimatedAction();\n}\nconst Animated = {\n    edit\n};\nexport { AnimatedAction, Animated, edit };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,cAAc,QAAQ,yCAAyC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASH,MAAM,CAAC;EAChCI,WAAW,GAAG;IACV,KAAK,EAAE;EACX;EACA;AACJ;AACA;AACA;AACA;EACIC,KAAK,CAACC,UAAU,EAAE;IACd,IAAI,CAACC,YAAY,CAAC,IAAIN,SAAS,CAAC,IAAI,EAAEK,UAAU,CAAC,CAAC;IAClD,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIE,IAAI,CAACC,eAAe,EAAE;IAClB,MAAMC,cAAc,GAAG,IAAIR,cAAc,CAAC,CAAC,MAAM,EAAEO,eAAe,CAAC,CAAC,CAACE,YAAY,CAAC,GAAG,CAAC;IACtF,IAAI,CAACJ,YAAY,CAAC,IAAIN,SAAS,CAAC,GAAG,EAAES,cAAc,CAAC,CAAC;IACrD,OAAO,IAAI;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,IAAI,GAAG;EACZ,OAAO,IAAIT,cAAc,EAAE;AAC/B;AACA,MAAMU,QAAQ,GAAG;EACbD;AACJ,CAAC;AACD,SAAST,cAAc,EAAEU,QAAQ,EAAED,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}