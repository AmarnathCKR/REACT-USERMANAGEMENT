{"ast":null,"code":"import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n  constructor() {\n    super(...arguments);\n    this._actionModel = {\n      actionType: 'makeTransparent'\n    };\n  }\n  /**\n   * @description Sets the tolerance used to accommodate variance in the background color.\n   * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n   */\n  tolerance(value) {\n    this._actionModel.tolerance = value;\n    const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n    this.addQualifier(qualifierEffect);\n    return this;\n  }\n  /**\n   * @description Sets the color to make transparent.\n   * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n   * @return {this}\n   */\n  colorToReplace(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      tolerance,\n      color\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\n    tolerance && result.tolerance(tolerance);\n    color && result.colorToReplace(color);\n    return result;\n  }\n}\nexport { MakeTransparentEffectAction };","map":{"version":3,"names":["LeveledEffectAction","Qualifier","QualifierValue","prepareColor","ACTION_TYPE_TO_EFFECT_MODE_MAP","MakeTransparentEffectAction","constructor","arguments","_actionModel","actionType","tolerance","value","qualifierEffect","createEffectQualifier","effectType","addQualifier","colorToReplace","color","fromJson","actionModel","result"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/leveled/MakeTransparent.js"],"sourcesContent":["import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'makeTransparent' };\n    }\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    tolerance(value) {\n        this._actionModel.tolerance = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n    colorToReplace(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, tolerance, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\n        tolerance && result.tolerance(tolerance);\n        color && result.colorToReplace(color);\n        return result;\n    }\n}\nexport { MakeTransparentEffectAction };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yCAAyC;AAC7E,SAASC,SAAS,QAAQ,0CAA0C;AACpE,SAASC,cAAc,QAAQ,+CAA+C;AAC9E,SAASC,YAAY,QAAQ,yCAAyC;AACtE,SAASC,8BAA8B,QAAQ,wCAAwC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,SAASL,mBAAmB,CAAC;EAC1DM,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,YAAY,GAAG;MAAEC,UAAU,EAAE;IAAkB,CAAC;EACzD;EACA;AACJ;AACA;AACA;EACIC,SAAS,CAACC,KAAK,EAAE;IACb,IAAI,CAACH,YAAY,CAACE,SAAS,GAAGC,KAAK;IACnC,MAAMC,eAAe,GAAG,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACC,UAAU,EAAEH,KAAK,CAAC;IAC1E,IAAI,CAACI,YAAY,CAACH,eAAe,CAAC;IAClC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACII,cAAc,CAACC,KAAK,EAAE;IAClB,IAAI,CAACT,YAAY,CAACS,KAAK,GAAGA,KAAK;IAC/B,OAAO,IAAI,CAACF,YAAY,CAAC,IAAId,SAAS,CAAC,IAAI,EAAE,IAAIC,cAAc,CAACC,YAAY,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1F;EACA,OAAOC,QAAQ,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEV,UAAU;MAAEC,SAAS;MAAEO;IAAM,CAAC,GAAGE,WAAW;IACpD;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,IAAI,CAAChB,8BAA8B,CAACK,UAAU,CAAC,EAAEC,SAAS,CAAC;IAC9EA,SAAS,IAAIU,MAAM,CAACV,SAAS,CAACA,SAAS,CAAC;IACxCO,KAAK,IAAIG,MAAM,CAACJ,cAAc,CAACC,KAAK,CAAC;IACrC,OAAOG,MAAM;EACjB;AACJ;AACA,SAASf,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}