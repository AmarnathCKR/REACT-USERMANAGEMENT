{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\n/**\n * @description  Defines the clipping path to use when trimming pixels.\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\nclass ClipAction extends Action {\n  constructor() {\n    super();\n    this.isEvenOdd = false;\n  }\n  /**\n   * @description The name of the path to clip by\n   * @param {string} path\n   * @return {this}\n   */\n  byName(path) {\n    this.path = path;\n    return this;\n  }\n  /**\n   * @description The index of the path to clip by\n   * @param {number} path\n   * @return {this}\n   */\n  byIndex(path) {\n    this.path = path;\n    return this;\n  }\n  /**\n   * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\n   * @return {this}\n   */\n  evenOdd() {\n    this.isEvenOdd = true;\n    return this;\n  }\n  prepareQualifiers() {\n    let qualifierValue;\n    if (typeof this.path === 'string') {\n      qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\n    } else {\n      qualifierValue = new QualifierValue(this.path);\n    }\n    //handles flag\n    if (this.isEvenOdd) {\n      this.addFlag(clipEvenOdd());\n    } else {\n      this.addFlag(clip());\n    }\n    this.addQualifier(new Qualifier('pg', qualifierValue));\n    return this;\n  }\n}\nexport { ClipAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","clip","clipEvenOdd","ClipAction","constructor","isEvenOdd","byName","path","byIndex","evenOdd","prepareQualifiers","qualifierValue","setDelimiter","addFlag","addQualifier"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/psdTools/ClipAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\n/**\n * @description  Defines the clipping path to use when trimming pixels.\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\nclass ClipAction extends Action {\n    constructor() {\n        super();\n        this.isEvenOdd = false;\n    }\n    /**\n     * @description The name of the path to clip by\n     * @param {string} path\n     * @return {this}\n     */\n    byName(path) {\n        this.path = path;\n        return this;\n    }\n    /**\n     * @description The index of the path to clip by\n     * @param {number} path\n     * @return {this}\n     */\n    byIndex(path) {\n        this.path = path;\n        return this;\n    }\n    /**\n     * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\n     * @return {this}\n     */\n    evenOdd() {\n        this.isEvenOdd = true;\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (typeof this.path === 'string') {\n            qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(this.path);\n        }\n        //handles flag\n        if (this.isEvenOdd) {\n            this.addFlag(clipEvenOdd());\n        }\n        else {\n            this.addFlag(clip());\n        }\n        this.addQualifier(new Qualifier('pg', qualifierValue));\n        return this;\n    }\n}\nexport { ClipAction };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,IAAI,EAAEC,WAAW,QAAQ,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASL,MAAM,CAAC;EAC5BM,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACIC,MAAM,CAACC,IAAI,EAAE;IACT,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIC,OAAO,CAACD,IAAI,EAAE;IACV,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,OAAO,GAAG;IACN,IAAI,CAACJ,SAAS,GAAG,IAAI;IACrB,OAAO,IAAI;EACf;EACAK,iBAAiB,GAAG;IAChB,IAAIC,cAAc;IAClB,IAAI,OAAO,IAAI,CAACJ,IAAI,KAAK,QAAQ,EAAE;MAC/BI,cAAc,GAAG,IAAIX,cAAc,CAAC,CAAC,MAAM,EAAE,IAAI,CAACO,IAAI,CAAC,CAAC,CAACK,YAAY,CAAC,GAAG,CAAC;IAC9E,CAAC,MACI;MACDD,cAAc,GAAG,IAAIX,cAAc,CAAC,IAAI,CAACO,IAAI,CAAC;IAClD;IACA;IACA,IAAI,IAAI,CAACF,SAAS,EAAE;MAChB,IAAI,CAACQ,OAAO,CAACX,WAAW,EAAE,CAAC;IAC/B,CAAC,MACI;MACD,IAAI,CAACW,OAAO,CAACZ,IAAI,EAAE,CAAC;IACxB;IACA,IAAI,CAACa,YAAY,CAAC,IAAIf,SAAS,CAAC,IAAI,EAAEY,cAAc,CAAC,CAAC;IACtD,OAAO,IAAI;EACf;AACJ;AACA,SAASR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}