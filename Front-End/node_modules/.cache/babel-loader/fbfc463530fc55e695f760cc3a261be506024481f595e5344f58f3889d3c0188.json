{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description\n * Defines the mode of blending to use when overlaying an image.\n * Even though BlendMode is technically an actionQualifier, it implements exactly the same functionality as an action.\n * This is true because Position is actually compounded of multiple qualifiers\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#blending_and_masking_layers|Overlay blending effects}\n *\n * @memberOf Qualifiers.BlendMode\n * @extends SDK.Action\n */\nclass BlendModeQualifier extends Action {\n  constructor(blendMode, level) {\n    super();\n    this.addQualifier(new Qualifier('e', new QualifierValue([blendMode, level])));\n  }\n}\nexport { BlendModeQualifier };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","BlendModeQualifier","constructor","blendMode","level","addQualifier"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/blendMode/BlendModeQualifier.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description\n * Defines the mode of blending to use when overlaying an image.\n * Even though BlendMode is technically an actionQualifier, it implements exactly the same functionality as an action.\n * This is true because Position is actually compounded of multiple qualifiers\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#blending_and_masking_layers|Overlay blending effects}\n *\n * @memberOf Qualifiers.BlendMode\n * @extends SDK.Action\n */\nclass BlendModeQualifier extends Action {\n    constructor(blendMode, level) {\n        super();\n        this.addQualifier(new Qualifier('e', new QualifierValue([blendMode, level])));\n    }\n}\nexport { BlendModeQualifier };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE,SAASC,cAAc,QAAQ,4CAA4C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASH,MAAM,CAAC;EACpCI,WAAW,CAACC,SAAS,EAAEC,KAAK,EAAE;IAC1B,KAAK,EAAE;IACP,IAAI,CAACC,YAAY,CAAC,IAAIN,SAAS,CAAC,GAAG,EAAE,IAAIC,cAAc,CAAC,CAACG,SAAS,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjF;AACJ;AACA,SAASH,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}