{"ast":null,"code":"import { LEGACY_PREDEFINED_VARS, LEGACY_CONDITIONAL_OPERATORS } from \"../consts.js\";\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\nexport function legacyNormalizeExpression(expression) {\n  if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {\n    if (expression) {\n      return expression.toString();\n    } else {\n      return expression;\n    }\n  }\n  expression = String(expression);\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\";\n  // operators\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => {\n    return LEGACY_CONDITIONAL_OPERATORS[match];\n  });\n  // predefined variables\n  const predefinedVarsPattern = \"(\" + Object.keys(LEGACY_PREDEFINED_VARS).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  // @ts-ignore\n  expression = expression.replace(variablesReplaceRE, match => LEGACY_PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}","map":{"version":3,"names":["LEGACY_PREDEFINED_VARS","LEGACY_CONDITIONAL_OPERATORS","legacyNormalizeExpression","expression","length","match","toString","String","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","Object","keys","join","userVariablePattern","variablesReplaceRE"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js"],"sourcesContent":["import { LEGACY_PREDEFINED_VARS, LEGACY_CONDITIONAL_OPERATORS } from \"../consts.js\";\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\nexport function legacyNormalizeExpression(expression) {\n    if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {\n        if (expression) {\n            return expression.toString();\n        }\n        else {\n            return expression;\n        }\n    }\n    expression = String(expression);\n    const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\";\n    // operators\n    const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n    const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n    expression = expression.replace(operatorsReplaceRE, (match) => {\n        return LEGACY_CONDITIONAL_OPERATORS[match];\n    });\n    // predefined variables\n    const predefinedVarsPattern = \"(\" + Object.keys(LEGACY_PREDEFINED_VARS).join(\"|\") + \")\";\n    const userVariablePattern = '(\\\\$_*[^_ ]+)';\n    const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n    // @ts-ignore\n    expression = expression.replace(variablesReplaceRE, (match) => (LEGACY_PREDEFINED_VARS[match] || match));\n    return expression.replace(/[ _]+/g, '_');\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,EAAEC,4BAA4B,QAAQ,cAAc;AACnF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyB,CAACC,UAAU,EAAE;EAClD,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACC,MAAM,KAAK,CAAC,IAAID,UAAU,CAACE,KAAK,CAAC,QAAQ,CAAC,EAAE;IACzF,IAAIF,UAAU,EAAE;MACZ,OAAOA,UAAU,CAACG,QAAQ,EAAE;IAChC,CAAC,MACI;MACD,OAAOH,UAAU;IACrB;EACJ;EACAA,UAAU,GAAGI,MAAM,CAACJ,UAAU,CAAC;EAC/B,MAAMK,SAAS,GAAG,0CAA0C;EAC5D;EACA,MAAMC,gBAAgB,GAAG,IAAI,GAAGD,SAAS,GAAG,YAAY;EACxD,MAAME,kBAAkB,GAAG,IAAIC,MAAM,CAACF,gBAAgB,EAAE,GAAG,CAAC;EAC5DN,UAAU,GAAGA,UAAU,CAACS,OAAO,CAACF,kBAAkB,EAAGL,KAAK,IAAK;IAC3D,OAAOJ,4BAA4B,CAACI,KAAK,CAAC;EAC9C,CAAC,CAAC;EACF;EACA,MAAMQ,qBAAqB,GAAG,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACf,sBAAsB,CAAC,CAACgB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;EACvF,MAAMC,mBAAmB,GAAG,eAAe;EAC3C,MAAMC,kBAAkB,GAAG,IAAIP,MAAM,CAAE,GAAEM,mBAAoB,IAAGJ,qBAAsB,EAAC,EAAE,GAAG,CAAC;EAC7F;EACAV,UAAU,GAAGA,UAAU,CAACS,OAAO,CAACM,kBAAkB,EAAGb,KAAK,IAAML,sBAAsB,CAACK,KAAK,CAAC,IAAIA,KAAM,CAAC;EACxG,OAAOF,UAAU,CAACS,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}