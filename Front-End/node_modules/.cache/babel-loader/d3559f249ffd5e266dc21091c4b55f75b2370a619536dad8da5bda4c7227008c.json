{"ast":null,"code":"/**\n * Helper function. Gets or populates srcset breakpoints using provided parameters\n * Either the breakpoints or min_width, max_width, max_images must be provided.\n *\n * @module utils\n * @private\n * @param {srcset} srcset Options with either `breakpoints` or `min_width`, `max_width`, and `max_images`\n *\n * @return {number[]} Array of breakpoints\n *\n */\nfunction generateBreakpoints(srcset) {\n  let breakpoints = srcset.breakpoints || [];\n  if (breakpoints.length) {\n    return breakpoints;\n  }\n  let [min_width, max_width, max_images] = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number);\n  if ([min_width, max_width, max_images].some(Number.isNaN)) {\n    throw 'Either (min_width, max_width, max_images) ' + 'or breakpoints must be provided to the image srcset attribute';\n  }\n  if (min_width > max_width) {\n    throw 'min_width must be less than max_width';\n  }\n  if (max_images <= 0) {\n    throw 'max_images must be a positive integer';\n  } else if (max_images === 1) {\n    min_width = max_width;\n  }\n  let stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));\n  for (let current = min_width; current < max_width; current += stepSize) {\n    breakpoints.push(current);\n  }\n  breakpoints.push(max_width);\n  return breakpoints;\n}\nmodule.exports = generateBreakpoints;","map":{"version":3,"names":["generateBreakpoints","srcset","breakpoints","length","min_width","max_width","max_images","map","Number","some","isNaN","stepSize","Math","ceil","max","current","push","module","exports"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/cloudinary/lib/utils/generateBreakpoints.js"],"sourcesContent":["\n/**\n * Helper function. Gets or populates srcset breakpoints using provided parameters\n * Either the breakpoints or min_width, max_width, max_images must be provided.\n *\n * @module utils\n * @private\n * @param {srcset} srcset Options with either `breakpoints` or `min_width`, `max_width`, and `max_images`\n *\n * @return {number[]} Array of breakpoints\n *\n */\nfunction generateBreakpoints(srcset) {\n  let breakpoints = srcset.breakpoints || [];\n  if (breakpoints.length) {\n    return breakpoints;\n  }\n  let [min_width, max_width, max_images] = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number);\n  if ([min_width, max_width, max_images].some(Number.isNaN)) {\n    throw 'Either (min_width, max_width, max_images) '\n    + 'or breakpoints must be provided to the image srcset attribute';\n  }\n\n  if (min_width > max_width) {\n    throw 'min_width must be less than max_width';\n  }\n\n  if (max_images <= 0) {\n    throw 'max_images must be a positive integer';\n  } else if (max_images === 1) {\n    min_width = max_width;\n  }\n\n  let stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));\n  for (let current = min_width; current < max_width; current += stepSize) {\n    breakpoints.push(current);\n  }\n  breakpoints.push(max_width);\n  return breakpoints;\n}\nmodule.exports = generateBreakpoints;\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,CAACC,MAAM,EAAE;EACnC,IAAIC,WAAW,GAAGD,MAAM,CAACC,WAAW,IAAI,EAAE;EAC1C,IAAIA,WAAW,CAACC,MAAM,EAAE;IACtB,OAAOD,WAAW;EACpB;EACA,IAAI,CAACE,SAAS,EAAEC,SAAS,EAAEC,UAAU,CAAC,GAAG,CAACL,MAAM,CAACG,SAAS,EAAEH,MAAM,CAACI,SAAS,EAAEJ,MAAM,CAACK,UAAU,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAC5G,IAAI,CAACJ,SAAS,EAAEC,SAAS,EAAEC,UAAU,CAAC,CAACG,IAAI,CAACD,MAAM,CAACE,KAAK,CAAC,EAAE;IACzD,MAAM,4CAA4C,GAChD,+DAA+D;EACnE;EAEA,IAAIN,SAAS,GAAGC,SAAS,EAAE;IACzB,MAAM,uCAAuC;EAC/C;EAEA,IAAIC,UAAU,IAAI,CAAC,EAAE;IACnB,MAAM,uCAAuC;EAC/C,CAAC,MAAM,IAAIA,UAAU,KAAK,CAAC,EAAE;IAC3BF,SAAS,GAAGC,SAAS;EACvB;EAEA,IAAIM,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACR,SAAS,GAAGD,SAAS,IAAIQ,IAAI,CAACE,GAAG,CAACR,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/E,KAAK,IAAIS,OAAO,GAAGX,SAAS,EAAEW,OAAO,GAAGV,SAAS,EAAEU,OAAO,IAAIJ,QAAQ,EAAE;IACtET,WAAW,CAACc,IAAI,CAACD,OAAO,CAAC;EAC3B;EACAb,WAAW,CAACc,IAAI,CAACX,SAAS,CAAC;EAC3B,OAAOH,WAAW;AACpB;AACAe,MAAM,CAACC,OAAO,GAAGlB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}