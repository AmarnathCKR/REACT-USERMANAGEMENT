{"ast":null,"code":"import { base64Encode } from \"../../internal/utils/base64Encode.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Actions.CustomFunction\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\n */\nclass CustomFunctionAction extends Action {\n  /**\n   *\n   * @param {string} fn The custom function to use, can be a URL or a publicID\n   */\n  constructor(fn) {\n    super();\n    this.fn = fn;\n  }\n  encodeCustomFunctionString(fn) {\n    const encodedSource = base64Encode(fn);\n    return encodedSource;\n  }\n  /**\n   * Use a WASM as a custom function,\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n   */\n  asWasm() {\n    this.mode = 'wasm';\n    return this;\n  }\n  /**\n   * Use a remote URL as a custom function\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n   */\n  asRemote() {\n    this.mode = 'remote';\n    return this;\n  }\n  prepareQualifiers() {\n    this.encodedFn = this.fn;\n    if (this.mode === 'remote') {\n      this.encodedFn = this.encodeCustomFunctionString(this.fn);\n    }\n    return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n  }\n  toString() {\n    return super.toString().replace(/\\//g, ':');\n  }\n}\nexport default CustomFunctionAction;","map":{"version":3,"names":["base64Encode","Action","QualifierValue","Qualifier","CustomFunctionAction","constructor","fn","encodeCustomFunctionString","encodedSource","asWasm","mode","asRemote","prepareQualifiers","encodedFn","addQualifier","pre","toString","replace"],"sources":["C:/Users/amarn/Desktop/REACT PROJECT/usermanagement/Front-End/node_modules/@cloudinary/transformation-builder-sdk/actions/customFunction/CustomFunctionAction.js"],"sourcesContent":["import { base64Encode } from \"../../internal/utils/base64Encode.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Actions.CustomFunction\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\n */\nclass CustomFunctionAction extends Action {\n    /**\n     *\n     * @param {string} fn The custom function to use, can be a URL or a publicID\n     */\n    constructor(fn) {\n        super();\n        this.fn = fn;\n    }\n    encodeCustomFunctionString(fn) {\n        const encodedSource = base64Encode(fn);\n        return encodedSource;\n    }\n    /**\n     * Use a WASM as a custom function,\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n    asWasm() {\n        this.mode = 'wasm';\n        return this;\n    }\n    /**\n     * Use a remote URL as a custom function\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n    asRemote() {\n        this.mode = 'remote';\n        return this;\n    }\n    prepareQualifiers() {\n        this.encodedFn = this.fn;\n        if (this.mode === 'remote') {\n            this.encodedFn = this.encodeCustomFunctionString(this.fn);\n        }\n        return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n    }\n    toString() {\n        return super.toString()\n            .replace(/\\//g, ':');\n    }\n}\nexport default CustomFunctionAction;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,sCAAsC;AACnE,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,cAAc,QAAQ,4CAA4C;AAC3E,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASH,MAAM,CAAC;EACtC;AACJ;AACA;AACA;EACII,WAAW,CAACC,EAAE,EAAE;IACZ,KAAK,EAAE;IACP,IAAI,CAACA,EAAE,GAAGA,EAAE;EAChB;EACAC,0BAA0B,CAACD,EAAE,EAAE;IAC3B,MAAME,aAAa,GAAGR,YAAY,CAACM,EAAE,CAAC;IACtC,OAAOE,aAAa;EACxB;EACA;AACJ;AACA;AACA;EACIC,MAAM,GAAG;IACL,IAAI,CAACC,IAAI,GAAG,MAAM;IAClB,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,QAAQ,GAAG;IACP,IAAI,CAACD,IAAI,GAAG,QAAQ;IACpB,OAAO,IAAI;EACf;EACAE,iBAAiB,GAAG;IAChB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACP,EAAE;IACxB,IAAI,IAAI,CAACI,IAAI,KAAK,QAAQ,EAAE;MACxB,IAAI,CAACG,SAAS,GAAG,IAAI,CAACN,0BAA0B,CAAC,IAAI,CAACD,EAAE,CAAC;IAC7D;IACA,OAAO,IAAI,CAACQ,YAAY,CAAC,IAAIX,SAAS,CAAC,IAAI,EAAE,IAAID,cAAc,CAAC,CAAC,IAAI,CAACa,GAAG,EAAE,IAAI,CAACL,IAAI,EAAE,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5G;EACAG,QAAQ,GAAG;IACP,OAAO,KAAK,CAACA,QAAQ,EAAE,CAClBC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC5B;AACJ;AACA,eAAeb,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}